; Assembly listing for method DivisionLoop:Run(int):int (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 80
       vzeroupper 
       lea      rbp, [rsp+0x50]
       xor      eax, eax
       mov      qword ptr [rbp-0x38], rax
       mov      dword ptr [rbp-0x3C], eax
       mov      dword ptr [rbp-0x2C], edi
 
G_M000_IG02:
       xor      edi, edi
       mov      qword ptr [rbp-0x38], rdi
       xor      edi, edi
       mov      dword ptr [rbp-0x3C], edi
       mov      dword ptr [rbp-0x48], 0x3E8
       jmp      SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x3C]
       inc      edi
       mov      dword ptr [rbp-0x3C], edi
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, dword ptr [rbp-0x3C]
       vmovsd   xmm1, qword ptr [reloc @RWD00]
       vdivsd   xmm0, xmm1, xmm0
       vaddsd   xmm0, xmm0, qword ptr [rbp-0x38]
       vmovsd   qword ptr [rbp-0x38], xmm0
 
G_M000_IG04:
       mov      edi, dword ptr [rbp-0x48]
       dec      edi
       mov      dword ptr [rbp-0x48], edi
       cmp      dword ptr [rbp-0x48], 0
       jg       SHORT G_M000_IG06
 
G_M000_IG05:
       lea      rdi, [rbp-0x48]
       mov      esi, 33
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG06:
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, dword ptr [rbp-0x2C]
       vucomisd xmm0, qword ptr [rbp-0x38]
       ja       SHORT G_M000_IG03
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x3C]
 
G_M000_IG07:
       add      rsp, 80
       pop      rbp
       ret      
 
RWD00  	dq	3FF0000000000000h	;            1

; Total bytes of code 167

; Assembly listing for method DivisionLoop:Run(int):int (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x21
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 99.99

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       vzeroupper 
       mov      rbp, rsp
       mov      edi, dword ptr [rbp+0x34]
       vmovsd   xmm0, qword ptr [rbp+0x28]
       mov      eax, dword ptr [rbp+0x24]
 
G_M000_IG02:
       vxorps   xmm1, xmm1, xmm1
       vcvtsi2sd xmm1, xmm1, edi
       vucomisd xmm1, xmm0
       jbe      SHORT G_M000_IG05
 
G_M000_IG03:
       vmovsd   xmm2, qword ptr [reloc @RWD00]
       align    [4 bytes for IG04]
 
G_M000_IG04:
       inc      eax
       vxorps   xmm3, xmm3, xmm3
       vcvtsi2sd xmm3, xmm3, eax
       vdivsd   xmm3, xmm2, xmm3
       vaddsd   xmm0, xmm3, xmm0
       vucomisd xmm1, xmm0
       ja       SHORT G_M000_IG04
 
G_M000_IG05:
       add      rsp, 96
       pop      rbp
       ret      
 
RWD00  	dq	3FF0000000000000h	;            1

; Total bytes of code 78

; Assembly listing for method DivisionLoop:Run(int):int (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 80
       vzeroupper 
       lea      rbp, [rsp+0x50]
       xor      eax, eax
       mov      qword ptr [rbp-0x38], rax
       mov      dword ptr [rbp-0x3C], eax
       mov      dword ptr [rbp-0x2C], edi
 
G_M000_IG02:
       xor      edi, edi
       mov      qword ptr [rbp-0x38], rdi
       xor      edi, edi
       mov      dword ptr [rbp-0x3C], edi
       mov      dword ptr [rbp-0x48], 0x3E8
       jmp      SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x3C]
       inc      edi
       mov      dword ptr [rbp-0x3C], edi
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, dword ptr [rbp-0x3C]
       vmovsd   xmm1, qword ptr [reloc @RWD00]
       vdivsd   xmm0, xmm1, xmm0
 