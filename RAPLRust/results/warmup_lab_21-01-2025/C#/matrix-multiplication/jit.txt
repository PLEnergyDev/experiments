; Assembly listing for method System.Runtime.CompilerServices.CastHelpers:StelemRef(System.Array,long,System.Object) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x08]
       cmp      rsi, rax
       jae      SHORT G_M000_IG10
       lea      rax, bword ptr [rdi+8*rsi+0x10]
       mov      rsi, qword ptr [rdi]
       mov      rsi, qword ptr [rsi+0x30]
       test     rdx, rdx
       je       SHORT G_M000_IG06
 
G_M000_IG03:
       cmp      rsi, qword ptr [rdx]
       jne      SHORT G_M000_IG08
 
G_M000_IG04:
       mov      rdi, rax
       mov      rsi, rdx
 
G_M000_IG05:
       pop      rbp
       jmp      System.Runtime.CompilerServices.CastHelpers:WriteBarrier(byref,System.Object)
 
G_M000_IG06:
       xor      rdi, rdi
       mov      gword ptr [rax], rdi
 
G_M000_IG07:
       pop      rbp
       ret      
 
G_M000_IG08:
       mov      rcx, 0xD1FFAB1E
       cmp      qword ptr [rdi], rcx
       je       SHORT G_M000_IG04
       mov      rdi, rax
 
G_M000_IG09:
       pop      rbp
       tail.jmp [System.Runtime.CompilerServices.CastHelpers:StelemRef_Helper(byref,ulong,System.Object)]
 
G_M000_IG10:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 84

; Assembly listing for method System.Runtime.CompilerServices.CastHelpers:LdelemaRef(System.Array,long,ulong):byref (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x08]
       cmp      rsi, rax
       jae      SHORT G_M000_IG05
       lea      rax, bword ptr [rdi+8*rsi+0x10]
       mov      rcx, qword ptr [rdi]
       cmp      qword ptr [rcx+0x30], rdx
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       pop      rbp
       ret      
 
G_M000_IG04:
       call     [System.Runtime.CompilerServices.CastHelpers:ThrowArrayMismatchException():byref]
 
G_M000_IG05:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 40

; Assembly listing for method Program:Main(System.String[]) (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 120
       lea      rbp, [rsp+0xA0]
       xor      ecx, ecx
       mov      qword ptr [rbp-0x58], rcx
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       mov      gword ptr [rbp-0x30], rdi
 
G_M000_IG02:
       lea      rdi, [rbp-0x98]
       mov      rsi, r10
       call     CORINFO_HELP_INIT_PINVOKE_FRAME
       mov      qword ptr [rbp-0x58], rax
       mov      rdi, rsp
       mov      qword ptr [rbp-0x78], rdi
       mov      rdi, rbp
       mov      qword ptr [rbp-0x68], rdi
       mov      rdi, gword ptr [rbp-0x30]
       xor      eax, eax
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG18
       mov      ecx, eax
       lea      rdi, bword ptr [rdi+8*rcx+0x10]
       mov      rdi, gword ptr [rdi]
       call     [System.Int32:Parse(System.String):int]
       mov      dword ptr [rbp-0x34], eax
       mov      rdi, gword ptr [rbp-0x30]
       mov      eax, 1
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG18
       mov      ecx, eax
       lea      rdi, bword ptr [rdi+8*rcx+0x10]
       mov      rdi, gword ptr [rdi]
       call     [System.Int32:Parse(System.String):int]
       mov      dword ptr [rbp-0x38], eax
       mov      rdi, gword ptr [rbp-0x30]
       mov      eax, 2
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG18
       mov      ecx, eax
       lea      rdi, bword ptr [rdi+8*rcx+0x10]
       mov      rdi, gword ptr [rdi]
       call     [System.Int32:Parse(System.String):int]
       mov      dword ptr [rbp-0x3C], eax
       xor      edi, edi
       mov      dword ptr [rbp-0x40], edi
       mov      dword ptr [rbp-0x50], 0x3E8
       jmp      G_M000_IG14
 
G_M000_IG03:
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x88], rax
       lea      rax, G_M000_IG05
       mov      qword ptr [rbp-0x70], rax
       mov      rax, qword ptr [rbp-0x58]
       lea      rcx, bword ptr [rbp-0x98]
       mov      qword ptr [rax+0x10], rcx
       mov      rax, qword ptr [rbp-0x58]
       mov      byte  ptr [rax+0x0C], 0
 
G_M000_IG04:
       call     [Program:start_rapl():int]
 
G_M000_IG05:
       mov      rcx, qword ptr [rbp-0x58]
       mov      byte  ptr [rcx+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG06
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG06:
       mov      rdi, qword ptr [rbp-0x58]
       mov      rsi, bword ptr [rbp-0x90]
       mov      qword ptr [rdi+0x10], rsi
       xor      edi, edi
       mov      dword ptr [rbp-0x44], edi
       jmp      SHORT G_M000_IG08
 
G_M000_IG07:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x3C]
       call     [Program:run_benchmark(int,int)]
       mov      edi, dword ptr [rbp-0x44]
       inc      edi
       mov      dword ptr [rbp-0x44], edi
 
G_M000_IG08:
       mov      edi, dword ptr [rbp-0x50]
       dec      edi
       mov      dword ptr [rbp-0x50], edi
       cmp      dword ptr [rbp-0x50], 0
       jg       SHORT G_M000_IG10
 
G_M000_IG09:
       lea      rdi, [rbp-0x50]
       mov      esi, 55
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG10:
       cmp      dword ptr [rbp-0x44], 0x3E8
       jl       SHORT G_M000_IG07
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x88], rax
       lea      rax, G_M000_IG12
       mov      qword ptr [rbp-0x70], rax
       mov      rax, qword ptr [rbp-0x58]
       lea      rcx, bword ptr [rbp-0x98]
       mov      qword ptr [rax+0x10], rcx
       mov      rax, qword ptr [rbp-0x58]
       mov      byte  ptr [rax+0x0C], 0
 
G_M000_IG11:
       call     [Program:stop_rapl()]
 
G_M000_IG12:
       mov      rcx, qword ptr [rbp-0x58]
       mov      byte  ptr [rcx+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG13
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG13:
       mov      rdi, qword ptr [rbp-0x58]
       mov      rax, bword ptr [rbp-0x90]
       mov      qword ptr [rdi+0x10], rax
       mov      edi, dword ptr [rbp-0x40]
       inc      edi
       mov      dword ptr [rbp-0x40], edi
 
G_M000_IG14:
       mov      edi, dword ptr [rbp-0x50]
       dec      edi
       mov      dword ptr [rbp-0x50], edi
       cmp      dword ptr [rbp-0x50], 0
       jg       SHORT G_M000_IG16
 
G_M000_IG15:
       lea      rdi, [rbp-0x50]
       mov      esi, 73
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG16:
       mov      eax, dword ptr [rbp-0x40]
       cmp      eax, dword ptr [rbp-0x34]
       jl       G_M000_IG03
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG17
 
G_M000_IG17:
       add      rsp, 120
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG18:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 575

; Assembly listing for method Program:run_benchmark(int,int) (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 160
       vzeroupper 
       lea      rbp, [rsp+0xA0]
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x70], xmm8
       vmovdqa  xmmword ptr [rbp-0x60], xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       mov      dword ptr [rbp-0x2C], edi
       mov      dword ptr [rbp-0x30], esi
 
G_M000_IG02:
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x88], rdx
       mov      rdx, qword ptr [rbp-0x88]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x38], rax
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x90], rdx
       mov      rdx, qword ptr [rbp-0x90]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x40], rax
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x98], rdx
       mov      rdx, qword ptr [rbp-0x98]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x48], rax
       xor      edi, edi
       mov      dword ptr [rbp-0x4C], edi
       mov      dword ptr [rbp-0x80], 0x3E8
       jmp      G_M000_IG08
 
G_M000_IG03:
       xor      edi, edi
       mov      dword ptr [rbp-0x50], edi
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x4C]
       add      edi, dword ptr [rbp-0x50]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       mov      rdi, gword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x4C]
       mov      edx, dword ptr [rbp-0x50]
       call     double[,]:Set(int,int,double):this
       mov      edi, dword ptr [rbp-0x4C]
       add      edi, dword ptr [rbp-0x50]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       mov      rdi, gword ptr [rbp-0x40]
       mov      esi, dword ptr [rbp-0x4C]
       mov      edx, dword ptr [rbp-0x50]
       call     double[,]:Set(int,int,double):this
       mov      edi, dword ptr [rbp-0x50]
       inc      edi
       mov      dword ptr [rbp-0x50], edi
 
G_M000_IG05:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG07
 
G_M000_IG06:
       lea      rdi, [rbp-0x80]
       mov      esi, 67
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG07:
       mov      edi, dword ptr [rbp-0x50]
       cmp      edi, dword ptr [rbp-0x30]
       jl       SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x4C]
       inc      edi
       mov      dword ptr [rbp-0x4C], edi
 
G_M000_IG08:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG10
 
G_M000_IG09:
       lea      rdi, [rbp-0x80]
       mov      esi, 76
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG10:
       mov      edi, dword ptr [rbp-0x4C]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       G_M000_IG03
       xor      edi, edi
       mov      dword ptr [rbp-0x54], edi
       jmp      G_M000_IG20
 
G_M000_IG11:
       xor      edi, edi
       mov      dword ptr [rbp-0x58], edi
       jmp      G_M000_IG17
 
G_M000_IG12:
       xor      edi, edi
       mov      qword ptr [rbp-0x60], rdi
       xor      edi, edi
       mov      dword ptr [rbp-0x64], edi
       jmp      SHORT G_M000_IG14
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x54]
       mov      edx, dword ptr [rbp-0x64]
       call     double[,]:Get(int,int):double:this
       vmovsd   qword ptr [rbp-0x78], xmm0
       mov      rdi, gword ptr [rbp-0x40]
       mov      esi, dword ptr [rbp-0x64]
       mov      edx, dword ptr [rbp-0x58]
       call     double[,]:Get(int,int):double:this
       vmulsd   xmm0, xmm0, qword ptr [rbp-0x78]
       vaddsd   xmm0, xmm0, qword ptr [rbp-0x60]
       vmovsd   qword ptr [rbp-0x60], xmm0
       mov      edi, dword ptr [rbp-0x64]
       inc      edi
       mov      dword ptr [rbp-0x64], edi
 
G_M000_IG14:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG16
 
G_M000_IG15:
       lea      rdi, [rbp-0x80]
       mov      esi, 138
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG16:
       mov      edi, dword ptr [rbp-0x64]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       SHORT G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x48]
       mov      esi, dword ptr [rbp-0x54]
       mov      edx, dword ptr [rbp-0x58]
       vmovsd   xmm0, qword ptr [rbp-0x60]
       call     double[,]:Set(int,int,double):this
       mov      eax, dword ptr [rbp-0x58]
       inc      eax
       mov      dword ptr [rbp-0x58], eax
 
G_M000_IG17:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG19
 
G_M000_IG18:
       lea      rdi, [rbp-0x80]
       mov      esi, 161
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG19:
       mov      edi, dword ptr [rbp-0x58]
       cmp      edi, dword ptr [rbp-0x30]
       jl       G_M000_IG12
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x54]
       inc      edi
       mov      dword ptr [rbp-0x54], edi
 
G_M000_IG20:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG22
 
G_M000_IG21:
       lea      rdi, [rbp-0x80]
       mov      esi, 172
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG22:
       mov      edi, dword ptr [rbp-0x54]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       G_M000_IG11
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edx, dword ptr [rbp-0x30]
       dec      edx
       mov      esi, dword ptr [rbp-0x2C]
       dec      esi
       mov      rdi, gword ptr [rbp-0x48]
       call     double[,]:Get(int,int):double:this
       vmovsd   qword ptr [rbp-0xA0], xmm0
       vmovsd   xmm0, qword ptr [rbp-0xA0]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG23:
       add      rsp, 160
       pop      rbp
       ret      
 
; Total bytes of code 770

; Assembly listing for method double[,]:IL_STUB_Array_Set(int,int,double):this (FullOpts)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; FullOpts code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x10]
       sub      esi, dword ptr [rdi+0x18]
       cmp      esi, eax
       jae      SHORT G_M000_IG04
       mov      eax, esi
       mov      esi, dword ptr [rdi+0x14]
       sub      edx, dword ptr [rdi+0x1C]
       cmp      edx, esi
       jae      SHORT G_M000_IG04
       imul     eax, esi
       add      eax, edx
       vmovsd   qword ptr [rdi+8*rax+0x20], xmm0
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWSFAST
       mov      rbx, rax
       mov      rdi, rbx
       call     [System.IndexOutOfRangeException:.ctor():this]
       mov      rdi, rbx
       call     CORINFO_HELP_THROW
       int3     
 
; Total bytes of code 87

; Assembly listing for method double[,]:IL_STUB_Array_Get(int,int):double:this (FullOpts)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; FullOpts code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x10]
       sub      esi, dword ptr [rdi+0x18]
       cmp      esi, eax
       jae      SHORT G_M000_IG04
       mov      eax, esi
       mov      esi, dword ptr [rdi+0x14]
       sub      edx, dword ptr [rdi+0x1C]
       cmp      edx, esi
       jae      SHORT G_M000_IG04
       imul     eax, esi
       add      eax, edx
       vmovsd   xmm0, qword ptr [rdi+8*rax+0x20]
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWSFAST
       mov      rbx, rax
       mov      rdi, rbx
       call     [System.IndexOutOfRangeException:.ctor():this]
       mov      rdi, rbx
       call     CORINFO_HELP_THROW
       int3     
 
; Total bytes of code 87

; Assembly listing for method Program:run_benchmark(int,int) (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x8a
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 93.22

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       sub      rsp, 32
       mov      qword ptr [rsp+0xC8], r15
       mov      qword ptr [rsp+0xC0], r14
       mov      qword ptr [rsp+0xB8], r13
       mov      qword ptr [rsp+0xB0], rbx
       vzeroupper 
       lea      rbp, [rsp+0x20]
       mov      edi, dword ptr [rbp+0x84]
       mov      esi, dword ptr [rbp+0x80]
       mov      rdx, gword ptr [rbp+0x78]
       mov      rcx, gword ptr [rbp+0x70]
       mov      r9, gword ptr [rbp+0x68]
       mov      r10d, dword ptr [rbp+0x5C]
       mov      r8d, dword ptr [rbp+0x58]
       vmovsd   xmm0, qword ptr [rbp+0x50]
       mov      eax, dword ptr [rbp+0x4C]
 
G_M000_IG02:
       jmp      SHORT G_M000_IG05
       align    [0 bytes for IG07]
 
G_M000_IG03:
       xor      r8d, r8d
       test     esi, esi
       jle      G_M000_IG09
 
G_M000_IG04:
       vxorps   xmm0, xmm0, xmm0
       xor      eax, eax
 
G_M000_IG05:
       cmp      eax, edi
       jge      SHORT G_M000_IG08
 
G_M000_IG06:
       mov      r11d, r10d
       sub      r11d, dword ptr [rdx+0x18]
       mov      ebx, dword ptr [rdx+0x10]
 
G_M000_IG07:
       mov      r15d, r11d
       cmp      r15d, ebx
       jae      G_M000_IG10
       mov      r14d, dword ptr [rdx+0x14]
       imul     r15d, r14d
       mov      r13d, eax
       sub      r13d, dword ptr [rdx+0x1C]
       cmp      r13d, r14d
       jae      G_M000_IG10
       add      r13d, r15d
       mov      r15d, r13d
       vmovsd   xmm1, qword ptr [rdx+8*r15+0x20]
       mov      r15d, eax
       sub      r15d, dword ptr [rcx+0x18]
       cmp      r15d, dword ptr [rcx+0x10]
       jae      SHORT G_M000_IG10
       mov      r14d, dword ptr [rcx+0x14]
       imul     r15d, r14d
       mov      r13d, r8d
       sub      r13d, dword ptr [rcx+0x1C]
       cmp      r13d, r14d
       jae      SHORT G_M000_IG10
       add      r15d, r13d
       vmulsd   xmm1, xmm1, qword ptr [rcx+8*r15+0x20]
       vaddsd   xmm0, xmm1, xmm0
       inc      eax
       cmp      eax, edi
       jl       SHORT G_M000_IG07
 
G_M000_IG08:
       mov      r15d, r10d
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG10
       mov      r11d, dword ptr [r9+0x14]
       mov      eax, r15d
       imul     eax, r11d
       mov      r13d, r8d
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r11d
       jae      SHORT G_M000_IG10
       add      eax, r13d
       vmovsd   qword ptr [r9+8*rax+0x20], xmm0
       inc      r8d
       cmp      r8d, esi
       jl       G_M000_IG04
 
G_M000_IG09:
       inc      r10d
       cmp      r10d, edi
       jge      SHORT G_M000_IG11
       jmp      G_M000_IG03
 
G_M000_IG10:
       call     CORINFO_HELP_RNGCHKFAIL
 
G_M000_IG11:
       dec      edi
       mov      r15d, edi
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG10
       mov      eax, r15d
       imul     eax, r11d
       dec      esi
       mov      r13d, esi
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r11d
       jae      SHORT G_M000_IG10
       add      eax, r13d
       vmovsd   xmm0, qword ptr [r9+8*rax+0x20]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG12:
       add      rsp, 176
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 369

; Assembly listing for method System.SpanHelpers:SequenceCompareTo(byref,int,byref,int):int (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 112
       vzeroupper 
       lea      rbp, [rsp+0x70]
       mov      bword ptr [rbp-0x30], rdi
       mov      dword ptr [rbp-0x34], esi
       mov      bword ptr [rbp-0x40], rdx
       mov      dword ptr [rbp-0x44], ecx
 
G_M000_IG02:
       mov      edi, dword ptr [rbp-0x34]
       sub      edi, dword ptr [rbp-0x44]
       mov      dword ptr [rbp-0x48], edi
       mov      dword ptr [rbp-0x70], 0x3E8
       mov      rdi, bword ptr [rbp-0x30]
       cmp      rdi, bword ptr [rbp-0x40]
       je       G_M000_IG26
       mov      edi, dword ptr [rbp-0x34]
       cmp      edi, dword ptr [rbp-0x44]
       jb       SHORT G_M000_IG03
       mov      edi, dword ptr [rbp-0x44]
       mov      dword ptr [rbp-0x68], edi
       jmp      SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x34]
       mov      dword ptr [rbp-0x68], eax
 
G_M000_IG04:
       mov      eax, dword ptr [rbp-0x68]
       mov      eax, eax
       mov      qword ptr [rbp-0x50], rax
       xor      eax, eax
       mov      qword ptr [rbp-0x58], rax
       mov      eax, 8
       mov      edi, 2
       xor      edx, edx
       div      edx:eax, edi
       movsxd   rdi, eax
       cmp      rdi, qword ptr [rbp-0x50]
       ja       G_M000_IG16
       cmp      qword ptr [rbp-0x50], 16
       jb       G_M000_IG10
       mov      rdi, qword ptr [rbp-0x50]
       add      rdi, -16
       mov      qword ptr [rbp-0x60], rdi
 
G_M000_IG05:
       mov      edi, dword ptr [rbp-0x70]
       dec      edi
       mov      dword ptr [rbp-0x70], edi
       cmp      dword ptr [rbp-0x70], 0
       jg       SHORT G_M000_IG07
 
G_M000_IG06:
       lea      rdi, [rbp-0x70]
       mov      esi, 68
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG07:
       mov      rdi, bword ptr [rbp-0x30]
       mov      rax, qword ptr [rbp-0x58]
       vmovups  ymm0, ymmword ptr [rdi+2*rax]
       mov      rdi, bword ptr [rbp-0x40]
       mov      rax, qword ptr [rbp-0x58]
       vpcmpeqw ymm0, ymm0, ymmword ptr [rdi+2*rax]
       vpmovmskb edi, ymm0
       cmp      edi, -1
       jne      SHORT G_M000_IG09
       mov      rdi, qword ptr [rbp-0x58]
       add      rdi, 16
       mov      qword ptr [rbp-0x58], rdi
       mov      rdi, qword ptr [rbp-0x60]
       cmp      rdi, qword ptr [rbp-0x58]
       jae      SHORT G_M000_IG08
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG12
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG05
 
G_M000_IG09:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG12
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG12
 
G_M000_IG11:
       mov      rdi, bword ptr [rbp-0x30]
       mov      rax, qword ptr [rbp-0x58]
       mov      rdi, qword ptr [rdi+2*rax]
       mov      rax, bword ptr [rbp-0x40]
       mov      rcx, qword ptr [rbp-0x58]
       cmp      rdi, qword ptr [rax+2*rcx]
       jne      G_M000_IG18
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, 8
       mov      edi, 2
       xor      edx, edx
       div      edx:eax, edi
       movsxd   rdi, eax
       add      rdi, qword ptr [rbp-0x58]
       mov      qword ptr [rbp-0x58], rdi
 
G_M000_IG12:
       mov      edi, dword ptr [rbp-0x70]
       dec      edi
       mov      dword ptr [rbp-0x70], edi
       cmp      dword ptr [rbp-0x70], 0
       jg       SHORT G_M000_IG14
 
G_M000_IG13:
       lea      rdi, [rbp-0x70]
       mov      esi, 171
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG14:
       mov      eax, 8
       mov      edi, 2
       xor      edx, edx
       div      edx:eax, edi
       movsxd   rdi, eax
       add      rdi, qword ptr [rbp-0x58]
       cmp      qword ptr [rbp-0x50], rdi
       jae      SHORT G_M000_IG11
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG16:
       mov      rdi, qword ptr [rbp-0x58]
       add      rdi, 2
       cmp      qword ptr [rbp-0x50], rdi
       jb       G_M000_IG22
       mov      rdi, bword ptr [rbp-0x30]
       mov      rax, qword ptr [rbp-0x58]
       mov      edi, dword ptr [rdi+2*rax]
       mov      rax, bword ptr [rbp-0x40]
       mov      rcx, qword ptr [rbp-0x58]
       cmp      edi, dword ptr [rax+2*rcx]
       jne      SHORT G_M000_IG17
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [rbp-0x58]
       add      rdi, 2
       mov      qword ptr [rbp-0x58], rdi
       jmp      G_M000_IG22
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG22
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG16
 
G_M000_IG19:
       mov      rsi, bword ptr [rbp-0x40]
       mov      rdi, qword ptr [rbp-0x58]
       movzx    rsi, word  ptr [rsi+2*rdi]
       mov      rdi, bword ptr [rbp-0x30]
       mov      rax, qword ptr [rbp-0x58]
       lea      rdi, bword ptr [rdi+2*rax]
       call     [System.Char:CompareTo(ushort):int:this]
       mov      dword ptr [rbp-0x64], eax
       cmp      dword ptr [rbp-0x64], 0
       je       SHORT G_M000_IG21
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x64]
 
G_M000_IG20:
       vzeroupper 
       add      rsp, 112
       pop      rbp
       ret      
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [rbp-0x58]
       inc      rdi
       mov      qword ptr [rbp-0x58], rdi
 
G_M000_IG22:
       mov      edi, dword ptr [rbp-0x70]
       dec      edi
       mov      dword ptr [rbp-0x70], edi
       cmp      dword ptr [rbp-0x70], 0
       jg       SHORT G_M000_IG24
 
G_M000_IG23:
       lea      rdi, [rbp-0x70]
       mov      esi, 268
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG24:
       mov      rsi, qword ptr [rbp-0x58]
       cmp      rsi, qword ptr [rbp-0x50]
       jb       G_M000_IG19
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG26:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x48]
 
G_M000_IG27:
       vzeroupper 
       add      rsp, 112
       pop      rbp
       ret      
 
; Total bytes of code 736

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(System.Collections.Generic.IEqualityComparer`1[System.ReadOnlyMemory`1[ushort]]):this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
       mov      gword ptr [rbp-0x08], rdi
       mov      gword ptr [rbp-0x10], rsi
 
G_M000_IG02:
       mov      rdi, gword ptr [rbp-0x08]
       mov      rdx, gword ptr [rbp-0x10]
       xor      esi, esi
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(int,System.Collections.Generic.IEqualityComparer`1[System.ReadOnlyMemory`1[ushort]]):this]
       nop      
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 41

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(int,System.Collections.Generic.IEqualityComparer`1[System.ReadOnlyMemory`1[ushort]]):this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 32
       lea      rbp, [rsp+0x20]
       xor      eax, eax
       mov      qword ptr [rbp-0x20], rax
       mov      gword ptr [rbp-0x08], rdi
       mov      dword ptr [rbp-0x0C], esi
       mov      gword ptr [rbp-0x18], rdx
 
G_M000_IG02:
       mov      rdi, gword ptr [rbp-0x08]
       call     [System.Object:.ctor():this]
       cmp      dword ptr [rbp-0x0C], 0
       jge      SHORT G_M000_IG03
       mov      edi, 22
       call     [System.ThrowHelper:ThrowArgumentOutOfRangeException(int)]
 
G_M000_IG03:
       cmp      dword ptr [rbp-0x0C], 0
       jle      SHORT G_M000_IG04
       mov      rdi, gword ptr [rbp-0x08]
       mov      esi, dword ptr [rbp-0x0C]
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Initialize(int):int:this]
 
G_M000_IG04:
       jmp      SHORT G_M000_IG05
 
G_M000_IG05:
       cmp      gword ptr [rbp-0x18], 0
       je       SHORT G_M000_IG06
       call     [System.Collections.Generic.EqualityComparer`1[System.ReadOnlyMemory`1[ushort]]:get_Default():System.Collections.Generic.EqualityComparer`1[System.ReadOnlyMemory`1[ushort]]]
       cmp      rax, gword ptr [rbp-0x18]
       je       SHORT G_M000_IG06
       mov      rdi, gword ptr [rbp-0x08]
       lea      rdi, bword ptr [rdi+0x18]
       mov      rsi, gword ptr [rbp-0x18]
       call     CORINFO_HELP_ASSIGN_REF
 
G_M000_IG06:
       nop      
 
G_M000_IG07:
       add      rsp, 32
       pop      rbp
       ret      
 
; Total bytes of code 118

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:set_Item(System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo):this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 48
       lea      rbp, [rsp+0x30]
       mov      gword ptr [rbp-0x08], rdi
       mov      gword ptr [rbp-0x18], rsi
       mov      qword ptr [rbp-0x10], rdx
       mov      qword ptr [rbp-0x28], rcx
       mov      dword ptr [rbp-0x20], r8d
 
G_M000_IG02:
       mov      rcx, qword ptr [rbp-0x28]
       mov      r8d, dword ptr [rbp-0x20]
       mov      rsi, gword ptr [rbp-0x18]
       mov      rdx, qword ptr [rbp-0x10]
       mov      rdi, gword ptr [rbp-0x08]
       mov      r9d, 1
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:TryInsert(System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo,ubyte):bool:this]
       mov      dword ptr [rbp-0x2C], eax
 
G_M000_IG03:
       add      rsp, 48
       pop      rbp
       ret      
 
; Total bytes of code 71

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:TryInsert(System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo,ubyte):bool:this (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 240
       vzeroupper 
       lea      rbp, [rsp+0xF0]
       xor      eax, eax
       mov      qword ptr [rbp-0xE8], rax
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0xE0], xmm8
       vmovdqa  xmmword ptr [rbp-0xD0], xmm8
       mov      rax, -96
       vmovdqa  xmmword ptr [rbp+rax-0x60], xmm8
       vmovdqa  xmmword ptr [rbp+rax-0x50], xmm8
       vmovdqa  xmmword ptr [rbp+rax-0x40], xmm8
       add      rax, 48
       jne      SHORT  -5 instr
       mov      qword ptr [rbp-0x60], rax
       mov      gword ptr [rbp-0x30], rdi
       mov      gword ptr [rbp-0x40], rsi
       mov      qword ptr [rbp-0x38], rdx
       mov      qword ptr [rbp-0x50], rcx
       mov      dword ptr [rbp-0x48], r8d
       mov      dword ptr [rbp-0x54], r9d
 
G_M000_IG02:
       mov      dword ptr [rbp-0xB0], 0x3E8
 
G_M000_IG03:
       mov      rdi, gword ptr [rbp-0x30]
       cmp      gword ptr [rdi+0x08], 0
       jne      SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x30]
       xor      esi, esi
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Initialize(int):int:this]
 
G_M000_IG04:
       mov      rdi, gword ptr [rbp-0x30]
       mov      rdi, gword ptr [rdi+0x10]
       mov      gword ptr [rbp-0x60], rdi
       mov      rdi, gword ptr [rbp-0x30]
       mov      rdi, gword ptr [rdi+0x18]
       mov      gword ptr [rbp-0x68], rdi
       cmp      gword ptr [rbp-0x68], 0
       je       SHORT G_M000_IG05
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x68]
       mov      gword ptr [rbp-0x98], rdi
       mov      rdi, gword ptr [rbp-0x98]
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0x98]
       mov      gword ptr [rbp-0xB8], rdi
       mov      rdi, gword ptr [rbp-0xB8]
       mov      rsi, gword ptr [rbp-0x40]
       mov      rdx, qword ptr [rbp-0x38]
       mov      r11, 0xD1FFAB1E
       call     [r11]System.Collections.Generic.IEqualityComparer`1[System.ReadOnlyMemory`1[ushort]]:GetHashCode(System.ReadOnlyMemory`1[ushort]):int:this
       mov      dword ptr [rbp-0x90], eax
       jmp      SHORT G_M000_IG06
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rdi, [rbp-0x40]
       call     [System.ReadOnlyMemory`1[ushort]:GetHashCode():int:this]
       mov      dword ptr [rbp-0x90], eax
 
G_M000_IG06:
       mov      edi, dword ptr [rbp-0x90]
       mov      dword ptr [rbp-0x6C], edi
       xor      edi, edi
       mov      dword ptr [rbp-0x70], edi
       mov      rdi, gword ptr [rbp-0x30]
       mov      esi, dword ptr [rbp-0x6C]
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:GetBucket(uint):byref:this]
       mov      bword ptr [rbp-0x78], rax
       mov      rdi, bword ptr [rbp-0x78]
       mov      edi, dword ptr [rdi]
       dec      edi
       mov      dword ptr [rbp-0x7C], edi
       cmp      gword ptr [rbp-0x68], 0
       jne      G_M000_IG14
 
G_M000_IG07:
       mov      edi, dword ptr [rbp-0xB0]
       dec      edi
       mov      dword ptr [rbp-0xB0], edi
       cmp      dword ptr [rbp-0xB0], 0
       jg       SHORT G_M000_IG09
 
G_M000_IG08:
       lea      rdi, [rbp-0xB0]
       mov      esi, 125
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG09:
       mov      eax, dword ptr [rbp-0x7C]
       mov      rcx, gword ptr [rbp-0x60]
       cmp      eax, dword ptr [rcx+0x08]
       jae      G_M000_IG13
       mov      rax, gword ptr [rbp-0x60]
       mov      ecx, dword ptr [rbp-0x7C]
       cmp      ecx, dword ptr [rax+0x08]
       jae      G_M000_IG38
       mov      edx, ecx
       imul     rdx, rdx, 40
       lea      rax, bword ptr [rax+rdx+0x10]
       mov      eax, dword ptr [rax]
       cmp      eax, dword ptr [rbp-0x6C]
       jne      G_M000_IG17
       call     [System.Collections.Generic.EqualityComparer`1[System.ReadOnlyMemory`1[ushort]]:get_Default():System.Collections.Generic.EqualityComparer`1[System.ReadOnlyMemory`1[ushort]]]
       mov      gword ptr [rbp-0xA0], rax
       mov      rdi, gword ptr [rbp-0xA0]
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0xA0]
       mov      gword ptr [rbp-0xC0], rdi
       mov      rdi, gword ptr [rbp-0x60]
       mov      esi, dword ptr [rbp-0x7C]
       cmp      esi, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      edx, esi
       imul     rdx, rdx, 40
       lea      rdi, bword ptr [rdi+rdx+0x10]
 
G_M000_IG10:
       vmovdqu  xmm0, xmmword ptr [rdi+0x08]
       vmovdqu  xmmword ptr [rbp-0xD0], xmm0
 
G_M000_IG11:
       mov      rdi, gword ptr [rbp-0xC0]
       mov      rsi, gword ptr [rbp-0xD0]
       mov      rdx, qword ptr [rbp-0xC8]
       mov      rcx, gword ptr [rbp-0x40]
       mov      r8, qword ptr [rbp-0x38]
       mov      rax, gword ptr [rbp-0xC0]
       mov      rax, qword ptr [rax]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x20]System.Collections.Generic.EqualityComparer`1[System.ReadOnlyMemory`1[ushort]]:Equals(System.ReadOnlyMemory`1[ushort],System.ReadOnlyMemory`1[ushort]):bool:this
       test     eax, eax
       je       SHORT G_M000_IG12
       mov      edi, dword ptr [rbp-0x54]
       movzx    rdi, dil
       cmp      edi, 1
       jne      SHORT G_M000_IG15
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x60]
       mov      eax, dword ptr [rbp-0x7C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      rax, qword ptr [rbp-0x50]
       mov      qword ptr [rdi+0x18], rax
       mov      eax, dword ptr [rbp-0x48]
       mov      dword ptr [rdi+0x20], eax
       jmp      G_M000_IG36
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG17
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG31
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG19
 
G_M000_IG15:
       mov      edi, dword ptr [rbp-0x54]
       movzx    rdi, dil
       cmp      edi, 2
       jne      SHORT G_M000_IG16
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x40]
       mov      rsi, qword ptr [rbp-0x38]
       call     [System.ThrowHelper:ThrowAddingDuplicateWithKeyArgumentException[System.ReadOnlyMemory`1[ushort]](System.ReadOnlyMemory`1[ushort])]
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG27
 
G_M000_IG17:
       mov      rdi, gword ptr [rbp-0x60]
       mov      eax, dword ptr [rbp-0x7C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      edi, dword ptr [rdi+0x04]
       mov      dword ptr [rbp-0x7C], edi
       mov      edi, dword ptr [rbp-0x70]
       inc      edi
       mov      dword ptr [rbp-0x70], edi
       mov      edi, dword ptr [rbp-0x70]
       mov      rax, gword ptr [rbp-0x60]
       cmp      edi, dword ptr [rax+0x08]
       jbe      SHORT G_M000_IG18
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ThrowHelper:ThrowInvalidOperationException_ConcurrentOperationsNotSupported()]
       jmp      G_M000_IG07
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG07
 
G_M000_IG19:
       mov      edi, dword ptr [rbp-0xB0]
       dec      edi
       mov      dword ptr [rbp-0xB0], edi
       cmp      dword ptr [rbp-0xB0], 0
       jg       SHORT G_M000_IG21
 
G_M000_IG20:
       lea      rdi, [rbp-0xB0]
       mov      esi, 241
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG21:
       mov      edi, dword ptr [rbp-0x7C]
       mov      rsi, gword ptr [rbp-0x60]
       cmp      edi, dword ptr [rsi+0x08]
       jae      G_M000_IG31
       mov      rdi, gword ptr [rbp-0x60]
       mov      esi, dword ptr [rbp-0x7C]
       cmp      esi, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      eax, esi
       imul     rax, rax, 40
       lea      rdi, bword ptr [rdi+rax+0x10]
       mov      edi, dword ptr [rdi]
       cmp      edi, dword ptr [rbp-0x6C]
       jne      G_M000_IG29
       mov      rdi, gword ptr [rbp-0x68]
       mov      gword ptr [rbp-0xA8], rdi
       mov      rdi, gword ptr [rbp-0xA8]
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0xA8]
       mov      gword ptr [rbp-0xD8], rdi
       mov      rdi, gword ptr [rbp-0x60]
       mov      esi, dword ptr [rbp-0x7C]
       cmp      esi, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      edx, esi
       imul     rdx, rdx, 40
       lea      rdi, bword ptr [rdi+rdx+0x10]
 
G_M000_IG22:
       vmovdqu  xmm0, xmmword ptr [rdi+0x08]
       vmovdqu  xmmword ptr [rbp-0xE8], xmm0
 
G_M000_IG23:
       mov      rdi, gword ptr [rbp-0xD8]
       mov      rsi, gword ptr [rbp-0xE8]
       mov      rdx, qword ptr [rbp-0xE0]
       mov      rcx, gword ptr [rbp-0x40]
       mov      r8, qword ptr [rbp-0x38]
       mov      r11, 0xD1FFAB1E
       call     [r11]System.Collections.Generic.IEqualityComparer`1[System.ReadOnlyMemory`1[ushort]]:Equals(System.ReadOnlyMemory`1[ushort],System.ReadOnlyMemory`1[ushort]):bool:this
       test     eax, eax
       je       SHORT G_M000_IG24
       mov      edi, dword ptr [rbp-0x54]
       movzx    rdi, dil
       cmp      edi, 1
       jne      SHORT G_M000_IG25
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x60]
       mov      eax, dword ptr [rbp-0x7C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      rax, qword ptr [rbp-0x50]
       mov      qword ptr [rdi+0x18], rax
       mov      eax, dword ptr [rbp-0x48]
       mov      dword ptr [rdi+0x20], eax
       jmp      G_M000_IG36
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG29
 
G_M000_IG25:
       mov      edi, dword ptr [rbp-0x54]
       movzx    rdi, dil
       cmp      edi, 2
       jne      SHORT G_M000_IG26
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x40]
       mov      rsi, qword ptr [rbp-0x38]
       call     [System.ThrowHelper:ThrowAddingDuplicateWithKeyArgumentException[System.ReadOnlyMemory`1[ushort]](System.ReadOnlyMemory`1[ushort])]
 
G_M000_IG26:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG27
 
G_M000_IG27:
       xor      eax, eax
 
G_M000_IG28:
       add      rsp, 240
       pop      rbp
       ret      
 
G_M000_IG29:
       mov      rdi, gword ptr [rbp-0x60]
       mov      eax, dword ptr [rbp-0x7C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      edi, dword ptr [rdi+0x04]
       mov      dword ptr [rbp-0x7C], edi
       mov      edi, dword ptr [rbp-0x70]
       inc      edi
       mov      dword ptr [rbp-0x70], edi
       mov      edi, dword ptr [rbp-0x70]
       mov      rax, gword ptr [rbp-0x60]
       cmp      edi, dword ptr [rax+0x08]
       jbe      SHORT G_M000_IG30
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ThrowHelper:ThrowInvalidOperationException_ConcurrentOperationsNotSupported()]
       jmp      G_M000_IG19
 
G_M000_IG30:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG19
 
G_M000_IG31:
       mov      rdi, gword ptr [rbp-0x30]
       cmp      dword ptr [rdi+0x40], 0
       jle      SHORT G_M000_IG32
       mov      rdi, gword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x3C]
       mov      dword ptr [rbp-0x80], edi
       mov      rdi, gword ptr [rbp-0x60]
       mov      rax, gword ptr [rbp-0x30]
       mov      eax, dword ptr [rax+0x3C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      edi, dword ptr [rdi+0x04]
       neg      edi
       add      edi, -3
       mov      rax, gword ptr [rbp-0x30]
       mov      dword ptr [rax+0x3C], edi
       mov      rdi, gword ptr [rbp-0x30]
       dec      dword ptr [rdi+0x40]
       jmp      SHORT G_M000_IG34
 
G_M000_IG32:
       mov      rdi, gword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x38]
       mov      dword ptr [rbp-0x8C], edi
       mov      edi, dword ptr [rbp-0x8C]
       mov      rax, gword ptr [rbp-0x60]
       cmp      edi, dword ptr [rax+0x08]
       jne      SHORT G_M000_IG33
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x30]
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Resize():this]
       mov      rdi, gword ptr [rbp-0x30]
       mov      esi, dword ptr [rbp-0x6C]
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:GetBucket(uint):byref:this]
       mov      bword ptr [rbp-0x78], rax
 
G_M000_IG33:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x8C]
       mov      dword ptr [rbp-0x80], edi
       mov      edi, dword ptr [rbp-0x8C]
       inc      edi
       mov      rsi, gword ptr [rbp-0x30]
       mov      dword ptr [rsi+0x38], edi
       mov      rdi, gword ptr [rbp-0x30]
       mov      rdi, gword ptr [rdi+0x10]
       mov      gword ptr [rbp-0x60], rdi
 
G_M000_IG34:
       mov      rdi, gword ptr [rbp-0x60]
       mov      esi, dword ptr [rbp-0x80]
       cmp      esi, dword ptr [rdi+0x08]
       jae      G_M000_IG38
       mov      eax, esi
       imul     rax, rax, 40
       lea      rdi, bword ptr [rdi+rax+0x10]
       mov      bword ptr [rbp-0x88], rdi
       mov      rdi, bword ptr [rbp-0x88]
       mov      esi, dword ptr [rbp-0x6C]
       mov      dword ptr [rdi], esi
       mov      rdi, bword ptr [rbp-0x78]
       mov      edi, dword ptr [rdi]
       dec      edi
       mov      rsi, bword ptr [rbp-0x88]
       mov      dword ptr [rsi+0x04], edi
       mov      rdi, bword ptr [rbp-0x88]
       add      rdi, 8
       lea      rsi, bword ptr [rbp-0x40]
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       mov      rdi, bword ptr [rbp-0x88]
       mov      rax, qword ptr [rbp-0x50]
       mov      qword ptr [rdi+0x18], rax
       mov      eax, dword ptr [rbp-0x48]
       mov      dword ptr [rdi+0x20], eax
       mov      edi, dword ptr [rbp-0x80]
       inc      edi
       mov      rax, bword ptr [rbp-0x78]
       mov      dword ptr [rax], edi
       mov      rdi, gword ptr [rbp-0x30]
       inc      dword ptr [rdi+0x44]
 
G_M000_IG35:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG36
 
G_M000_IG36:
       mov      eax, 1
 
G_M000_IG37:
       add      rsp, 240
       pop      rbp
       ret      
 
G_M000_IG38:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 1738

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Initialize(int):int:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 32
       lea      rbp, [rsp+0x20]
       xor      eax, eax
       mov      qword ptr [rbp-0x18], rax
       mov      qword ptr [rbp-0x20], rax
       mov      gword ptr [rbp-0x08], rdi
       mov      dword ptr [rbp-0x0C], esi
 
G_M000_IG02:
       mov      edi, dword ptr [rbp-0x0C]
       call     [System.Collections.HashHelpers:GetPrime(int):int]
       mov      dword ptr [rbp-0x10], eax
       mov      esi, dword ptr [rbp-0x10]
       movsxd   rsi, esi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      gword ptr [rbp-0x18], rax
       mov      esi, dword ptr [rbp-0x10]
       movsxd   rsi, esi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      gword ptr [rbp-0x20], rax
       mov      rdi, gword ptr [rbp-0x08]
       mov      dword ptr [rdi+0x3C], -1
       mov      edi, dword ptr [rbp-0x10]
       call     [System.Collections.HashHelpers:GetFastModMultiplier(uint):ulong]
       mov      rdi, gword ptr [rbp-0x08]
       mov      qword ptr [rdi+0x30], rax
       mov      rdi, gword ptr [rbp-0x08]
       lea      rdi, bword ptr [rdi+0x08]
       mov      rsi, gword ptr [rbp-0x18]
       call     CORINFO_HELP_ASSIGN_REF
       mov      rdi, gword ptr [rbp-0x08]
       lea      rdi, bword ptr [rdi+0x10]
       mov      rsi, gword ptr [rbp-0x20]
       call     CORINFO_HELP_ASSIGN_REF
       mov      eax, dword ptr [rbp-0x10]
 
G_M000_IG03:
       add      rsp, 32
       pop      rbp
       ret      
 
; Total bytes of code 160

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:GetBucket(uint):byref:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 32
       lea      rbp, [rsp+0x20]
       xor      eax, eax
       mov      qword ptr [rbp-0x18], rax
       mov      gword ptr [rbp-0x08], rdi
       mov      dword ptr [rbp-0x0C], esi
 
G_M000_IG02:
       mov      rdx, gword ptr [rbp-0x08]
       mov      rdx, gword ptr [rdx+0x08]
       mov      gword ptr [rbp-0x18], rdx
       mov      rdx, gword ptr [rbp-0x08]
       mov      rdx, qword ptr [rdx+0x30]
       mov      rsi, gword ptr [rbp-0x18]
       mov      esi, dword ptr [rsi+0x08]
       mov      edi, dword ptr [rbp-0x0C]
       call     [System.Collections.HashHelpers:FastMod(uint,uint,ulong):uint]
       mov      rcx, gword ptr [rbp-0x18]
       cmp      eax, dword ptr [rcx+0x08]
       jae      SHORT G_M000_IG04
       mov      edx, eax
       lea      rcx, bword ptr [rcx+4*rdx+0x10]
       mov      rax, rcx
 
G_M000_IG03:
       add      rsp, 32
       pop      rbp
       ret      
 
G_M000_IG04:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 90

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Resize():this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
       mov      gword ptr [rbp-0x08], rdi
 
G_M000_IG02:
       mov      rdi, gword ptr [rbp-0x08]
       mov      edi, dword ptr [rdi+0x38]
       call     [System.Collections.HashHelpers:ExpandPrime(int):int]
       mov      dword ptr [rbp-0x0C], eax
       mov      esi, dword ptr [rbp-0x0C]
       mov      rdi, gword ptr [rbp-0x08]
       xor      edx, edx
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Resize(int,bool):this]
       nop      
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 52

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Resize(int,bool):this (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 112
       lea      rbp, [rsp+0x70]
       xor      eax, eax
       mov      qword ptr [rbp-0x68], rax
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x60], xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       mov      qword ptr [rbp-0x40], rax
       mov      gword ptr [rbp-0x30], rdi
       mov      dword ptr [rbp-0x34], esi
       mov      dword ptr [rbp-0x38], edx
 
G_M000_IG02:
       mov      esi, dword ptr [rbp-0x34]
       movsxd   rsi, esi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      gword ptr [rbp-0x40], rax
       mov      rdi, gword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x38]
       mov      dword ptr [rbp-0x44], edi
       mov      rdi, gword ptr [rbp-0x30]
       mov      rdi, gword ptr [rdi+0x10]
       mov      rsi, gword ptr [rbp-0x40]
       mov      edx, dword ptr [rbp-0x44]
       call     [System.Array:Copy(System.Array,System.Array,int)]
       mov      dword ptr [rbp-0x70], 0x3E8
 
G_M000_IG03:
       mov      esi, dword ptr [rbp-0x34]
       movsxd   rsi, esi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      rdi, gword ptr [rbp-0x30]
       lea      rdi, bword ptr [rdi+0x08]
       mov      rsi, rax
       call     CORINFO_HELP_ASSIGN_REF
       mov      edi, dword ptr [rbp-0x34]
       call     [System.Collections.HashHelpers:GetFastModMultiplier(uint):ulong]
       mov      rdi, gword ptr [rbp-0x30]
       mov      qword ptr [rdi+0x30], rax
       xor      edi, edi
       mov      dword ptr [rbp-0x60], edi
       jmp      G_M000_IG06
 
G_M000_IG04:
       mov      rdi, gword ptr [rbp-0x40]
       mov      eax, dword ptr [rbp-0x60]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG10
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       cmp      dword ptr [rdi+0x04], -1
       jl       SHORT G_M000_IG05
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rsi, gword ptr [rbp-0x40]
       mov      edi, dword ptr [rbp-0x60]
       cmp      edi, dword ptr [rsi+0x08]
       jae      G_M000_IG10
       mov      eax, edi
       imul     rax, rax, 40
       lea      rsi, bword ptr [rsi+rax+0x10]
       mov      esi, dword ptr [rsi]
       mov      rdi, gword ptr [rbp-0x30]
       call     [System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:GetBucket(uint):byref:this]
       mov      bword ptr [rbp-0x68], rax
       mov      rdi, gword ptr [rbp-0x40]
       mov      eax, dword ptr [rbp-0x60]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG10
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      rax, bword ptr [rbp-0x68]
       mov      eax, dword ptr [rax]
       dec      eax
       mov      dword ptr [rdi+0x04], eax
       mov      edi, dword ptr [rbp-0x60]
       inc      edi
       mov      rax, bword ptr [rbp-0x68]
       mov      dword ptr [rax], edi
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x60]
       inc      edi
       mov      dword ptr [rbp-0x60], edi
 
G_M000_IG06:
       mov      edi, dword ptr [rbp-0x70]
       dec      edi
       mov      dword ptr [rbp-0x70], edi
       cmp      dword ptr [rbp-0x70], 0
       jg       SHORT G_M000_IG08
 
G_M000_IG07:
       lea      rdi, [rbp-0x70]
       mov      esi, 241
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG08:
       mov      edi, dword ptr [rbp-0x60]
       cmp      edi, dword ptr [rbp-0x44]
       jl       G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x30]
       lea      rdi, bword ptr [rdi+0x10]
       mov      rsi, gword ptr [rbp-0x40]
       call     CORINFO_HELP_ASSIGN_REF
       nop      
 
G_M000_IG09:
       add      rsp, 112
       pop      rbp
       ret      
 
G_M000_IG10:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 420

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:get_Count():int:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
       mov      gword ptr [rbp-0x08], rdi
 
G_M000_IG02:
       mov      rax, gword ptr [rbp-0x08]
       mov      eax, dword ptr [rax+0x38]
       mov      rcx, gword ptr [rbp-0x08]
       sub      eax, dword ptr [rcx+0x40]
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 34

; Assembly listing for method System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:GetEnumerator():System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 80
       lea      rbp, [rsp+0x50]
       xor      eax, eax
       mov      qword ptr [rbp-0x48], rax
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       vmovdqa  xmmword ptr [rbp-0x30], xmm8
       vmovdqa  xmmword ptr [rbp-0x20], xmm8
       mov      gword ptr [rbp-0x08], rdi
       mov      bword ptr [rbp-0x10], rsi
 
G_M000_IG02:
       lea      rdi, [rbp-0x48]
       mov      rsi, gword ptr [rbp-0x08]
       mov      edx, 2
       call     [System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo],int):this]
       mov      rdi, bword ptr [rbp-0x10]
       lea      rsi, bword ptr [rbp-0x48]
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       movsq    
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       movsq    
       movsq    
       mov      rax, bword ptr [rbp-0x10]
 
G_M000_IG03:
       add      rsp, 80
       pop      rbp
       ret      
 
; Total bytes of code 101

; Assembly listing for method System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(System.Collections.Generic.Dictionary`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo],int):this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 32
       lea      rbp, [rsp+0x20]
       mov      bword ptr [rbp-0x08], rdi
       mov      gword ptr [rbp-0x10], rsi
       mov      dword ptr [rbp-0x14], edx
 
G_M000_IG02:
       mov      rdi, bword ptr [rbp-0x08]
       mov      rsi, gword ptr [rbp-0x10]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       mov      rax, gword ptr [rbp-0x10]
       mov      eax, dword ptr [rax+0x44]
       mov      rcx, bword ptr [rbp-0x08]
       mov      dword ptr [rcx+0x08], eax
       mov      rax, bword ptr [rbp-0x08]
       xor      ecx, ecx
       mov      dword ptr [rax+0x0C], ecx
       mov      rax, bword ptr [rbp-0x08]
       mov      ecx, dword ptr [rbp-0x14]
       mov      dword ptr [rax+0x10], ecx
       mov      rax, bword ptr [rbp-0x08]
       xor      ecx, ecx
       mov      qword ptr [rax+0x18], rcx
       mov      qword ptr [rax+0x20], rcx
       mov      qword ptr [rax+0x28], rcx
       mov      qword ptr [rax+0x30], rcx
 
G_M000_IG03:
       add      rsp, 32
       pop      rbp
       ret      
 
; Total bytes of code 95

; Assembly listing for method System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:MoveNext():bool:this (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 112
       lea      rbp, [rsp+0x70]
       xor      eax, eax
       mov      qword ptr [rbp-0x68], rax
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x60], xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       mov      bword ptr [rbp-0x30], rdi
 
G_M000_IG02:
       mov      dword ptr [rbp-0x70], 0x3E8
       mov      rdi, bword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x08]
       mov      rax, bword ptr [rbp-0x30]
       mov      rax, gword ptr [rax]
       cmp      edi, dword ptr [rax+0x44]
       je       G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()]
       jmp      G_M000_IG06
 
G_M000_IG03:
       mov      rdi, bword ptr [rbp-0x30]
       mov      rdi, gword ptr [rdi]
       mov      rdi, gword ptr [rdi+0x10]
       mov      gword ptr [rbp-0x48], rdi
       mov      rdi, bword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x0C]
       mov      dword ptr [rbp-0x3C], edi
       mov      edi, dword ptr [rbp-0x3C]
       inc      edi
       mov      rax, bword ptr [rbp-0x30]
       mov      dword ptr [rax+0x0C], edi
       mov      rdi, gword ptr [rbp-0x48]
       mov      eax, dword ptr [rbp-0x3C]
       cmp      eax, dword ptr [rdi+0x08]
       jae      G_M000_IG10
       mov      ecx, eax
       imul     rcx, rcx, 40
       lea      rdi, bword ptr [rdi+rcx+0x10]
       mov      bword ptr [rbp-0x38], rdi
       mov      rdi, bword ptr [rbp-0x38]
       cmp      dword ptr [rdi+0x04], -1
       jl       SHORT G_M000_IG05
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rsi, bword ptr [rbp-0x38]
       mov      rsi, gword ptr [rsi+0x08]
       mov      rdx, bword ptr [rbp-0x38]
       mov      rdx, qword ptr [rdx+0x10]
       mov      rcx, bword ptr [rbp-0x38]
       mov      rcx, qword ptr [rcx+0x18]
       mov      r8, bword ptr [rbp-0x38]
       mov      r8d, dword ptr [r8+0x20]
       lea      rdi, [rbp-0x68]
       call     [System.Collections.Generic.KeyValuePair`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo):this]
       mov      rdi, bword ptr [rbp-0x30]
       add      rdi, 24
       lea      rsi, bword ptr [rbp-0x68]
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       movsq    
       movsq    
       mov      eax, 1
 
G_M000_IG04:
       add      rsp, 112
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG06
 
G_M000_IG06:
       mov      edi, dword ptr [rbp-0x70]
       dec      edi
       mov      dword ptr [rbp-0x70], edi
       cmp      dword ptr [rbp-0x70], 0
       jg       SHORT G_M000_IG08
 
G_M000_IG07:
       lea      rdi, [rbp-0x70]
       mov      esi, 94
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG08:
       mov      rdi, bword ptr [rbp-0x30]
       mov      edi, dword ptr [rdi+0x0C]
       mov      rax, bword ptr [rbp-0x30]
       mov      rax, gword ptr [rax]
       cmp      edi, dword ptr [rax+0x38]
       jb       G_M000_IG03
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, bword ptr [rbp-0x30]
       mov      rax, gword ptr [rax]
       mov      eax, dword ptr [rax+0x38]
       inc      eax
       mov      rcx, bword ptr [rbp-0x30]
       mov      dword ptr [rcx+0x0C], eax
       mov      rax, bword ptr [rbp-0x30]
       xor      ecx, ecx
       mov      qword ptr [rax+0x18], rcx
       mov      qword ptr [rax+0x20], rcx
       mov      qword ptr [rax+0x28], rcx
       mov      qword ptr [rax+0x30], rcx
       xor      eax, eax
 
G_M000_IG09:
       add      rsp, 112
       pop      rbp
       ret      
 
G_M000_IG10:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 403

; Assembly listing for method System.Collections.Generic.KeyValuePair`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:.ctor(System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo):this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 48
       lea      rbp, [rsp+0x30]
       mov      bword ptr [rbp-0x08], rdi
       mov      gword ptr [rbp-0x18], rsi
       mov      qword ptr [rbp-0x10], rdx
       mov      qword ptr [rbp-0x28], rcx
       mov      dword ptr [rbp-0x20], r8d
 
G_M000_IG02:
       mov      rdi, bword ptr [rbp-0x08]
       lea      rsi, bword ptr [rbp-0x18]
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       mov      rax, bword ptr [rbp-0x08]
       mov      rcx, qword ptr [rbp-0x28]
       mov      qword ptr [rax+0x10], rcx
       mov      ecx, dword ptr [rbp-0x20]
       mov      dword ptr [rax+0x18], ecx
 
G_M000_IG03:
       add      rsp, 48
       pop      rbp
       ret      
 
; Total bytes of code 69

; Assembly listing for method System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:get_Current():System.Collections.Generic.KeyValuePair`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
       mov      bword ptr [rbp-0x08], rdi
       mov      bword ptr [rbp-0x10], rsi
 
G_M000_IG02:
       mov      rsi, bword ptr [rbp-0x08]
       add      rsi, 24
       mov      rdi, bword ptr [rbp-0x10]
       call     CORINFO_HELP_ASSIGN_BYREF
       movsq    
       movsq    
       movsq    
       mov      rax, bword ptr [rbp-0x10]
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 51

; Assembly listing for method System.Collections.Generic.KeyValuePair`2[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:get_Key():System.ReadOnlyMemory`1[ushort]:this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 32
       vzeroupper 
       lea      rbp, [rsp+0x20]
       xor      eax, eax
       mov      qword ptr [rbp-0x18], rax
       mov      bword ptr [rbp-0x08], rdi
 
G_M000_IG02:
       mov      rax, bword ptr [rbp-0x08]
 
G_M000_IG03:
       vmovdqu  xmm0, xmmword ptr [rax]
       vmovdqu  xmmword ptr [rbp-0x18], xmm0
 
G_M000_IG04:
       mov      rax, gword ptr [rbp-0x18]
       mov      rdx, qword ptr [rbp-0x10]
 
G_M000_IG05:
       add      rsp, 32
       pop      rbp
       ret      
 
; Total bytes of code 50

; Assembly listing for method System.Collections.Generic.Dictionary`2+Enumerator[System.ReadOnlyMemory`1[ushort],System.ConsoleKeyInfo]:Dispose():this (Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier0 code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
       mov      bword ptr [rbp-0x08], rdi
 
G_M000_IG02:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 20

; Assembly listing for method Program:run_benchmark(int,int) (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x43
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 103.93

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       sub      rsp, 32
       mov      qword ptr [rsp+0xC8], r15
       mov      qword ptr [rsp+0xC0], r14
       mov      qword ptr [rsp+0xB8], r13
       mov      qword ptr [rsp+0xB0], rbx
       vzeroupper 
       lea      rbp, [rsp+0x20]
       mov      edi, dword ptr [rbp+0x84]
       mov      esi, dword ptr [rbp+0x80]
       mov      rdx, gword ptr [rbp+0x78]
       mov      rax, gword ptr [rbp+0x70]
       mov      r9, gword ptr [rbp+0x68]
       mov      r8d, dword ptr [rbp+0x64]
       mov      ecx, dword ptr [rbp+0x60]
 
G_M000_IG02:
       jmp      SHORT G_M000_IG04
       align    [0 bytes for IG06]
 
G_M000_IG03:
       xor      ecx, ecx
 
G_M000_IG04:
       cmp      ecx, esi
       jge      G_M000_IG07
 
G_M000_IG05:
       mov      r10d, r8d
       sub      r10d, dword ptr [rdx+0x18]
       mov      r11d, dword ptr [rdx+0x10]
 
G_M000_IG06:
       mov      ebx, r10d
       cmp      ebx, r11d
       jae      G_M000_IG13
       mov      r15d, dword ptr [rdx+0x14]
       imul     ebx, r15d
       mov      r14d, ecx
       sub      r14d, dword ptr [rdx+0x1C]
       cmp      r14d, r15d
       jae      G_M000_IG13
       add      r14d, ebx
       mov      r15d, r14d
       lea      ebx, [r8+rcx]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, ebx
       vmovsd   qword ptr [rdx+8*r15+0x20], xmm0
       mov      ebx, r8d
       sub      ebx, dword ptr [rax+0x18]
       cmp      ebx, dword ptr [rax+0x10]
       jae      G_M000_IG13
       mov      r15d, dword ptr [rax+0x14]
       imul     ebx, r15d
       mov      r14d, ecx
       sub      r14d, dword ptr [rax+0x1C]
       cmp      r14d, r15d
       jae      G_M000_IG13
       add      r14d, ebx
       mov      r15d, r14d
       vmovsd   qword ptr [rax+8*r15+0x20], xmm0
       inc      ecx
       cmp      ecx, esi
       jl       SHORT G_M000_IG06
 
G_M000_IG07:
       inc      r8d
       cmp      r8d, edi
       jge      G_M000_IG14
       jmp      G_M000_IG03
       align    [0 bytes for IG10]
 
G_M000_IG08:
       xor      r8d, r8d
       test     esi, esi
       jle      G_M000_IG12
 
G_M000_IG09:
       vxorps   xmm0, xmm0, xmm0
       xor      r10d, r10d
       mov      ebx, ecx
       sub      ebx, dword ptr [rdx+0x18]
       mov      r11d, dword ptr [rdx+0x10]
 
G_M000_IG10:
       mov      r15d, ebx
       cmp      r15d, r11d
       jae      G_M000_IG13
       mov      r14d, dword ptr [rdx+0x14]
       imul     r15d, r14d
       mov      r13d, r10d
       sub      r13d, dword ptr [rdx+0x1C]
       cmp      r13d, r14d
       jae      G_M000_IG13
       add      r15d, r13d
       mov      r13d, r15d
       vmovsd   xmm1, qword ptr [rdx+8*r13+0x20]
       mov      r15d, r10d
       sub      r15d, dword ptr [rax+0x18]
       cmp      r15d, dword ptr [rax+0x10]
       jae      SHORT G_M000_IG13
       mov      r14d, dword ptr [rax+0x14]
       imul     r15d, r14d
       mov      r13d, r8d
       sub      r13d, dword ptr [rax+0x1C]
       cmp      r13d, r14d
       jae      SHORT G_M000_IG13
       add      r15d, r13d
       vmulsd   xmm1, xmm1, qword ptr [rax+8*r15+0x20]
       vaddsd   xmm0, xmm1, xmm0
       inc      r10d
       cmp      r10d, edi
       jl       SHORT G_M000_IG10
 
G_M000_IG11:
       mov      r15d, ecx
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG13
       mov      r10d, dword ptr [r9+0x14]
       mov      r11d, r15d
       imul     r11d, r10d
       mov      r13d, r8d
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r10d
       jae      SHORT G_M000_IG13
       add      r11d, r13d
       mov      r10d, r11d
       vmovsd   qword ptr [r9+8*r10+0x20], xmm0
       inc      r8d
       cmp      r8d, esi
       jl       G_M000_IG09
 
G_M000_IG12:
       inc      ecx
       cmp      ecx, edi
       jge      SHORT G_M000_IG15
       jmp      G_M000_IG08
 
G_M000_IG13:
       call     CORINFO_HELP_RNGCHKFAIL
 
G_M000_IG14:
       xor      ecx, ecx
       test     edi, edi
       jg       G_M000_IG08
 
G_M000_IG15:
       dec      edi
       mov      r15d, edi
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG13
       mov      r10d, dword ptr [r9+0x14]
       mov      eax, r15d
       imul     eax, r10d
       dec      esi
       mov      r13d, esi
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r10d
       jae      SHORT G_M000_IG13
       add      eax, r13d
       vmovsd   xmm0, qword ptr [r9+8*rax+0x20]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG16:
       add      rsp, 176
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 530

; Assembly listing for method System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, qword ptr [rdi]
       shr      rax, 32
       mov      edx, dword ptr [rdi]
       mov      rcx, qword ptr [rsi]
       shr      rcx, 32
       mov      r8d, dword ptr [rsi]
       mov      r9d, eax
       mov      r10d, ecx
       imul     r9, r10
       mov      r10d, edx
       mov      ecx, ecx
       imul     rcx, r10
       mov      eax, eax
       mov      r10d, r8d
       imul     rax, r10
       imul     rdx, r8
       shr      rdx, 32
       mov      r8d, eax
       add      rdx, r8
       mov      r8d, ecx
       add      rdx, r8
       mov      r8d, 0xD1FFAB1E
       add      rdx, r8
       mov      edi, dword ptr [rdi+0x08]
       mov      esi, dword ptr [rsi+0x08]
       lea      edi, [rdi+rsi+0x40]
       shr      rax, 32
       add      rax, r9
       shr      rcx, 32
       add      rax, rcx
       shr      rdx, 32
       add      rax, rdx
       mov      edx, edi
 
G_M000_IG03:
       pop      rbp
       ret      
 
; Total bytes of code 115

; Assembly listing for method System.Console:get_Out():System.IO.TextWriter (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rsp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 181

G_M000_IG01:
       push     rbx
 
G_M000_IG02:
       mov      rdi, 0xD1FFAB1E
       mov      rbx, gword ptr [rdi]
       test     rbx, rbx
       je       SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG03:
       pop      rbx
       ret      
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG05:
       pop      rbx
       tail.jmp [System.Console:<get_Out>g__EnsureInitialized|26_0():System.IO.TextWriter]
 
; Total bytes of code 77

; Assembly listing for method System.Number+DiyFp:Normalize():System.Number+DiyFp:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      rax, qword ptr [rdi]
       xor      edx, edx
       lzcnt    rdx, rax
       shlx     rax, rax, rdx
       mov      ecx, dword ptr [rdi+0x08]
       sub      ecx, edx
       mov      edx, ecx
 
G_M000_IG03:
       ret      
 
; Total bytes of code 23

; Assembly listing for method System.Buffer:Memmove(byref,byref,ulong) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 4302072

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x30]
       mov      r15, rdi
       mov      r14, rsi
       mov      rbx, rdx
 
G_M000_IG02:
       mov      rdi, r15
       sub      rdi, r14
       cmp      rdi, rbx
       jb       G_M000_IG35
 
G_M000_IG03:
       mov      rdi, r14
       sub      rdi, r15
       cmp      rdi, rbx
       jb       G_M000_IG14
 
G_M000_IG04:
       lea      r13, bword ptr [r14+rbx]
       lea      r12, bword ptr [r15+rbx]
       cmp      rbx, 16
       ja       SHORT G_M000_IG07
 
G_M000_IG05:
       test     bl, 24
       je       G_M000_IG17
 
G_M000_IG06:
       jmp      G_M000_IG15
 
G_M000_IG07:
       cmp      rbx, 64
       ja       G_M000_IG19
 
G_M000_IG08:
       vmovups  xmm0, xmmword ptr [r14]
       vmovups  xmmword ptr [r15], xmm0
       cmp      rbx, 32
       jbe      SHORT G_M000_IG11
 
G_M000_IG09:
       vmovups  xmm0, xmmword ptr [r14+0x10]
       vmovups  xmmword ptr [r15+0x10], xmm0
       cmp      rbx, 48
       jbe      SHORT G_M000_IG13
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vmovups  xmm0, xmmword ptr [r14+0x20]
       vmovups  xmmword ptr [r15+0x20], xmm0
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG12:
       vmovups  xmm0, xmmword ptr [r13-0x10]
       vmovups  xmmword ptr [r12-0x10], xmm0
       jmp      SHORT G_M000_IG16
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG11
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG35
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [r14]
       mov      qword ptr [r15], rdi
       mov      rdi, qword ptr [r13-0x08]
       mov      qword ptr [r12-0x08], rdi
 
G_M000_IG16:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG17:
       test     bl, 4
       je       SHORT G_M000_IG21
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [r14]
       mov      dword ptr [r15], edi
       mov      edi, dword ptr [r13-0x04]
       mov      dword ptr [r12-0x04], edi
       jmp      SHORT G_M000_IG16
 
G_M000_IG19:
       cmp      rbx, 0x800
       ja       G_M000_IG32
 
G_M000_IG20:
       jmp      SHORT G_M000_IG24
 
G_M000_IG21:
       test     rbx, rbx
       je       G_M000_IG31
 
G_M000_IG22:
       movzx    rdi, byte  ptr [r14]
       mov      byte  ptr [r15], dil
       test     bl, 2
       je       SHORT G_M000_IG27
 
G_M000_IG23:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       movsx    rdi, word  ptr [r13-0x02]
       mov      word  ptr [r12-0x02], di
       jmp      SHORT G_M000_IG16
 
G_M000_IG24:
       mov      rdi, rbx
       shr      rdi, 6
 
G_M000_IG25:
       vmovdqu  ymm0, ymmword ptr [r14]
       vmovdqu  ymmword ptr [r15], ymm0
       vmovdqu  ymm0, ymmword ptr [r14+0x20]
       vmovdqu  ymmword ptr [r15+0x20], ymm0
       add      r15, 64
       add      r14, 64
       dec      rdi
       mov      qword ptr [rbp-0x30], rdi
       test     rdi, rdi
       je       SHORT G_M000_IG29
 
G_M000_IG26:
       jmp      SHORT G_M000_IG28
 
G_M000_IG27:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG16
 
G_M000_IG28:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [rbp-0x30]
       jmp      SHORT G_M000_IG25
 
G_M000_IG29:
       and      rbx, 63
       cmp      rbx, 16
       ja       SHORT G_M000_IG34
 
G_M000_IG30:
       jmp      SHORT G_M000_IG33
 
G_M000_IG31:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG16
 
G_M000_IG32:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG36
 
G_M000_IG33:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG12
 
G_M000_IG34:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG08
 
G_M000_IG35:
       cmp      r15, r14
       je       SHORT G_M000_IG38
 
G_M000_IG36:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r15
       mov      rsi, r14
       mov      rdx, rbx
 
G_M000_IG37:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       tail.jmp [System.Buffer:_Memmove(byref,byref,ulong)]
 
G_M000_IG38:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG16
 
; Total bytes of code 620

; Assembly listing for method System.IO.StreamWriter:Flush(bool,bool):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1096
; 6 inlinees with PGO data; 6 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 56
       lea      rbp, [rsp+0x60]
       mov      qword ptr [rbp-0x58], 0xD1FFAB1E
       mov      rbx, rdi
       mov      r15d, esi
       mov      r14d, edx
 
G_M000_IG02:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG25
       cmp      dword ptr [rbx+0x50], 0
       je       G_M000_IG22
 
G_M000_IG03:
       cmp      byte  ptr [rbx+0x59], 0
       je       G_M000_IG14
 
G_M000_IG04:
       mov      rdi, gword ptr [rbx+0x38]
       test     rdi, rdi
       je       G_M000_IG16
 
G_M000_IG05:
       lea      r13, bword ptr [rdi+0x10]
       mov      r12d, dword ptr [rdi+0x08]
 
G_M000_IG06:
       mov      rax, gword ptr [rbx+0x30]
       mov      rdi, rax
       mov      gword ptr [rbp-0x38], rdi
       mov      rax, gword ptr [rbx+0x40]
       mov      ecx, dword ptr [rbx+0x50]
       test     rax, rax
       je       G_M000_IG26
       cmp      dword ptr [rax+0x08], ecx
       jb       G_M000_IG24
       add      rax, 16
       mov      bword ptr [rbp-0x50], rax
       mov      dword ptr [rbp-0x2C], ecx
 
G_M000_IG07:
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0x38]
       mov      rsi, bword ptr [rbp-0x50]
       mov      edx, dword ptr [rbp-0x2C]
       mov      rcx, r13
       mov      r8d, r12d
       movzx    r9, r14b
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x48]
       call     [rax+0x10]System.Text.Encoder:GetBytes(System.ReadOnlySpan`1[ushort],System.Span`1[ubyte],bool):int:this
       mov      r14d, eax
       xor      edi, edi
       mov      dword ptr [rbx+0x50], edi
       test     r14d, r14d
       jle      SHORT G_M000_IG09
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, gword ptr [rbx+0x20]
       mov      rdi, rax
       mov      gword ptr [rbp-0x40], rdi
       cmp      r14d, r12d
       ja       G_M000_IG24
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      r12, gword ptr [rbp-0x40]
       mov      rdi, r12
       mov      rsi, r13
       mov      edx, r14d
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x60]
       call     [rax+0x38]System.IO.Stream:Write(System.ReadOnlySpan`1[ubyte]):this
 
G_M000_IG09:
       test     r15b, r15b
       jne      SHORT G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG10:
       cmp      qword ptr [rbp-0x58], 0xD1FFAB1E
       je       SHORT G_M000_IG11
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG11:
       nop      
 
G_M000_IG12:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15, gword ptr [rbx+0x20]
       mov      rdi, r15
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r15
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x50]
       call     [rax+0x30]System.IO.Stream:Flush():this
       jmp      SHORT G_M000_IG10
 
G_M000_IG14:
       mov      byte  ptr [rbx+0x59], 1
       mov      r13, gword ptr [rbx+0x28]
       mov      rdi, r13
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r13
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x30]System.Text.Encoding:get_Preamble():System.ReadOnlySpan`1[ubyte]:this
       mov      r13, rax
       mov      r12d, edx
       test     r12d, r12d
       jg       SHORT G_M000_IG18
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG04
 
G_M000_IG16:
       mov      r13, gword ptr [rbx+0x28]
       mov      rdi, r13
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r13
       mov      esi, dword ptr [rbx+0x50]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
       cmp      eax, 0x400
       jg       SHORT G_M000_IG21
 
G_M000_IG17:
       jmp      SHORT G_M000_IG19
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, gword ptr [rbx+0x20]
       mov      rdi, rax
       mov      gword ptr [rbp-0x48], rdi
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0x48]
       mov      rsi, r13
       mov      edx, r12d
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x60]
       call     [rax+0x38]System.IO.Stream:Write(System.ReadOnlySpan`1[ubyte]):this
       jmp      G_M000_IG04
 
G_M000_IG19:
       test     dword ptr [rsp], esp
       sub      rsp, 0x400
       lea      r12, [rsp]
       mov      r13d, 0x400
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r12
       mov      r12d, r13d
       mov      r13, rax
       jmp      G_M000_IG06
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12, gword ptr [rbx+0x28]
       mov      rdi, r12
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r12
       mov      rsi, gword ptr [rbx+0x40]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
       movsxd   rsi, eax
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      r13, rax
       lea      rdi, bword ptr [rbx+0x38]
       mov      rsi, r13
       call     CORINFO_HELP_ASSIGN_REF
       lea      r12, bword ptr [r13+0x10]
       mov      r13d, dword ptr [r13+0x08]
       jmp      G_M000_IG20
 
G_M000_IG22:
       test     r15b, r15b
       je       SHORT G_M000_IG27
 
G_M000_IG23:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG03
 
G_M000_IG24:
       call     [System.ThrowHelper:ThrowArgumentOutOfRangeException()]
       int3     
 
G_M000_IG25:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG26:
       test     ecx, ecx
       jne      SHORT G_M000_IG24
       xor      rsi, rsi
       xor      edx, edx
       mov      bword ptr [rbp-0x50], rsi
       mov      dword ptr [rbp-0x2C], edx
       jmp      G_M000_IG07
 
G_M000_IG27:
       test     r14b, r14b
       jne      SHORT G_M000_IG30
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       cmp      qword ptr [rbp-0x58], 0xD1FFAB1E
       je       SHORT G_M000_IG28
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG28:
       nop      
 
G_M000_IG29:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG30:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG03
 
; Total bytes of code 852

; Assembly listing for method System.Text.ConsoleEncoding:GetMaxByteCount(int):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       lea      rbp, [rsp+0x10]
       mov      ebx, esi
 
G_M000_IG02:
       mov      r15, gword ptr [rdi+0x28]
       mov      rdi, r15
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r15
       mov      esi, ebx
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
 
G_M000_IG03:
       pop      rbx
       pop      r15
       pop      rbp
       tail.jmp [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
 
; Total bytes of code 53

; Assembly listing for method System.Text.UTF8Encoding+UTF8EncodingSealed:GetMaxByteCount(int):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rsp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 51413

G_M000_IG01:
       push     rbx
       mov      ebx, esi
 
G_M000_IG02:
       cmp      ebx, 0xD1FFAB1E
       ja       SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      eax, [rbx+2*rbx]
       add      eax, 3
 
G_M000_IG03:
       pop      rbx
       ret      
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, ebx
       call     [System.Text.UTF8Encoding+UTF8EncodingSealed:<GetMaxByteCount>g__ThrowArgumentException|7_0(int)]
       int3     
 
; Total bytes of code 58

; Assembly listing for method System.Text.EncoderNLS:GetBytes(ulong,int,ulong,int,bool):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; 4 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      rbx, rdi
       mov      r13, rsi
       mov      r15d, edx
       mov      r12, rcx
       mov      r14d, r8d
 
G_M000_IG02:
       test     r13, r13
       je       SHORT G_M000_IG04
       test     r12, r12
       je       G_M000_IG05
       test     r14d, r14d
       jl       G_M000_IG06
       test     r15d, r15d
       jl       G_M000_IG07
       mov      byte  ptr [rbx+0x26], r9b
       mov      byte  ptr [rbx+0x27], 1
       mov      rax, gword ptr [rbx+0x18]
       mov      rdi, rax
       mov      gword ptr [rbp-0x30], rdi
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, gword ptr [rbp-0x30]
       mov      rsi, r13
       mov      edx, r15d
       mov      rcx, r12
       mov      r8d, r14d
       mov      r9, rbx
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x70]
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       tail.jmp [rax+0x38]System.Text.Encoding:GetBytes(ulong,int,ulong,int,System.Text.EncoderNLS):int:this
 
G_M000_IG04:
       mov      edi, 0x12C1A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG05:
       mov      edi, 0x1363
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG06:
       mov      edi, 0x12C00
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, r14d
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
G_M000_IG07:
       mov      edi, 0x12C3A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, r15d
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
; Total bytes of code 267

; Assembly listing for method System.Text.Encoding:GetBytes(ulong,int,ulong,int,System.Text.EncoderNLS):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 6163
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 40
       lea      rbp, [rsp+0x50]
       mov      dword ptr [rbp-0x2C], r8d
       mov      rbx, rdi
       mov      r13, rsi
       mov      r14d, edx
       mov      r12, rcx
       mov      r15, r9
 
G_M000_IG02:
       xor      ecx, ecx
       xor      edi, edi
       mov      dword ptr [rbp-0x38], edi
       cmp      word  ptr [r15+0x24], 0
       jne      SHORT G_M000_IG05
       cmp      gword ptr [r15+0x10], 0
       mov      dword ptr [rbp-0x30], ecx
       jne      G_M000_IG09
 
G_M000_IG03:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       lea      r9, [rbp-0x38]
       mov      rsi, r13
       mov      edx, r14d
       mov      rcx, r12
       mov      r8d, dword ptr [rbp-0x2C]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x78]
       call     [rax]System.Text.Encoding:GetBytesFast(ulong,int,ulong,int,byref):int:this
       mov      dword ptr [rbp-0x30], eax
       cmp      dword ptr [rbp-0x38], r14d
       jne      SHORT G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [r15+0x20], r14d
       mov      eax, dword ptr [rbp-0x30]
 
G_M000_IG04:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      dword ptr [rbp-0x30], ecx
       jmp      SHORT G_M000_IG07
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG07:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x30]
       mov      dword ptr [rsp], edi
       mov      gword ptr [rsp+0x08], r15
       mov      rdi, rbx
       mov      rsi, r13
       mov      edx, r14d
       mov      rcx, r12
       mov      r8d, dword ptr [rbp-0x2C]
       mov      r9d, dword ptr [rbp-0x38]
       call     [System.Text.Encoding:GetBytesWithFallback(ulong,int,ulong,int,int,int,System.Text.EncoderNLS):int:this]
       nop      
 
G_M000_IG08:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG09:
       mov      rdi, gword ptr [r15+0x10]
       mov      rdx, qword ptr [rdi]
       mov      rdx, qword ptr [rdx+0x48]
       call     [rdx]System.Text.EncoderFallbackBuffer:get_Remaining():int:this
       xor      edi, edi
       test     eax, eax
       setg     dil
       test     edi, edi
       jne      SHORT G_M000_IG07
       jmp      G_M000_IG03
 
; Total bytes of code 278

; Assembly listing for method System.Text.EncoderNLS:get_HasLeftoverData():bool:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 6163

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       cmp      word  ptr [rbx+0x24], 0
       jne      SHORT G_M000_IG04
       cmp      gword ptr [rbx+0x10], 0
       jne      SHORT G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      eax, eax
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, 1
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rbx, gword ptr [rbx+0x10]
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x48]
       call     [rax]System.Text.EncoderFallbackBuffer:get_Remaining():int:this
       test     eax, eax
       setg     al
       movzx    rax, al
 
G_M000_IG07:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
; Total bytes of code 140

; Assembly listing for method System.Text.UTF8Encoding:GetBytesFast(ulong,int,ulong,int,byref):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     r15
       push     r14
       push     rbx
       sub      rsp, 16
       mov      rbx, rsi
       mov      r15, rcx
       mov      ecx, r8d
       mov      r14, r9
 
G_M000_IG02:
       lea      r8, [rsp+0x08]
       lea      r9, [rsp]
       mov      rdi, rbx
       mov      esi, edx
       mov      rdx, r15
       call     [System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int]
       mov      rax, qword ptr [rsp+0x08]
       sub      rax, rbx
       mov      rcx, rax
       shr      rcx, 63
       add      rax, rcx
       sar      rax, 1
       mov      dword ptr [r14], eax
       mov      rax, qword ptr [rsp]
       sub      rax, r15
 
G_M000_IG03:
       add      rsp, 16
       pop      rbx
       pop      r14
       pop      r15
       ret      
 
; Total bytes of code 85

; Assembly listing for method System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 249775
; 13 inlinees with PGO data; 12 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 88
       vzeroupper 
       lea      rbp, [rsp+0x80]
       mov      bword ptr [rbp-0x78], r9
       mov      rbx, rdi
       mov      r13d, esi
       mov      r15, rdx
       mov      r14d, ecx
       mov      r12, r8
 
G_M000_IG02:
       cmp      r13d, r14d
       mov      edx, r14d
       cmovle   edx, r13d
       mov      rdi, rbx
       mov      rsi, r15
       call     [System.Text.Ascii:NarrowUtf16ToAscii(ulong,ulong,ulong):ulong]
       lea      rbx, [rbx+2*rax]
       add      r15, rax
       cmp      eax, r13d
       jne      G_M000_IG09
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      qword ptr [r12], rbx
       mov      r12, bword ptr [rbp-0x78]
       mov      qword ptr [r12], r15
       xor      eax, eax
 
G_M000_IG04:
       add      rsp, 88
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       lea      ecx, [rdi+D1FFAB1EH]
       cmp      ecx, 0xD1FFAB1E
       ja       G_M000_IG17
       cmp      r14d, 4
       jl       SHORT G_M000_IG08
 
G_M000_IG06:
       mov      ecx, edi
       shr      ecx, 6
       and      ecx, 0xD1FFAB1E
       shl      edi, 8
       and      edi, 0xD1FFAB1E
       add      edi, ecx
       add      edi, 0xD1FFAB1E
       mov      dword ptr [r15], edi
       add      rbx, 4
       add      r15, 4
       add      r14d, -4
       cmp      rbx, rax
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       ja       G_M000_IG68
 
G_M000_IG07:
       mov      edi, dword ptr [rbx]
       mov      ecx, edi
       mov      dword ptr [rbp-0x44], ecx
       lea      edi, [rcx-0x80]
       movzx    rdi, di
       cmp      edi, 0x780
       jae      SHORT G_M000_IG10
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG05
 
G_M000_IG08:
       mov      dword ptr [rbp-0x44], edi
       jmp      G_M000_IG89
 
G_M000_IG09:
       sub      r13d, eax
       sub      r14d, eax
       cmp      r13d, 2
       jl       G_M000_IG69
       jmp      G_M000_IG34
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
 
G_M000_IG11:
       test     edi, 0xD1FFAB1E
       je       SHORT G_M000_IG15
 
G_M000_IG12:
       test     edi, 0xFF80
       je       G_M000_IG35
 
G_M000_IG13:
       test     edi, 0xF800
       jne      G_M000_IG32
 
G_M000_IG14:
       jmp      G_M000_IG05
 
G_M000_IG15:
       cmp      r14d, 2
       jl       G_M000_IG59
       mov      ecx, edi
       shr      ecx, 8
       or       ecx, edi
       mov      word  ptr [r15], cx
       add      rbx, 4
       add      r15, 2
       add      r14d, -2
       mov      rdi, rax
       sub      rdi, rbx
       mov      rcx, rdi
       shr      rcx, 63
       add      rdi, rcx
       sar      rdi, 1
       add      edi, 2
       mov      ecx, edi
       movsxd   rdx, r14d
       cmp      rcx, rdx
       jle      G_M000_IG22
 
G_M000_IG16:
       jmp      G_M000_IG23
 
G_M000_IG17:
       cmp      r14d, 2
       jl       G_M000_IG55
 
G_M000_IG18:
       lea      ecx, [4*rdi]
       and      ecx, 0x1F00
       mov      edx, edi
       and      edx, 63
       lea      ecx, [rcx+rdx+0xC080]
       movzx    rcx, cx
       movbe    word  ptr [r15], cx
       cmp      edi, 0xD1FFAB1E
       jae      G_M000_IG31
       cmp      r14d, 3
       jl       G_M000_IG62
       shr      edi, 16
       mov      byte  ptr [r15+0x02], dil
       add      rbx, 4
       add      r15, 3
       add      r14d, -3
       vmovaps  xmmword ptr [rbp-0x40], xmm0
 
G_M000_IG19:
       cmp      rbx, qword ptr [rbp-0x30]
       ja       G_M000_IG53
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
 
G_M000_IG21:
       mov      edi, dword ptr [rbx]
       jmp      G_M000_IG11
 
G_M000_IG22:
       mov      rdx, rcx
 
G_M000_IG23:
       mov      ecx, edx
       mov      dword ptr [rbp-0x4C], ecx
       mov      edx, ecx
       shr      edx, 3
       mov      dword ptr [rbp-0x50], edx
       xor      esi, esi
       mov      dword ptr [rbp-0x5C], esi
       test     edx, edx
       jbe      G_M000_IG30
 
G_M000_IG24:
       vmovups  xmm1, xmmword ptr [rbx]
       vmovaps  xmmword ptr [rbp-0x70], xmm1
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       vptest   xmm1, xmm0
       jne      G_M000_IG38
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vmovaps  xmm1, xmmword ptr [rbp-0x70]
       vpackuswb xmm1, xmm1, xmm1
       vmovq    qword ptr [r15], xmm1
       add      rbx, 16
       add      r15, 8
       mov      esi, dword ptr [rbp-0x5C]
       inc      esi
       mov      edi, dword ptr [rbp-0x50]
       cmp      esi, edi
       jb       SHORT G_M000_IG29
 
G_M000_IG26:
       lea      edi, [8*rsi]
       sub      r14d, edi
       test     byte  ptr [rbp-0x4C], 4
       je       G_M000_IG37
 
G_M000_IG27:
       mov      rax, qword ptr [rbx]
       mov      rdi, rax
       mov      rax, 0xD1FFAB1E
       test     rdi, rax
       jne      G_M000_IG40
 
G_M000_IG28:
       vmovd    xmm1, rdi
       vmovaps  xmmword ptr [rbp-0x70], xmm1
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vmovaps  xmm1, xmmword ptr [rbp-0x70]
       vpackuswb xmm0, xmm1, xmm1
       vmovd    dword ptr [r15], xmm0
       add      rbx, 8
       jmp      G_M000_IG58
 
G_M000_IG29:
       mov      dword ptr [rbp-0x5C], esi
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG24
 
G_M000_IG30:
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      esi, dword ptr [rbp-0x5C]
       jmp      SHORT G_M000_IG26
 
G_M000_IG31:
       add      rbx, 2
       add      r15, 2
       add      r14d, -2
       cmp      rbx, rax
       ja       G_M000_IG67
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      ecx, dword ptr [rbx]
       mov      eax, ecx
       mov      edi, eax
       mov      rax, qword ptr [rbp-0x30]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
 
G_M000_IG32:
       lea      ecx, [rdi-0xD800]
       test     ecx, 0xF800
       je       G_M000_IG57
       test     edi, 0xD1FFAB1E
       je       G_M000_IG52
       mov      dword ptr [rbp-0x44], edi
       lea      ecx, [rdi+D1FFAB1EH]
       cmp      ecx, 0xD1FFAB1E
       jb       G_M000_IG46
 
G_M000_IG33:
       jmp      G_M000_IG43
 
G_M000_IG34:
       mov      edi, r13d
       lea      rax, [rbx+2*rdi-0x04]
       mov      qword ptr [rbp-0x30], rax
       vmovups  xmm0, xmmword ptr [reloc @RWD00]
       jmp      G_M000_IG21
 
G_M000_IG35:
       test     r14d, r14d
       je       G_M000_IG61
 
G_M000_IG36:
       jmp      G_M000_IG47
 
G_M000_IG37:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG19
 
G_M000_IG38:
       mov      esi, dword ptr [rbp-0x5C]
       lea      edi, [8*rsi]
       sub      r14d, edi
       vmovaps  xmm1, xmmword ptr [rbp-0x70]
       vmovd    rdi, xmm1
       mov      rcx, 0xD1FFAB1E
       test     rdi, rcx
       je       G_M000_IG45
 
G_M000_IG39:
       mov      qword ptr [rbp-0x58], rdi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [rbp-0x58]
 
G_M000_IG40:
       mov      qword ptr [rbp-0x58], rdi
       mov      eax, edi
       mov      dword ptr [rbp-0x44], eax
       test     eax, 0xD1FFAB1E
       je       SHORT G_M000_IG42
 
G_M000_IG41:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG12
 
G_M000_IG42:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x44]
       mov      edi, eax
       shr      edi, 8
       or       edi, eax
       mov      word  ptr [r15], di
       add      rbx, 4
       add      r15, 2
       add      r14d, -2
       mov      rdi, qword ptr [rbp-0x58]
       shr      rdi, 32
       mov      eax, edi
       mov      dword ptr [rbp-0x44], eax
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG12
 
G_M000_IG43:
       cmp      r14d, 6
       jl       G_M000_IG49
       mov      edi, dword ptr [rbp-0x44]
       lea      ecx, [4*rdi]
       and      ecx, 0x3F00
       mov      edx, edi
       and      edx, 63
       shl      edx, 16
       or       ecx, edx
       mov      edx, edi
       shr      edx, 4
       and      edx, 0xD1FFAB1E
       mov      esi, edi
       shr      esi, 12
       and      esi, 15
       or       edx, esi
       add      ecx, edx
       add      ecx, 0xD1FFAB1E
       mov      dword ptr [r15], ecx
       mov      ecx, edi
       shr      ecx, 22
       and      ecx, 63
       shr      edi, 8
       and      edi, 0x3F00
       add      edi, ecx
       add      edi, 0x8080
       mov      word  ptr [r15+0x04], di
       add      rbx, 4
       add      r15, 6
       add      r14d, -6
       cmp      rbx, rax
       ja       G_M000_IG51
 
G_M000_IG44:
       jmp      G_M000_IG48
 
G_M000_IG45:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vmovaps  xmm1, xmmword ptr [rbp-0x70]
       vpackuswb xmm0, xmm1, xmm1
       vmovd    dword ptr [r15], xmm0
       add      rbx, 8
       add      r15, 4
       add      r14d, -4
       vpextrq  rdi, xmm1, 1
       jmp      G_M000_IG40
 
G_M000_IG46:
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG52
 
G_M000_IG47:
       mov      byte  ptr [r15], dil
       add      rbx, 2
       inc      r15
       dec      r14d
       cmp      rbx, rax
       ja       G_M000_IG60
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbx]
       mov      eax, edi
       mov      edi, eax
       mov      rax, qword ptr [rbp-0x30]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG13
 
G_M000_IG48:
       mov      edi, dword ptr [rbx]
       mov      ecx, edi
       mov      dword ptr [rbp-0x44], ecx
       test     ecx, 0xF800
       je       SHORT G_M000_IG50
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG32
 
G_M000_IG49:
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      SHORT G_M000_IG52
 
G_M000_IG50:
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG11
 
G_M000_IG51:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG68
 
G_M000_IG52:
       cmp      r14d, 3
       jl       G_M000_IG65
       lea      ecx, [4*rdi]
       and      ecx, 0x3F00
       movzx    rdx, di
       shr      edx, 12
       add      ecx, edx
       add      ecx, 0x80E0
       mov      word  ptr [r15], cx
       mov      ecx, edi
       and      ecx, 63
       or       ecx, -128
       mov      byte  ptr [r15+0x02], cl
       add      rbx, 2
       add      r15, 3
       add      r14d, -3
       cmp      edi, 0xD1FFAB1E
       jae      G_M000_IG56
       test     r14d, r14d
       je       G_M000_IG64
       shr      edi, 16
       mov      byte  ptr [r15], dil
       add      rbx, 2
       inc      r15
       dec      r14d
       cmp      rbx, rax
       ja       G_M000_IG63
       mov      edi, dword ptr [rbx]
       mov      ecx, edi
       mov      dword ptr [rbp-0x44], ecx
       test     ecx, 0xF800
       je       SHORT G_M000_IG54
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG32
 
G_M000_IG53:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG68
 
G_M000_IG54:
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x44]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG11
 
G_M000_IG55:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG87
 
G_M000_IG56:
       cmp      rbx, rax
       ja       G_M000_IG66
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbx]
       mov      edi, eax
       mov      rax, qword ptr [rbp-0x30]
       vmovaps  xmm0, xmmword ptr [rbp-0x40]
       jmp      G_M000_IG12
 
G_M000_IG57:
       mov      dword ptr [rbp-0x44], edi
       lea      ecx, [rdi+D1FFAB1EH]
       test     ecx, 0xD1FFAB1E
       jne      G_M000_IG84
       cmp      r14d, 4
       jl       G_M000_IG83
       vmovaps  xmmword ptr [rbp-0x40], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x44]
       lea      edi, [rax+0x40]
       mov      eax, edi
       and      eax, 3
       shl      eax, 20
       or       eax, 0xD1FFAB1E
       mov      ecx, edi
       and      ecx, 0xD1FFAB1E
       bswap    ecx
       rol      ecx, 16
       or       eax, ecx
       mov      ecx, edi
       shr      ecx, 6
       and      ecx, 0xD1FFAB1E
       or       eax, ecx
       and      edi, 252
       shl      edi, 6
       or       edi, eax
       mov      dword ptr [r15], edi
       add      rbx, 4
 
G_M000_IG58:
       add      r15, 4
       add      r14d, -4
       jmp      G_M000_IG19
 
G_M000_IG59:
       mov      dword ptr [rbp-0x44], edi
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG89
 
G_M000_IG60:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG68
 
G_M000_IG61:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG87
 
G_M000_IG62:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       add      rbx, 2
       add      r15, 2
       jmp      G_M000_IG87
 
G_M000_IG63:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG68
 
G_M000_IG64:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG87
 
G_M000_IG65:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG87
 
G_M000_IG66:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG68
 
G_M000_IG67:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG68:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r13, qword ptr [rbp-0x30]
       sub      r13, rbx
       mov      rdi, r13
       shr      rdi, 63
       add      r13, rdi
       sar      r13, 1
       add      r13d, 2
 
G_M000_IG69:
       test     r13d, r13d
       je       G_M000_IG77
 
G_M000_IG70:
       movzx    rax, word  ptr [rbx]
 
G_M000_IG71:
       cmp      eax, 127
       jbe      G_M000_IG85
 
G_M000_IG72:
       mov      dword ptr [rbp-0x48], eax
       cmp      eax, 0x800
       jae      SHORT G_M000_IG74
 
G_M000_IG73:
       cmp      r14d, 2
       jl       G_M000_IG86
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, dword ptr [rbp-0x48]
       mov      edi, r14d
       and      edi, 63
       or       edi, -128
       mov      byte  ptr [r15+0x01], dil
       mov      eax, r14d
       shr      eax, 6
       or       eax, -64
       mov      byte  ptr [r15], al
       add      rbx, 2
       add      r15, 2
       jmp      SHORT G_M000_IG75
 
G_M000_IG74:
       mov      eax, dword ptr [rbp-0x48]
       lea      edi, [rax-0xD800]
       cmp      edi, 0x7FF
       jbe      G_M000_IG82
       cmp      r14d, 3
       jl       G_M000_IG81
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, dword ptr [rbp-0x48]
       mov      edi, r14d
       and      edi, 63
       or       edi, -128
       mov      byte  ptr [r15+0x02], dil
       mov      edi, r14d
       shr      edi, 6
       and      edi, 63
       or       edi, -128
       mov      byte  ptr [r15+0x01], dil
       mov      edi, r14d
       shr      edi, 12
       or       edi, -32
       mov      byte  ptr [r15], dil
       add      rbx, 2
       add      r15, 3
 
G_M000_IG75:
       cmp      r13d, 1
       jg       SHORT G_M000_IG80
 
G_M000_IG76:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG77:
       xor      r14d, r14d
 
G_M000_IG78:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      qword ptr [r12], rbx
       mov      r12, bword ptr [rbp-0x78]
       mov      qword ptr [r12], r15
       mov      eax, r14d
 
G_M000_IG79:
       add      rsp, 88
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG80:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG87
 
G_M000_IG81:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG87
 
G_M000_IG82:
       cmp      dword ptr [rbp-0x48], 0xDBFF
       ja       SHORT G_M000_IG88
       jmp      G_M000_IG90
 
G_M000_IG83:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG87
 
G_M000_IG84:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG88
 
G_M000_IG85:
       test     r14d, r14d
       je       SHORT G_M000_IG87
       mov      byte  ptr [r15], al
       add      rbx, 2
       inc      r15
       jmp      G_M000_IG75
 
G_M000_IG86:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG87:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, 1
       jmp      G_M000_IG78
 
G_M000_IG88:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, 3
       jmp      G_M000_IG78
 
G_M000_IG89:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       movzx    rdi, word  ptr [rbp-0x44]
       mov      eax, edi
       jmp      G_M000_IG71
 
G_M000_IG90:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, 2
       jmp      G_M000_IG78
 
RWD00  	dq	FF80FF80FF80FF80h, FF80FF80FF80FF80h

; Total bytes of code 2669

; Assembly listing for method System.Text.Ascii:NarrowUtf16ToAscii(ulong,ulong,ulong):ulong (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 254371.5
; 3 inlinees with PGO data; 9 single block inlinees; 13 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x30]
       mov      r15, rdi
       mov      rbx, rsi
       mov      r14, rdx
 
G_M000_IG02:
       xor      r13d, r13d
       cmp      r14, 32
       jb       G_M000_IG17
 
G_M000_IG03:
       mov      r12, qword ptr [r15]
       mov      rdi, 0xD1FFAB1E
       test     r12, rdi
       jne      G_M000_IG16
 
G_M000_IG04:
       cmp      r14, 64
       jb       G_M000_IG35
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r15
       vmovups  ymm0, ymmword ptr [rdi]
       vmovups  ymm1, ymmword ptr [reloc @RWD00]
       vptest   ymm0, ymm1
       jne      G_M000_IG44
       mov      rax, rbx
       vmovups  ymm2, ymmword ptr [reloc @RWD32]
       vpand    ymm0, ymm0, ymm2
       vpackuswb ymm0, ymm0, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [rax], xmm0
       mov      ecx, 16
       test     bl, 16
       jne      SHORT G_M000_IG07
 
G_M000_IG06:
       vmovups  ymm0, ymmword ptr [rdi+0x20]
       vptest   ymm0, ymm1
       jne      SHORT G_M000_IG10
       vpand    ymm0, ymm0, ymm2
       vpackuswb ymm0, ymm0, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [rax+0x10], xmm0
 
G_M000_IG07:
       mov      rcx, rbx
       and      rcx, 31
       neg      rcx
       add      rcx, 32
       lea      rdx, [r14-0x20]
 
G_M000_IG08:
       vmovups  ymm0, ymmword ptr [rdi+2*rcx]
       vmovups  ymm3, ymmword ptr [rdi+2*rcx+0x20]
       vpor     ymm4, ymm0, ymm3
       vptest   ymm4, ymm1
       jne      G_M000_IG37
 
G_M000_IG09:
       vpand    ymm0, ymm0, ymm2
       vpand    ymm3, ymm3, ymm2
       vpackuswb ymm0, ymm0, ymm3
       vpermq   ymm0, ymm0, -40
       vmovups  ymmword ptr [rax+rcx], ymm0
       add      rcx, 32
       cmp      rcx, rdx
       jbe      SHORT G_M000_IG08
 
G_M000_IG10:
       mov      r13, rcx
 
G_M000_IG11:
       sub      r14, r13
       cmp      r14, 4
       jb       G_M000_IG19
 
G_M000_IG12:
       lea      r12, [r13+r14-0x04]
 
G_M000_IG13:
       mov      rdi, qword ptr [r15+2*r13]
       mov      rax, rdi
       mov      rdi, 0xD1FFAB1E
       test     rax, rdi
       jne      G_M000_IG39
 
G_M000_IG14:
       vmovd    xmm0, rax
       vpackuswb xmm0, xmm0, xmm0
       vmovd    dword ptr [rbx+r13], xmm0
       add      r13, 4
       cmp      r13, r12
       ja       SHORT G_M000_IG18
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG13
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r12
       jmp      G_M000_IG39
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG11
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG19:
       test     r14b, 2
       je       SHORT G_M000_IG22
 
G_M000_IG20:
       mov      r12d, dword ptr [r15+2*r13]
       test     r12d, 0xD1FFAB1E
       jne      G_M000_IG42
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rdi, [rbx+r13]
       mov      byte  ptr [rdi], r12b
       shr      r12d, 16
       mov      byte  ptr [rdi+0x01], r12b
       add      r13, 2
 
G_M000_IG22:
       test     r14b, 1
       je       SHORT G_M000_IG26
 
G_M000_IG23:
       movzx    r12, word  ptr [r15+2*r13]
       cmp      r12d, 127
       ja       G_M000_IG34
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG25:
       mov      byte  ptr [rbx+r13], r12b
       inc      r13
 
G_M000_IG26:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r13
 
G_M000_IG27:
       vzeroupper 
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG28:
       mov      rcx, rbx
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx], xmm0
       mov      edx, 8
       test     bl, 8
       jne      SHORT G_M000_IG30
 
G_M000_IG29:
       vmovups  xmm0, xmmword ptr [rax+0x10]
       vptest   xmm0, xmm1
       jne      SHORT G_M000_IG32
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx+0x08], xmm0
 
G_M000_IG30:
       mov      rdx, rbx
       and      rdx, 15
       mov      edi, 16
       sub      rdi, rdx
       mov      rdx, rdi
       mov      rdi, r14
       sub      rdi, 16
 
G_M000_IG31:
       vmovups  xmm0, xmmword ptr [rax+2*rdx]
       vmovups  xmm2, xmmword ptr [rax+2*rdx+0x10]
       vpor     xmm3, xmm0, xmm2
       vptest   xmm3, xmm1
       jne      G_M000_IG46
       vpackuswb xmm0, xmm0, xmm2
       vmovups  xmmword ptr [rcx+rdx], xmm0
       add      rdx, 16
       cmp      rdx, rdi
       jbe      SHORT G_M000_IG31
 
G_M000_IG32:
       mov      r13, rdx
 
G_M000_IG33:
       jmp      G_M000_IG11
 
G_M000_IG34:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG26
 
G_M000_IG35:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r15
       vmovups  xmm0, xmmword ptr [rax]
       vmovups  xmm1, xmmword ptr [reloc @RWD00]
       vptest   xmm0, xmm1
       jne      G_M000_IG45
 
G_M000_IG36:
       jmp      G_M000_IG28
 
G_M000_IG37:
       vptest   ymm0, ymm1
       jne      G_M000_IG10
 
G_M000_IG38:
       vpand    ymm1, ymm0, ymm2
       vpand    ymm0, ymm0, ymm2
       vpackuswb ymm0, ymm1, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [rax+rcx], xmm0
       add      rcx, 16
       jmp      G_M000_IG10
 
G_M000_IG39:
       mov      qword ptr [rbp-0x30], rax
       mov      r12d, eax
       test     r12d, 0xD1FFAB1E
       je       SHORT G_M000_IG41
 
G_M000_IG40:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG42
 
G_M000_IG41:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rdi, [rbx+r13]
       mov      byte  ptr [rdi], r12b
       mov      eax, r12d
       shr      eax, 16
       mov      byte  ptr [rdi+0x01], al
       mov      r12, qword ptr [rbp-0x30]
       shr      r12, 32
       add      r13, 2
 
G_M000_IG42:
       test     r12d, 0xFF80
       jne      SHORT G_M000_IG43
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG25
 
G_M000_IG43:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG26
 
G_M000_IG44:
       xor      r13d, r13d
       jmp      G_M000_IG11
 
G_M000_IG45:
       xor      r13d, r13d
       jmp      G_M000_IG33
 
G_M000_IG46:
       vptest   xmm0, xmm1
       jne      G_M000_IG32
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx+rdx], xmm0
       add      rdx, 8
       jmp      G_M000_IG32
 
RWD00  	dq	FF80FF80FF80FF80h, FF80FF80FF80FF80h, FF80FF80FF80FF80h, FF80FF80FF80FF80h
RWD32  	dq	00FF00FF00FF00FFh, 00FF00FF00FF00FFh, 00FF00FF00FF00FFh, 00FF00FF00FF00FFh

; Total bytes of code 952

; Assembly listing for method System.ConsolePal+UnixConsoleStream:Write(System.ReadOnlySpan`1[ubyte]):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; fully interruptible
; No PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      rdi, gword ptr [rdi+0x18]
       mov      ecx, 1
 
G_M000_IG03:
       tail.jmp [System.ConsolePal:Write(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlySpan`1[ubyte],bool)]
 
; Total bytes of code 15

; Assembly listing for method System.ConsolePal:Write(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlySpan`1[ubyte],bool) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 107
; 2 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 40
       lea      rbp, [rsp+0x50]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      r14, rdi
       mov      r13, rsi
       mov      r15d, edx
       mov      ebx, ecx
 
G_M000_IG02:
       cmp      byte  ptr [(reloc)], 0
       je       G_M000_IG10
 
G_M000_IG03:
       xor      rdi, rdi
       test     r15d, r15d
       cmovne   rdi, r13
       mov      bword ptr [rbp-0x30], rdi
       mov      r13, rdi
       test     r15d, r15d
       jle      SHORT G_M000_IG08
 
G_M000_IG04:
       test     bl, bl
       je       G_M000_IG15
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12d, dword ptr [(reloc)]
 
G_M000_IG05:
       mov      rdi, r14
       mov      rsi, r13
       mov      edx, r15d
       call     [Interop+Sys:Write(System.Runtime.InteropServices.SafeHandle,ulong,int):int]
       mov      dword ptr [rbp-0x34], eax
       test     eax, eax
       jl       SHORT G_M000_IG11
       test     bl, bl
       je       SHORT G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r13
       mov      esi, dword ptr [rbp-0x34]
       mov      edx, r12d
       call     [System.ConsolePal:UpdatedCachedCursorPosition(ulong,int,int)]
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12d, dword ptr [rbp-0x34]
       sub      r15d, r12d
       movsxd   rdi, r12d
       add      r13, rdi
 
G_M000_IG07:
       test     r15d, r15d
       jg       SHORT G_M000_IG04
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      eax, eax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG09:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      G_M000_IG03
 
G_M000_IG11:
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r12d, eax
       mov      edi, r12d
       call     Interop+Sys:ConvertErrorPlatformToPal(int):int
       cmp      eax, 0x10043
       je       SHORT G_M000_IG12
       cmp      eax, 0x10006
       jne      SHORT G_M000_IG14
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rcx, [rbp-0x40]
       mov      rdi, r14
       mov      esi, 4
       mov      edx, -1
       call     [Interop+Sys:Poll(System.Runtime.InteropServices.SafeHandle,short,int,byref):int]
       jmp      SHORT G_M000_IG07
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG13:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG14:
       mov      dword ptr [rbp-0x48], eax
       mov      dword ptr [rbp-0x44], r12d
       mov      rdi, qword ptr [rbp-0x48]
       xor      rsi, rsi
       xor      edx, edx
       call     [Interop:GetExceptionForIoErrno(Interop+ErrorInfo,System.String,bool):System.Exception]
       mov      rdi, rax
       call     CORINFO_HELP_THROW
 
G_M000_IG15:
       mov      r12d, -1
       jmp      G_M000_IG05
 
; Total bytes of code 377

; Assembly listing for method System.ReadOnlySpan`1[ubyte]:GetPinnableReference():byref:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rsp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 141401

G_M000_IG01:
       push     r15
       push     rbx
       push     rax
       mov      rbx, rdi
 
G_M000_IG02:
       xor      r15, r15
       cmp      dword ptr [rbx+0x08], 0
       je       SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15, bword ptr [rbx]
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r15
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      r15
       ret      
 
; Total bytes of code 60

; Assembly listing for method Interop+Sys:Write(System.Runtime.InteropServices.SafeHandle,ulong,int):int (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 107
; 1 inlinees with PGO data; 6 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 104
       vzeroupper 
       lea      rbp, [rsp+0x90]
       xor      ecx, ecx
       mov      qword ptr [rbp-0x38], rcx
       mov      qword ptr [rbp-0x90], rsp
       mov      rbx, rdi
       mov      r15, rsi
       mov      r14d, edx
 
G_M000_IG02:
       lea      rdi, [rbp-0x78]
       mov      rsi, r10
       call     CORINFO_HELP_INIT_PINVOKE_FRAME
       mov      r13, rax
       mov      rsi, rsp
       mov      qword ptr [rbp-0x58], rsi
       mov      rsi, rbp
       mov      qword ptr [rbp-0x48], rsi
       vxorps   xmm2, xmm2, xmm2
       vmovdqu  xmmword ptr [rbp-0x38], xmm2
 
G_M000_IG03:
       mov      gword ptr [rbp-0x38], rbx
       lea      rsi, [rbp-0x30]
       mov      rdi, rbx
       cmp      dword ptr [rdi], edi
       call     [System.Runtime.InteropServices.SafeHandle:DangerousAddRef(byref):this]
       mov      rdi, gword ptr [rbp-0x38]
       mov      rbx, qword ptr [rdi+0x08]
       xor      edi, edi
       mov      rax, 0xD1FFAB1E
 
G_M000_IG04:
       call     rax ; Interop+Sys:SetErrNo(int)
       mov      rdi, rbx
       mov      rsi, r15
       mov      edx, r14d
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x68], rax
       lea      rax, G_M000_IG07
       mov      qword ptr [rbp-0x50], rax
       lea      rax, bword ptr [rbp-0x78]
       mov      qword ptr [r13+0x10], rax
       mov      byte  ptr [r13+0x0C], 0
 
G_M000_IG05:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG06:
       call     rax ; Interop+Sys:<Write>g____PInvoke|37_0(long,ulong,int):int
 
G_M000_IG07:
       mov      byte  ptr [r13+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG08
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG08:
       mov      rcx, bword ptr [rbp-0x70]
       mov      qword ptr [r13+0x10], rcx
       mov      ebx, eax
       mov      rax, 0xD1FFAB1E
 
G_M000_IG09:
       call     rax ; Interop+Sys:GetErrNo():int
       mov      r15d, eax
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG12
 
G_M000_IG11:
       mov      rdi, gword ptr [rbp-0x38]
       cmp      byte  ptr [rdi], dil
       xor      esi, esi
       call     [System.Runtime.InteropServices.SafeHandle:InternalRelease(bool):this]
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, r15d
       call     System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
       mov      eax, ebx
 
G_M000_IG13:
       add      rsp, 104
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG14:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       vzeroupper 
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x90]
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG16
       mov      rdi, gword ptr [rbp-0x38]
       cmp      byte  ptr [rdi], dil
       xor      esi, esi
       call     [System.Runtime.InteropServices.SafeHandle:InternalRelease(bool):this]
 
G_M000_IG16:
       nop      
 
G_M000_IG17:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 386

; Assembly listing for method System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller`1+ManagedToUnmanagedIn[System.__Canon]:FromManaged(System.__Canon):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; fully interruptible
; No PGO data

G_M000_IG01:
       push     r15
       push     rbx
       mov      rbx, rdi
       mov      r15, rdx
 
G_M000_IG02:
       mov      rdi, rbx
       mov      rsi, r15
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       lea      rsi, bword ptr [rbx+0x08]
       mov      rdi, r15
       cmp      dword ptr [rdi], edi
 
G_M000_IG03:
       pop      rbx
       pop      r15
       tail.jmp [System.Runtime.InteropServices.SafeHandle:DangerousAddRef(byref):this]
 
; Total bytes of code 38

; Assembly listing for method System.Runtime.InteropServices.SafeHandle:DangerousAddRef(byref):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 604850
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       lea      rbp, [rsp+0x20]
       mov      rbx, rdi
       mov      r15, rsi
 
G_M000_IG02:
       mov      eax, dword ptr [rbx+0x10]
       test     al, 1
       jne      SHORT G_M000_IG07
 
G_M000_IG03:
       lea      rdi, bword ptr [rbx+0x10]
       lea      ecx, [rax+0x04]
       mov      dword ptr [rbp-0x14], eax
       lock     
       cmpxchg  dword ptr [rdi], ecx
       cmp      eax, dword ptr [rbp-0x14]
       jne      SHORT G_M000_IG06
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      byte  ptr [r15], 1
 
G_M000_IG05:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbx+0x10]
       test     al, 1
       je       SHORT G_M000_IG03
 
G_M000_IG07:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
; Total bytes of code 105

; Assembly listing for method System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller`1+ManagedToUnmanagedIn[System.__Canon]:ToUnmanaged():long:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      rax, gword ptr [rdi]
       mov      rax, qword ptr [rax+0x08]
 
G_M000_IG03:
       ret      
 
; Total bytes of code 8

; Assembly listing for method System.Runtime.InteropServices.Marshal:SetLastSystemError(int) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG03:
       call     rax ; Interop+Sys:SetErrNo(int)
       cmp      dword ptr [(reloc)], 0
       jne      SHORT G_M000_IG05
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       call     CORINFO_HELP_POLL_GC
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 34

; Assembly listing for method System.Runtime.InteropServices.Marshal:GetLastSystemError():int (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       cmp      dword ptr [(reloc)], 0
       jne      SHORT G_M000_IG06
 
G_M000_IG03:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG04:
       call     rax ; Interop+Sys:GetErrNo():int
       nop      
 
G_M000_IG05:
       pop      rbp
       ret      
 
G_M000_IG06:
       call     CORINFO_HELP_POLL_GC
       jmp      SHORT G_M000_IG03
 
; Total bytes of code 35

; Assembly listing for method System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller`1+ManagedToUnmanagedIn[System.__Canon]:Free():this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 512660
; 2 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     rbx
       lea      rbp, [rsp+0x20]
       mov      rbx, rdi
 
G_M000_IG02:
       cmp      byte  ptr [rbx+0x08], 0
       je       SHORT G_M000_IG11
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rbx, gword ptr [rbx]
       cmp      byte  ptr [rbx], bl
 
G_M000_IG04:
       mov      r15d, dword ptr [rbx+0x10]
       mov      r14d, r15d
       and      r14d, -4
       je       G_M000_IG20
 
G_M000_IG05:
       mov      eax, r15d
       and      eax, -3
       cmp      eax, 4
       je       SHORT G_M000_IG12
 
G_M000_IG06:
       xor      r13d, r13d
 
G_M000_IG07:
       movzx    rcx, r13b
       lea      edx, [r15-0x04]
       cmp      r14d, 4
       jne      SHORT G_M000_IG08
       or       edx, 1
 
G_M000_IG08:
       lea      rdi, bword ptr [rbx+0x10]
       mov      eax, r15d
       lock     
       cmpxchg  dword ptr [rdi], edx
       cmp      eax, r15d
       jne      SHORT G_M000_IG04
 
G_M000_IG09:
       test     ecx, ecx
       jne      SHORT G_M000_IG14
 
G_M000_IG10:
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG10
 
G_M000_IG12:
       cmp      byte  ptr [rbx+0x14], 0
       je       SHORT G_M000_IG06
 
G_M000_IG13:
       jmp      SHORT G_M000_IG16
 
G_M000_IG14:
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r13d, eax
       mov      rdi, 0xD1FFAB1E
       cmp      qword ptr [rbx], rdi
       jne      SHORT G_M000_IG17
 
G_M000_IG15:
       mov      rdi, rbx
       call     [Microsoft.Win32.SafeHandles.SafeFileHandle:ReleaseHandle():bool:this]
       jmp      SHORT G_M000_IG18
 
G_M000_IG16:
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x20]System.Runtime.InteropServices.SafeHandle:get_IsInvalid():bool:this
       xor      r13d, r13d
       test     eax, eax
       sete     r13b
       jmp      G_M000_IG07
 
G_M000_IG17:
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x38]System.Runtime.InteropServices.SafeHandle:ReleaseHandle():bool:this
 
G_M000_IG18:
       mov      edi, r13d
 
G_M000_IG19:
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       jmp      System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
 
G_M000_IG20:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
; Total bytes of code 259

; Assembly listing for method System.Runtime.InteropServices.SafeHandle:InternalRelease(bool):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 661955
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      rbx, rdi
       mov      r15d, esi
 
G_M000_IG02:
       mov      r14d, dword ptr [rbx+0x10]
       movzx    r13, r15b
       test     r13d, r13d
       jne      G_M000_IG11
 
G_M000_IG03:
       mov      r12d, r14d
       and      r12d, -4
       je       G_M000_IG23
       mov      edi, r14d
       and      edi, -3
       cmp      edi, 4
       je       G_M000_IG17
 
G_M000_IG04:
       xor      eax, eax
 
G_M000_IG05:
       movzx    rax, al
       mov      dword ptr [rbp-0x2C], eax
       lea      ecx, [r14-0x04]
       mov      dword ptr [rbp-0x30], ecx
       cmp      r12d, 4
       je       G_M000_IG15
 
G_M000_IG06:
       test     r13d, r13d
       jne      G_M000_IG16
 
G_M000_IG07:
       lea      rdi, bword ptr [rbx+0x10]
       mov      ecx, dword ptr [rbp-0x30]
       mov      eax, r14d
       lock     
       cmpxchg  dword ptr [rdi], ecx
       cmp      eax, r14d
       jne      SHORT G_M000_IG10
 
G_M000_IG08:
       cmp      dword ptr [rbp-0x2C], 0
       jne      SHORT G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG09:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG02
 
G_M000_IG11:
       test     r14b, 2
       je       G_M000_IG19
 
G_M000_IG12:
       jmp      G_M000_IG21
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r15d, eax
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x38]System.Runtime.InteropServices.SafeHandle:ReleaseHandle():bool:this
       mov      edi, r15d
 
G_M000_IG14:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       jmp      System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12d, dword ptr [rbp-0x30]
       or       r12d, 1
       mov      dword ptr [rbp-0x30], r12d
       jmp      G_M000_IG06
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12d, dword ptr [rbp-0x30]
       or       r12d, 2
       mov      dword ptr [rbp-0x30], r12d
       jmp      G_M000_IG07
 
G_M000_IG17:
       cmp      byte  ptr [rbx+0x14], 0
       je       SHORT G_M000_IG20
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x20]System.Runtime.InteropServices.SafeHandle:get_IsInvalid():bool:this
       test     eax, eax
       sete     al
       movzx    rax, al
       jmp      G_M000_IG05
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG03
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG04
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG22:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG23:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
; Total bytes of code 493

; Assembly listing for method System.ConsolePal:UpdatedCachedCursorPosition(ulong,int,int) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 107
; 1 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 72
       lea      rbp, [rsp+0x70]
       mov      qword ptr [rbp-0x70], rsp
       mov      r14, rdi
       mov      r15d, esi
       mov      ebx, edx
 
G_M000_IG02:
       call     [System.Console:get_Out():System.IO.TextWriter]
       mov      gword ptr [rbp-0x60], rax
       xor      esi, esi
       mov      dword ptr [rbp-0x30], esi
 
G_M000_IG03:
       cmp      byte  ptr [rbp-0x30], 0
       jne      SHORT G_M000_IG07
       lea      rsi, [rbp-0x30]
       mov      rdi, rax
       call     System.Threading.Monitor:ReliableEnter(System.Object,byref)
       cmp      ebx, dword ptr [(reloc)]
       jne      SHORT G_M000_IG06
       lea      rdi, [rbp-0x38]
       lea      rsi, [rbp-0x40]
       call     [System.ConsolePal:TryGetCachedCursorPosition(byref,byref):bool]
       test     eax, eax
       jne      SHORT G_M000_IG05
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG06
 
G_M000_IG05:
       cmp      r15d, 255
       jle      SHORT G_M000_IG08
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG06:
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       jmp      G_M000_IG20
 
G_M000_IG07:
       call     [System.Threading.Monitor:ThrowLockTakenException()]
       int3     
 
G_M000_IG08:
       lea      rdi, [rbp-0x48]
       lea      rsi, [rbp-0x50]
       call     [System.ConsolePal:GetWindowSize(byref,byref)]
       xor      r13d, r13d
       jmp      G_M000_IG19
 
G_M000_IG09:
       movsxd   rdi, r13d
       movzx    r12, byte  ptr [r14+rdi]
       cmp      r12d, 127
       jge      SHORT G_M000_IG12
       cmp      r12d, 32
       jl       SHORT G_M000_IG11
       mov      edi, dword ptr [rbp-0x38]
       inc      edi
       mov      dword ptr [rbp-0x38], edi
       mov      edi, dword ptr [rbp-0x38]
       cmp      edi, dword ptr [rbp-0x48]
       jl       SHORT G_M000_IG10
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       jmp      G_M000_IG20
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG18
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG12:
       cmp      r12d, 13
       jne      SHORT G_M000_IG13
       xor      edi, edi
       mov      dword ptr [rbp-0x38], edi
       jmp      G_M000_IG18
 
G_M000_IG13:
       cmp      r12d, 10
       jne      SHORT G_M000_IG15
       xor      edi, edi
       mov      dword ptr [rbp-0x38], edi
       mov      edi, dword ptr [rbp-0x40]
       inc      edi
       mov      dword ptr [rbp-0x40], edi
       mov      edi, dword ptr [rbp-0x40]
       cmp      edi, dword ptr [rbp-0x50]
       jl       SHORT G_M000_IG14
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x50]
       dec      edi
       mov      dword ptr [rbp-0x40], edi
       jmp      SHORT G_M000_IG18
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG18
 
G_M000_IG15:
       cmp      r12d, 8
       jne      SHORT G_M000_IG17
       cmp      dword ptr [rbp-0x38], 0
       jle      SHORT G_M000_IG16
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x38]
       dec      edi
       mov      dword ptr [rbp-0x38], edi
       jmp      SHORT G_M000_IG18
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG18
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       jmp      SHORT G_M000_IG20
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       inc      r13d
 
G_M000_IG19:
       cmp      r13d, r15d
       jl       G_M000_IG09
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x40]
       mov      byte  ptr [rbp-0x58], 1
       mov      dword ptr [rbp-0x54], ebx
       mov      rdx, qword ptr [rbp-0x58]
       call     [System.ConsolePal:SetCachedCursorPosition(int,int,System.Nullable`1[int])]
       nop      
 
G_M000_IG20:
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG21
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x60]
       call     System.Threading.Monitor:Exit(System.Object)
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG22:
       add      rsp, 72
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG23:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x70]
 
G_M000_IG24:
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG25
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x60]
       call     System.Threading.Monitor:Exit(System.Object)
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG26:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 655

; Assembly listing for method System.Threading.Monitor:Enter(System.Object,byref) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 1919720

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       lea      rbp, [rsp+0x10]
       mov      r15, rdi
       mov      rbx, rsi
 
G_M000_IG02:
       cmp      byte  ptr [rbx], 0
       jne      SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r15
       mov      rsi, rbx
 
G_M000_IG03:
       pop      rbx
       pop      r15
       pop      rbp
       jmp      System.Threading.Monitor:ReliableEnter(System.Object,byref)
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.Threading.Monitor:ThrowLockTakenException()]
       int3     
 
; Total bytes of code 72

; Assembly listing for method System.ConsolePal:TryGetCachedCursorPosition(byref,byref):bool (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 107

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      rbx, rdi
       mov      r15, rsi
 
G_M000_IG02:
       call     [System.ConsolePal:CheckTerminalSettingsInvalidated()]
       xor      r14d, r14d
       cmp      dword ptr [(reloc)], 0
       setge    r14b
       test     r14d, r14d
       jne      SHORT G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      edi, edi
       mov      dword ptr [rbx], edi
 
G_M000_IG03:
       mov      dword ptr [r15], edi
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, r14d
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      eax, dword ptr [(reloc)]
       mov      dword ptr [rbx], eax
       mov      eax, dword ptr [(reloc)]
       mov      dword ptr [r15], eax
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 113

; Assembly listing for method System.ConsolePal:CheckTerminalSettingsInvalidated() (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 112
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       cmp      byte  ptr [(reloc)], 0
       je       SHORT G_M000_IG07
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       xor      ecx, ecx
       mov      eax, 1
       lock     
       cmpxchg  dword ptr [rdi], ecx
       xor      edi, edi
       cmp      eax, 1
       sete     dil
       test     edi, edi
       jne      SHORT G_M000_IG06
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG05:
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       mov      dword ptr [(reloc)], -1
       jmp      SHORT G_M000_IG04
 
G_M000_IG07:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      SHORT G_M000_IG03
 
; Total bytes of code 106

; Assembly listing for method System.ConsolePal:InvalidateCachedCursorPosition() (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      dword ptr [(reloc)], -1
       mov      rax, 0xD1FFAB1E
       inc      dword ptr [rax]
 
G_M000_IG03:
       ret      
 
; Total bytes of code 23

; Assembly listing for method System.ConsolePal+UnixConsoleStream:Flush():this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rax
 
G_M000_IG02:
       mov      rax, gword ptr [rdi+0x18]
       test     byte  ptr [rax+0x10], 1
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       add      rsp, 8
       ret      
 
G_M000_IG04:
       call     [System.IO.Error:GetFileNotOpen():System.Exception]
       mov      rdi, rax
       call     CORINFO_HELP_THROW
       int3     
 
; Total bytes of code 31

; Assembly listing for method System.Runtime.InteropServices.SafeHandle:get_IsClosed():bool:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x10]
       and      eax, 1
 
G_M000_IG03:
       ret      
 
; Total bytes of code 7

; Assembly listing for method System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, qword ptr [rdi]
       shr      rax, 32
       mov      edx, dword ptr [rdi]
       mov      rcx, qword ptr [rsi]
       shr      rcx, 32
       mov      r8d, dword ptr [rsi]
       mov      r9d, eax
       mov      r10d, ecx
       imul     r9, r10
       mov      r10d, edx
       mov      ecx, ecx
       imul     rcx, r10
       mov      eax, eax
       mov      r10d, r8d
       imul     rax, r10
       imul     rdx, r8
       shr      rdx, 32
       mov      r8d, eax
       add      rdx, r8
       mov      r8d, ecx
       add      rdx, r8
       mov      r8d, 0xD1FFAB1E
       add      rdx, r8
       mov      edi, dword ptr [rdi+0x08]
       mov      esi, dword ptr [rsi+0x08]
       lea      edi, [rdi+rsi+0x40]
       shr      rax, 32
       add      rax, r9
       shr      rcx, 32
       add      rax, rcx
       shr      rdx, 32
       add      rax, rdx
       mov      edx, edi
 
G_M000_IG03:
       pop      rbp
       ret      
 
; Total bytes of code 115

; Assembly listing for method System.Console:get_Out():System.IO.TextWriter (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rsp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 123

G_M000_IG01:
 
G_M000_IG02:
       mov      rax, 0xD1FFAB1E
       mov      rax, gword ptr [rax]
       test     rax, rax
       je       SHORT G_M000_IG04
 
G_M000_IG03:
       ret      
 
G_M000_IG04:
       tail.jmp [System.Console:<get_Out>g__EnsureInitialized|26_0():System.IO.TextWriter]
 
; Total bytes of code 25

; Assembly listing for method System.Console:WriteLine(double) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x10]
       vmovsd   qword ptr [rbp-0x10], xmm0
 
G_M000_IG02:
       call     [System.Console:get_Out():System.IO.TextWriter]
       mov      rbx, rax
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       vmovsd   xmm0, qword ptr [rbp-0x10]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x20]System.IO.TextWriter:WriteLine(double):this
       nop      
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
; Total bytes of code 69

; Assembly listing for method System.IO.TextWriter+SyncTextWriter:WriteLine(double):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 32
       vzeroupper 
       lea      rbp, [rsp+0x30]
       xor      eax, eax
       mov      qword ptr [rbp-0x28], rax
       mov      qword ptr [rbp-0x30], rsp
       vmovsd   qword ptr [rbp-0x20], xmm0
       mov      rbx, rdi
 
G_M000_IG02:
       xor      esi, esi
       mov      qword ptr [rbp-0x18], rsi
 
G_M000_IG03:
       mov      gword ptr [rbp-0x28], rbx
       lea      rsi, [rbp-0x18]
       mov      rdi, rbx
       call     CORINFO_HELP_MON_ENTER
       mov      r15, gword ptr [rbx+0x20]
       mov      rdi, r15
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r15
       vmovsd   xmm0, qword ptr [rbp-0x20]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x20]System.IO.TextWriter:WriteLine(double):this
       lea      rsi, [rbp-0x18]
       mov      rdi, rbx
       call     CORINFO_HELP_MON_EXIT
       nop      
 
G_M000_IG04:
       add      rsp, 32
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       vzeroupper 
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x30]
 
G_M000_IG06:
       lea      rsi, [rbp-0x18]
       mov      rdi, gword ptr [rbp-0x28]
       call     CORINFO_HELP_MON_EXIT
       nop      
 
G_M000_IG07:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 163

; Assembly listing for method System.IO.TextWriter:WriteLine(double):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       vzeroupper 
       lea      rbp, [rsp+0x20]
       vmovsd   qword ptr [rbp-0x18], xmm0
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      r15, rbx
       mov      rdi, rbx
       vmovsd   xmm0, qword ptr [rbp-0x18]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x58]
       call     [rax]System.IO.TextWriter:Write(double):this
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r15
       mov      rax, qword ptr [r15]
       mov      rax, qword ptr [rax+0x60]
 
G_M000_IG03:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       tail.jmp [rax+0x08]System.IO.TextWriter:WriteLine():this
 
; Total bytes of code 102

; Assembly listing for method System.IO.TextWriter:Write(double):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 1 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       vzeroupper 
       lea      rbp, [rsp+0x20]
       vmovsd   qword ptr [rbp-0x18], xmm0
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x28]System.IO.TextWriter:get_FormatProvider():System.IFormatProvider:this
       vmovsd   xmm0, qword ptr [rbp-0x18]
       vmovsd   qword ptr [rbp-0x20], xmm0
       test     rax, rax
       jne      SHORT G_M000_IG06
 
G_M000_IG03:
       call     [System.Globalization.NumberFormatInfo:get_CurrentInfo():System.Globalization.NumberFormatInfo]
       mov      r15, rax
 
G_M000_IG04:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       vmovsd   xmm0, qword ptr [rbp-0x20]
       mov      rsi, r15
       xor      rdi, rdi
       call     [System.Number:FormatDouble(double,System.String,System.Globalization.NumberFormatInfo):System.String]
       mov      rsi, rax
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x58]
       call     [rax+0x10]System.IO.TextWriter:Write(System.String):this
       nop      
 
G_M000_IG05:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      rdi, rax
       call     [System.Globalization.NumberFormatInfo:<GetInstance>g__GetProviderNonNull|58_0(System.IFormatProvider):System.Globalization.NumberFormatInfo]
       mov      r15, rax
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 153

; Assembly listing for method System.IO.TextWriter:get_FormatProvider():System.IFormatProvider:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; fully interruptible
; No PGO data

G_M000_IG01:
       push     rbx
 
G_M000_IG02:
       mov      rbx, gword ptr [rdi+0x18]
       test     rbx, rbx
       jne      SHORT G_M000_IG05
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG04:
       pop      rbx
       tail.jmp [System.Globalization.CultureInfo:get_CurrentCulture():System.Globalization.CultureInfo]
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG06:
       pop      rbx
       ret      
 
; Total bytes of code 68

; Assembly listing for method System.Globalization.CultureInfo:get_CurrentCulture():System.Globalization.CultureInfo (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 378167

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      rdi, 0xD1FFAB1E
       mov      rax, 0xD1FFAB1E
       call     rax
       cmp      dword ptr [rax+0x10], 2
       jl       SHORT G_M000_IG09
       mov      rdi, qword ptr [rax+0x18]
       mov      rdi, qword ptr [rdi+0x10]
       test     rdi, rdi
       je       SHORT G_M000_IG09
       mov      rax, bword ptr [rdi]
       add      rax, 16
 
G_M000_IG03:
       mov      rbx, gword ptr [rax+0x10]
       test     rbx, rbx
       jne      SHORT G_M000_IG06
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       mov      rbx, gword ptr [rdi]
       test     rbx, rbx
       jne      SHORT G_M000_IG08
       mov      rdi, 0xD1FFAB1E
       mov      rbx, gword ptr [rdi]
       test     rbx, rbx
       je       SHORT G_M000_IG10
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG07:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG06
 
G_M000_IG09:
       mov      edi, 2
       call     CORINFO_HELP_GETSHARED_GCTHREADSTATIC_BASE_NOCTOR_OPTIMIZED
       jmp      SHORT G_M000_IG03
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG11:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [System.Globalization.CultureInfo:InitializeUserDefaultCulture():System.Globalization.CultureInfo]
 
; Total bytes of code 213

; Assembly listing for method System.Globalization.NumberFormatInfo:<GetInstance>g__GetProviderNonNull|58_0(System.IFormatProvider):System.Globalization.NumberFormatInfo (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 107210

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rsi, rbx
       mov      rdi, 0xD1FFAB1E
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       mov      r15, rax
       test     r15, r15
       je       SHORT G_M000_IG06
 
G_M000_IG03:
       cmp      byte  ptr [r15+0x61], 0
       jne      SHORT G_M000_IG05
       mov      rbx, gword ptr [r15+0x18]
       test     rbx, rbx
       je       SHORT G_M000_IG11
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG04:
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG06:
       mov      rdi, rbx
       test     rdi, rdi
       je       SHORT G_M000_IG08
 
G_M000_IG07:
       mov      rax, 0xD1FFAB1E
       xor      rcx, rcx
       cmp      qword ptr [rdi], rax
       cmovne   rdi, rcx
 
G_M000_IG08:
       mov      r15, rdi
       test     r15, r15
       je       SHORT G_M000_IG14
 
G_M000_IG09:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r15
 
G_M000_IG10:
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r15
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, r15
       mov      rax, qword ptr [r15]
       mov      rax, qword ptr [rax+0x50]
 
G_M000_IG12:
       pop      rbx
       pop      r15
       pop      rbp
       tail.jmp [rax+0x10]System.Globalization.CultureInfo:get_NumberFormat():System.Globalization.NumberFormatInfo:this
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG09
 
G_M000_IG14:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      r11, 0xD1FFAB1E
       mov      rsi, 0xD1FFAB1E
       call     [r11]System.IFormatProvider:GetFormat(System.Type):System.Object:this
       mov      rsi, rax
       mov      rdi, 0xD1FFAB1E
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       mov      r15, rax
       test     r15, r15
       jne      SHORT G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       nop      
 
G_M000_IG15:
       pop      rbx
       pop      r15
       pop      rbp
       tail.jmp [System.Globalization.NumberFormatInfo:get_CurrentInfo():System.Globalization.NumberFormatInfo]
 
; Total bytes of code 346

; Assembly listing for method System.Runtime.CompilerServices.CastHelpers:IsInstanceOfClass(ulong,System.Object):System.Object (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1.978945e+07
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      r15, rdi
       mov      rbx, rsi
 
G_M000_IG02:
       test     rbx, rbx
       je       SHORT G_M000_IG05
 
G_M000_IG03:
       cmp      qword ptr [rbx], r15
       jne      SHORT G_M000_IG07
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG06:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG07:
       mov      rdi, qword ptr [rbx]
       mov      r14, qword ptr [rdi+0x10]
 
G_M000_IG08:
       cmp      r14, r15
       je       SHORT G_M000_IG19
 
G_M000_IG09:
       test     r14, r14
       je       SHORT G_M000_IG18
 
G_M000_IG10:
       mov      r14, qword ptr [r14+0x10]
       cmp      r14, r15
       je       G_M000_IG21
 
G_M000_IG11:
       test     r14, r14
       je       G_M000_IG22
 
G_M000_IG12:
       mov      r14, qword ptr [r14+0x10]
       cmp      r14, r15
       je       G_M000_IG23
 
G_M000_IG13:
       test     r14, r14
       je       G_M000_IG24
 
G_M000_IG14:
       mov      r14, qword ptr [r14+0x10]
       cmp      r14, r15
       je       G_M000_IG25
 
G_M000_IG15:
       test     r14, r14
       jne      SHORT G_M000_IG17
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG18
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14, qword ptr [r14+0x10]
       jmp      SHORT G_M000_IG08
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      rbx, rbx
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, rbx
 
G_M000_IG20:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG19
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG18
 
G_M000_IG23:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG19
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG18
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG19
 
; Total bytes of code 320

; Assembly listing for method System.Number:FormatDouble(double,System.String,System.Globalization.NumberFormatInfo):System.String (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 77
; 3 inlinees with PGO data; 9 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 64
       vzeroupper 
       lea      rbp, [rsp+0x50]
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       vmovdqa  xmmword ptr [rbp-0x30], xmm8
       vmovdqa  xmmword ptr [rbp-0x20], xmm8
       mov      qword ptr [rbp-0x48], 0xD1FFAB1E
       mov      rcx, rsi
 
G_M000_IG02:
       test     dword ptr [rsp], esp
       sub      rsp, 64
       lea      rsi, [rsp]
       mov      bword ptr [rbp-0x20], rsi
       mov      dword ptr [rbp-0x18], 32
       xor      rsi, rsi
       mov      gword ptr [rbp-0x30], rsi
 
G_M000_IG03:
       mov      dword ptr [rbp-0x28], esi
       test     rdi, rdi
       jne      SHORT G_M000_IG04
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       lea      rsi, bword ptr [rdi+0x0C]
       mov      edx, dword ptr [rdi+0x08]
 
G_M000_IG05:
       lea      rdi, [rbp-0x30]
       call     [System.Number:FormatDouble[ushort](byref,double,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo):System.String]
       mov      rbx, rax
       test     rbx, rbx
       jne      SHORT G_M000_IG06
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x28]
       cmp      edi, dword ptr [rbp-0x18]
       ja       SHORT G_M000_IG10
       mov      rax, bword ptr [rbp-0x20]
       mov      bword ptr [rbp-0x40], rax
       mov      dword ptr [rbp-0x38], edi
       lea      rdi, [rbp-0x40]
       call     [System.ReadOnlySpan`1[ushort]:ToString():System.String:this]
       mov      rbx, rax
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15, gword ptr [rbp-0x30]
       test     r15, r15
       jne      SHORT G_M000_IG11
 
G_M000_IG07:
       mov      rax, rbx
       cmp      qword ptr [rbp-0x48], 0xD1FFAB1E
       je       SHORT G_M000_IG08
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG08:
       nop      
 
G_M000_IG09:
       lea      rsp, [rbp-0x10]
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       call     [System.ThrowHelper:ThrowArgumentOutOfRangeException()]
       int3     
 
G_M000_IG11:
       xor      rdi, rdi
       mov      gword ptr [rbp-0x30], rdi
       mov      rdi, 0xD1FFAB1E
       mov      esi, 9
       call     CORINFO_HELP_CLASSINIT_SHARED_DYNAMICCLASS
       mov      rdi, 0xD1FFAB1E
       mov      rdi, gword ptr [rdi]
       mov      rsi, r15
       xor      edx, edx
       cmp      dword ptr [rdi], edi
       call     [System.Buffers.SharedArrayPool`1[ushort]:Return(ushort[],bool):this]
       jmp      SHORT G_M000_IG07
 
; Total bytes of code 274

; Assembly listing for method System.Number:FormatDouble[ushort](byref,double,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo):System.String (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1091
; 2 inlinees with PGO data; 10 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 88
       vzeroupper 
       lea      rbp, [rsp+0x80]
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x60], xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       mov      qword ptr [rbp-0x78], 0xD1FFAB1E
       mov      r15, rdi
       mov      r14, rsi
       mov      r13d, edx
       mov      rbx, rcx
 
G_M000_IG02:
       vmovsd   qword ptr [rbp-0x30], xmm0
       vmovd    rdi, xmm0
       mov      rsi, 0xD1FFAB1E
       and      rdi, rsi
       mov      rsi, 0xD1FFAB1E
       cmp      rdi, rsi
       jge      G_M000_IG18
       mov      rdi, r14
       mov      esi, r13d
       lea      rdx, [rbp-0x38]
       call     [System.Number:ParseFormatSpecifier(System.ReadOnlySpan`1[ushort],byref):ushort]
       mov      r12d, eax
       test     dword ptr [rsp], esp
       sub      rsp, 784
       lea      rax, [rsp]
       mov      qword ptr [rbp-0x40], rax
       test     r12d, r12d
       je       G_M000_IG17
 
G_M000_IG03:
       mov      rax, qword ptr [rbp-0x40]
       xor      ecx, ecx
       mov      dword ptr [rbp-0x60], ecx
 
G_M000_IG04:
       mov      dword ptr [rbp-0x5C], ecx
       mov      byte  ptr [rbp-0x58], 0
       mov      byte  ptr [rbp-0x57], 0
       mov      byte  ptr [rbp-0x56], 3
       mov      bword ptr [rbp-0x50], rax
       mov      dword ptr [rbp-0x48], 769
       cmp      dword ptr [rbp-0x48], 0
       jbe      G_M000_IG28
       mov      rcx, bword ptr [rbp-0x50]
       mov      byte  ptr [rcx], 0
       mov      rcx, qword ptr [rbp-0x30]
       shr      rcx, 63
       mov      byte  ptr [rbp-0x58], cl
       lea      rcx, [rbp-0x70]
       lea      rsi, [rbp-0x38]
       mov      edi, r12d
       mov      rdx, rbx
       call     [System.Number:GetFloatingPointMaxDigitsAndPrecision(ushort,byref,System.Globalization.NumberFormatInfo,byref):int]
       mov      dword ptr [rbp-0x64], eax
       vxorps   xmm0, xmm0, xmm0
       vmovsd   xmm1, qword ptr [rbp-0x30]
       vucomisd xmm1, xmm0
       jp       SHORT G_M000_IG05
       je       SHORT G_M000_IG08
 
G_M000_IG05:
       cmp      byte  ptr [rbp-0x70], 0
       je       G_M000_IG14
       lea      rsi, [rbp-0x60]
       vmovsd   qword ptr [rbp-0x30], xmm1
       vmovaps  xmm0, xmm1
       mov      edi, dword ptr [rbp-0x38]
       call     [System.Number+Grisu3:TryRunDouble(double,int,byref):bool]
       test     eax, eax
       jne      G_M000_IG15
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG07:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       movzx    rsi, byte  ptr [rbp-0x70]
       lea      rdx, [rbp-0x60]
       vmovsd   xmm0, qword ptr [rbp-0x30]
       mov      edi, dword ptr [rbp-0x38]
       call     [System.Number:Dragon4Double(double,int,bool,byref)]
 
G_M000_IG08:
       test     r12d, r12d
       je       G_M000_IG16
 
G_M000_IG09:
       cmp      dword ptr [rbp-0x38], -1
       mov      eax, dword ptr [rbp-0x64]
       jne      SHORT G_M000_IG10
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x60]
       mov      esi, 17
       cmp      eax, 17
       cmovl    eax, esi
       mov      r14d, eax
       mov      eax, r14d
 
G_M000_IG10:
       lea      rsi, [rbp-0x60]
       mov      rdi, r15
       mov      edx, r12d
       mov      ecx, eax
       mov      r8, rbx
       call     [System.Number:NumberToString[ushort](byref,byref,ushort,int,System.Globalization.NumberFormatInfo)]
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      rax, rax
       cmp      qword ptr [rbp-0x78], 0xD1FFAB1E
       je       SHORT G_M000_IG12
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG12:
       nop      
 
G_M000_IG13:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG14:
       vmovsd   qword ptr [rbp-0x30], xmm1
       jmp      G_M000_IG07
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       test     r12d, r12d
       jne      G_M000_IG09
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdx, r14
       mov      ecx, r13d
       lea      rsi, [rbp-0x60]
       mov      rdi, r15
       mov      r8, rbx
       call     [System.Number:NumberToStringFormat[ushort](byref,byref,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo)]
       jmp      SHORT G_M000_IG11
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [rbp-0x38], 15
       jmp      G_M000_IG03
 
G_M000_IG18:
       vmovsd   xmm0, qword ptr [rbp-0x30]
       vucomisd xmm0, xmm0
       jp       SHORT G_M000_IG19
       je       SHORT G_M000_IG22
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, gword ptr [rbx+0x58]
       cmp      qword ptr [rbp-0x78], 0xD1FFAB1E
       je       SHORT G_M000_IG20
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG20:
       nop      
 
G_M000_IG21:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG22:
       vmovd    rdi, xmm0
       test     rdi, rdi
       jl       SHORT G_M000_IG25
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, gword ptr [rbx+0x60]
       cmp      qword ptr [rbp-0x78], 0xD1FFAB1E
       je       SHORT G_M000_IG23
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG23:
       nop      
 
G_M000_IG24:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, gword ptr [rbx+0x68]
       cmp      qword ptr [rbp-0x78], 0xD1FFAB1E
       je       SHORT G_M000_IG26
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG26:
       nop      
 
G_M000_IG27:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG28:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 745

; Assembly listing for method System.Number:ParseFormatSpecifier(System.ReadOnlySpan`1[ushort],byref):ushort (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 2206
; 0 inlinees with PGO data; 3 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      r14, rdi
       mov      ebx, esi
       mov      r15, rdx
 
G_M000_IG02:
       xor      r13d, r13d
       test     ebx, ebx
       jle      SHORT G_M000_IG06
 
G_M000_IG03:
       movzx    r13, word  ptr [r14]
       mov      edi, r13d
       or       edi, 32
       add      edi, -97
       cmp      edi, 25
       ja       SHORT G_M000_IG11
 
G_M000_IG04:
       cmp      ebx, 1
       jne      SHORT G_M000_IG12
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [r15], -1
       jmp      SHORT G_M000_IG09
 
G_M000_IG06:
       mov      dword ptr [r15], -1
       test     ebx, ebx
       jne      SHORT G_M000_IG13
 
G_M000_IG07:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, 71
 
G_M000_IG08:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG09:
       movzx    rax, r13w
 
G_M000_IG10:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG06
 
G_M000_IG12:
       cmp      ebx, 2
       jne      SHORT G_M000_IG16
       movzx    r12, word  ptr [r14+0x02]
       add      r12d, -48
       cmp      r12d, 10
       jae      G_M000_IG20
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [r15], r12d
       jmp      SHORT G_M000_IG09
 
G_M000_IG13:
       test     r13d, r13d
       je       SHORT G_M000_IG15
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      eax, eax
 
G_M000_IG14:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG07
 
G_M000_IG16:
       cmp      ebx, 3
       jne      SHORT G_M000_IG19
       movzx    r12, word  ptr [r14+0x02]
       add      r12d, -48
       movzx    rax, word  ptr [r14+0x04]
       add      eax, -48
       mov      dword ptr [rbp-0x30], eax
       cmp      r12d, 10
       jae      SHORT G_M000_IG18
       cmp      eax, 10
       jae      SHORT G_M000_IG17
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      edi, [r12+4*r12]
       add      edi, edi
       add      edi, dword ptr [rbp-0x30]
       mov      dword ptr [r15], edi
       jmp      G_M000_IG09
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG20
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG20
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG20:
       xor      r12d, r12d
       mov      eax, 1
       jmp      SHORT G_M000_IG23
 
G_M000_IG21:
       cmp      r12d, 0xD1FFAB1E
       jl       SHORT G_M000_IG22
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x2C]
       lea      eax, [rdi+0x01]
       mov      dword ptr [rbp-0x2C], eax
       movzx    rdi, word  ptr [r14+2*rdi]
       lea      ecx, [r12+4*r12]
       lea      r12d, [rdi+2*rcx-0x30]
       mov      eax, dword ptr [rbp-0x2C]
 
G_M000_IG23:
       cmp      eax, ebx
       jae      SHORT G_M000_IG24
       mov      dword ptr [rbp-0x2C], eax
       mov      edi, eax
       movzx    rdi, word  ptr [r14+2*rdi]
       add      edi, -48
       cmp      edi, 9
       jbe      SHORT G_M000_IG21
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x2C]
       cmp      word  ptr [r14+2*rdi], 0
       jne      SHORT G_M000_IG25
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [r15], r12d
       jmp      G_M000_IG09
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG06
 
; Total bytes of code 566

; Assembly listing for method System.Number:GetFloatingPointMaxDigitsAndPrecision(ushort,byref,System.Globalization.NumberFormatInfo,byref):int (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1093
; 0 inlinees with PGO data; 3 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      rbx, rsi
       mov      r14, rdx
       mov      r15, rcx
 
G_M000_IG02:
       movzx    r13, di
       test     r13d, r13d
       je       G_M000_IG10
 
G_M000_IG03:
       mov      r12d, dword ptr [rbx]
       cmp      r13d, 82
       ja       G_M000_IG15
       lea      eax, [r13-0x43]
       cmp      eax, 4
       jne      SHORT G_M000_IG06
 
G_M000_IG04:
       cmp      dword ptr [rbx], 0
       je       G_M000_IG39
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG31
 
G_M000_IG06:
       cmp      eax, 4
       ja       SHORT G_M000_IG07
       mov      edi, eax
       lea      rax, [reloc @RWD00]
       mov      eax, dword ptr [rax+4*rdi]
       lea      rcx, G_M000_IG02
       add      rax, rcx
       jmp      rax
 
G_M000_IG07:
       add      r13d, -78
       cmp      r13d, 4
       ja       G_M000_IG14
       mov      edi, r13d
       lea      rax, [reloc @RWD20]
       mov      eax, dword ptr [rax+4*rdi]
       lea      rcx, G_M000_IG02
       add      rax, rcx
       jmp      rax
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG09:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [rbx], -1
       jmp      G_M000_IG31
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      byte  ptr [r15], 1
       mov      eax, dword ptr [rbx]
 
G_M000_IG11:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG36
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG32
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG36
 
G_M000_IG15:
       lea      eax, [r13-0x63]
       cmp      eax, 4
       ja       G_M000_IG21
       mov      edi, eax
       lea      rax, [reloc @RWD40]
       mov      eax, dword ptr [rax+4*rdi]
       lea      rcx, G_M000_IG02
       add      rax, rcx
       jmp      rax
 
G_M000_IG16:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG04
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG32
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG29
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG36
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG27
 
G_M000_IG21:
       add      r13d, -110
       cmp      r13d, 4
       ja       SHORT G_M000_IG26
       mov      edi, r13d
       lea      rax, [reloc @RWD60]
       mov      eax, dword ptr [rax+4*rdi]
       lea      rcx, G_M000_IG02
       add      rax, rcx
       jmp      rax
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG09
 
G_M000_IG23:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG34
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG36
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG32
 
G_M000_IG26:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG36
 
G_M000_IG27:
       cmp      dword ptr [rbx], -1
       jne      SHORT G_M000_IG28
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [r14+0x10C]
       mov      dword ptr [rbx], edi
 
G_M000_IG28:
       mov      byte  ptr [r15], 0
       jmp      G_M000_IG37
 
G_M000_IG29:
       cmp      dword ptr [rbx], -1
       jne      SHORT G_M000_IG30
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [rbx], 6
 
G_M000_IG30:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       inc      dword ptr [rbx]
 
G_M000_IG31:
       mov      byte  ptr [r15], 1
       jmp      SHORT G_M000_IG37
 
G_M000_IG32:
       cmp      dword ptr [rbx], -1
       jne      SHORT G_M000_IG33
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [r14+0x108]
       mov      dword ptr [rbx], edi
 
G_M000_IG33:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG28
 
G_M000_IG34:
       cmp      dword ptr [rbx], -1
       jne      SHORT G_M000_IG35
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [r14+0x124]
       mov      dword ptr [rbx], edi
 
G_M000_IG35:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       add      dword ptr [rbx], 2
       jmp      G_M000_IG28
 
G_M000_IG36:
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
G_M000_IG37:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, r12d
 
G_M000_IG38:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG39:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [rbx], -1
       jmp      G_M000_IG05
 
RWD00  	dd	G_M000_IG27 - G_M000_IG02
       	dd	G_M000_IG36 - G_M000_IG02
       	dd	G_M000_IG29 - G_M000_IG02
       	dd	G_M000_IG32 - G_M000_IG02
       	dd	G_M000_IG04 - G_M000_IG02
RWD20  	dd	G_M000_IG13 - G_M000_IG02
       	dd	G_M000_IG12 - G_M000_IG02
       	dd	G_M000_IG34 - G_M000_IG02
       	dd	G_M000_IG12 - G_M000_IG02
       	dd	G_M000_IG08 - G_M000_IG02
RWD40  	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG19 - G_M000_IG02
       	dd	G_M000_IG18 - G_M000_IG02
       	dd	G_M000_IG17 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
RWD60  	dd	G_M000_IG25 - G_M000_IG02
       	dd	G_M000_IG24 - G_M000_IG02
       	dd	G_M000_IG23 - G_M000_IG02
       	dd	G_M000_IG24 - G_M000_IG02
       	dd	G_M000_IG22 - G_M000_IG02

; Total bytes of code 814

; Assembly listing for method System.Number+Grisu3:TryRunDouble(double,int,byref):bool (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 1089
; 1 inlinees with PGO data; 11 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     rbx
       sub      rsp, 224
       vzeroupper 
       lea      rbp, [rsp+0x100]
       mov      r15d, edi
       mov      rbx, rsi
 
G_M000_IG02:
       vmovd    rdi, xmm0
       test     rdi, rdi
       jl       G_M000_IG12
 
G_M000_IG03:
       vmovsd   qword ptr [rbp-0x30], xmm0
       cmp      r15d, -1
       jne      G_M000_IG11
 
G_M000_IG04:
       vmovd    rdi, xmm0
       mov      rcx, 0xD1FFAB1E
       and      rcx, rdi
       shr      rdi, 52
       and      edi, 0x7FF
       mov      dword ptr [rbp-0xA8], edi
       cmp      dword ptr [rbp-0xA8], 0
       je       G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       or       rcx, rdi
       mov      edi, dword ptr [rbp-0xA8]
       add      edi, -0x433
       mov      dword ptr [rbp-0xA8], edi
 
G_M000_IG05:
       mov      qword ptr [rbp-0xB0], rcx
       lea      rdi, [rbp-0xB0]
       lea      rcx, [rbp-0x70]
       lea      rdx, [rbp-0x60]
       mov      esi, 52
       call     [System.Number+DiyFp:GetBoundaries(int,byref,byref):this]
       vmovups  xmm0, xmmword ptr [rbp-0xB0]
       vmovups  xmmword ptr [rbp-0x80], xmm0
       xor      edi, edi
       lzcnt    rdi, qword ptr [rbp-0x80]
       mov      rsi, qword ptr [rbp-0x80]
       shlx     rsi, rsi, rdi
       mov      eax, dword ptr [rbp-0x78]
       sub      eax, edi
       mov      qword ptr [rbp-0x50], rsi
       mov      dword ptr [rbp-0x48], eax
       mov      r15, bword ptr [rbx+0x10]
       mov      r14d, dword ptr [rbx+0x18]
       mov      edi, dword ptr [rbp-0x48]
       add      edi, 64
       neg      edi
       add      edi, 3
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       vmulsd   xmm0, xmm0, qword ptr [reloc @RWD00]
       vroundsd xmm0, xmm0, xmm0, 10
       vcvttsd2si  edi, xmm0
       add      edi, 347
       mov      esi, edi
       sar      esi, 31
       and      esi, 7
       add      edi, esi
       sar      edi, 3
       inc      edi
       cmp      edi, 87
       jae      G_M000_IG14
       mov      rsi, 0xD1FFAB1E
       movsx    r13, word  ptr [rsi+2*rdi]
       mov      rsi, 0xD1FFAB1E
       mov      rsi, qword ptr [rsi+8*rdi]
       mov      rax, 0xD1FFAB1E
       movsx    rdi, word  ptr [rax+2*rdi]
       mov      qword ptr [rbp-0xC0], rsi
       mov      dword ptr [rbp-0xB8], edi
       lea      rdi, [rbp-0x50]
       lea      rsi, [rbp-0xC0]
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xD0], rax
       mov      qword ptr [rbp-0xC8], rdx
       lea      rdi, [rbp-0x60]
       lea      rsi, [rbp-0xC0]
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xE0], rax
       mov      qword ptr [rbp-0xD8], rdx
       lea      rdi, [rbp-0x70]
       lea      rsi, [rbp-0xC0]
 
G_M000_IG06:
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xF0], rax
       mov      qword ptr [rbp-0xE8], rdx
       lea      rcx, [rbp-0xF8]
       mov      qword ptr [rsp], rcx
       mov      rcx, r15
       mov      r8d, r14d
       lea      rsi, [rbp-0xD0]
       lea      rdx, [rbp-0xF0]
       lea      rdi, [rbp-0xE0]
       lea      r9, [rbp-0x38]
       call     [System.Number+Grisu3:TryDigitGenShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool]
       mov      r15d, eax
       mov      edi, dword ptr [rbp-0xF8]
       sub      edi, r13d
       mov      dword ptr [rbp-0x40], edi
 
G_M000_IG07:
       test     r15d, r15d
       je       SHORT G_M000_IG09
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x38]
       add      edi, dword ptr [rbp-0x40]
       mov      dword ptr [rbx+0x04], edi
       lea      rdi, bword ptr [rbx+0x10]
       mov      eax, dword ptr [rdi+0x08]
       cmp      dword ptr [rbp-0x38], eax
       jae      G_M000_IG14
       mov      rdi, bword ptr [rdi]
       mov      eax, dword ptr [rbp-0x38]
       mov      byte  ptr [rdi+rax], 0
       mov      edi, dword ptr [rbp-0x38]
       mov      dword ptr [rbx], edi
 
G_M000_IG09:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, r15d
 
G_M000_IG10:
       add      rsp, 224
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vxorps   xmm0, xmm0, xmm0
       vmovups  xmmword ptr [rbp-0xA0], xmm0
       lea      rdi, [rbp-0xA0]
       vmovsd   xmm0, qword ptr [rbp-0x30]
       call     [System.Number+DiyFp:.ctor(double):this]
       vmovups  xmm0, xmmword ptr [rbp-0xA0]
       vmovups  xmmword ptr [rbp-0x80], xmm0
       lea      rdi, [rbp-0x80]
       call     [System.Number+DiyFp:Normalize():System.Number+DiyFp:this]
       mov      qword ptr [rbp-0x90], rax
       mov      qword ptr [rbp-0x88], rdx
       mov      rdx, bword ptr [rbx+0x10]
       mov      rcx, qword ptr [rbx+0x18]
       lea      r9, [rbp-0x40]
       lea      rdi, [rbp-0x90]
       lea      r8, [rbp-0x38]
       mov      esi, r15d
       call     [System.Number+Grisu3:TryRunCounted(byref,int,System.Span`1[ubyte],byref,byref):bool]
       mov      r15d, eax
       jmp      G_M000_IG07
 
G_M000_IG12:
       vmovsd   qword ptr [rbp-0x28], xmm0
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       vmovsd   xmm1, qword ptr [rbp-0x28]
       vxorps   xmm0, xmm1, xmmword ptr [reloc @RWD16]
       jmp      G_M000_IG03
 
G_M000_IG13:
       mov      dword ptr [rbp-0xA8], -0x432
       jmp      G_M000_IG05
 
G_M000_IG14:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
RWD00  	dq	3FD34413509F79FFh	;  0.301029996
RWD08  	dd	00000000h, 00000000h
RWD16  	dq	8000000000000000h, 8000000000000000h

; Total bytes of code 777

; Assembly listing for method System.Number:ExtractFractionAndBiasedExponent(double,byref):ulong (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 1093

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       vzeroupper 
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       vmovd    rdi, xmm0
       mov      r15, 0xD1FFAB1E
       and      r15, rdi
       shr      rdi, 52
       and      edi, 0x7FF
       mov      dword ptr [rbx], edi
       mov      edi, dword ptr [rbx]
       test     edi, edi
       je       SHORT G_M000_IG05
       mov      rax, 0xD1FFAB1E
       or       r15, rax
       add      edi, -0x433
       mov      dword ptr [rbx], edi
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, r15
 
G_M000_IG04:
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      dword ptr [rbx], -0x432
       jmp      SHORT G_M000_IG03
 
; Total bytes of code 118

; Assembly listing for method System.Number+DiyFp:GetBoundaries(int,byref,byref):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 1086
; 0 inlinees with PGO data; 6 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      r15, rdi
       mov      rbx, rdx
       mov      r14, rcx
 
G_M000_IG02:
       mov      rdi, qword ptr [r15]
       lea      rdi, [2*rdi+0x01]
       mov      eax, dword ptr [r15+0x08]
       dec      eax
       xor      ecx, ecx
       lzcnt    rcx, rdi
       shlx     rdi, rdi, rcx
       sub      eax, ecx
       mov      qword ptr [r14], rdi
       mov      dword ptr [r14+0x08], eax
       mov      edi, 1
       shlx     rdi, rdi, rsi
       cmp      qword ptr [r15], rdi
       je       SHORT G_M000_IG06
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [r15]
       lea      rdi, [2*rdi-0x01]
       mov      eax, dword ptr [r15+0x08]
       dec      eax
       mov      qword ptr [rbx], rdi
       mov      dword ptr [rbx+0x08], eax
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, qword ptr [rbx]
       mov      ecx, dword ptr [rbx+0x08]
       mov      edx, dword ptr [r14+0x08]
       sub      ecx, edx
       shlx     rax, rax, rcx
       mov      qword ptr [rbx], rax
       mov      dword ptr [rbx+0x08], edx
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      rdi, qword ptr [r15]
       lea      rdi, [4*rdi-0x01]
       mov      eax, dword ptr [r15+0x08]
       add      eax, -2
       mov      qword ptr [rbx], rdi
       mov      dword ptr [rbx+0x08], eax
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 187

; Assembly listing for method System.Number+DiyFp:Normalize():System.Number+DiyFp:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      rax, qword ptr [rdi]
       xor      edx, edx
       lzcnt    rdx, rax
       shlx     rax, rax, rdx
       mov      ecx, dword ptr [rdi+0x08]
       sub      ecx, edx
       mov      edx, ecx
 
G_M000_IG03:
       ret      
 
; Total bytes of code 23

; Assembly listing for method System.Number+Grisu3:TryRunShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 104
       lea      rbp, [rsp+0x90]
       mov      dword ptr [rbp-0x7C], r8d
       mov      r15, rdi
       mov      rbx, rsi
       mov      r14, rdx
       mov      r12, rcx
       mov      r13, r9
 
G_M000_IG02:
       mov      edi, dword ptr [rbx+0x08]
       add      edi, 64
       mov      esi, edi
       neg      esi
       lea      edi, [rsi-0x3C]
       add      esi, -32
       lea      rdx, [rbp-0x40]
       call     [System.Number+Grisu3:GetCachedPowerForBinaryExponentRange(int,int,byref):System.Number+DiyFp]
       mov      qword ptr [rbp-0x38], rax
       mov      qword ptr [rbp-0x30], rdx
       lea      rsi, [rbp-0x38]
       mov      rdi, rbx
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0x50], rax
       mov      qword ptr [rbp-0x48], rdx
       lea      rsi, [rbp-0x38]
       mov      rdi, r15
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0x60], rax
       mov      qword ptr [rbp-0x58], rdx
       lea      rsi, [rbp-0x38]
       mov      rdi, r14
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0x70], rax
       mov      qword ptr [rbp-0x68], rdx
       lea      rcx, [rbp-0x78]
       mov      qword ptr [rsp], rcx
       mov      rcx, r12
       mov      r8d, dword ptr [rbp-0x7C]
       lea      rsi, [rbp-0x50]
       lea      rdx, [rbp-0x70]
       lea      rdi, [rbp-0x60]
       mov      r9, r13
       call     [System.Number+Grisu3:TryDigitGenShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool]
       mov      ecx, dword ptr [rbp-0x40]
       neg      ecx
       add      ecx, dword ptr [rbp-0x78]
       mov      rbx, bword ptr [rbp+0x10]
       mov      dword ptr [rbx], ecx
 
G_M000_IG03:
       add      rsp, 104
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 203

; Assembly listing for method System.Number+Grisu3:GetCachedPowerForBinaryExponentRange(int,int,byref):System.Number+DiyFp (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rax
       vzeroupper 
 
G_M000_IG02:
       add      edi, 63
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       vmulsd   xmm0, xmm0, qword ptr [reloc @RWD00]
       vroundsd xmm0, xmm0, xmm0, 10
       vcvttsd2si  eax, xmm0
       add      eax, 347
       mov      ecx, eax
       sar      ecx, 31
       and      ecx, 7
       add      eax, ecx
       sar      eax, 3
       inc      eax
       cmp      eax, 87
       jae      SHORT G_M000_IG04
       mov      rcx, 0xD1FFAB1E
       movsx    rcx, word  ptr [rcx+2*rax]
       mov      dword ptr [rdx], ecx
       mov      rdx, 0xD1FFAB1E
       mov      rdx, qword ptr [rdx+8*rax]
       mov      rcx, 0xD1FFAB1E
       movsx    rax, word  ptr [rcx+2*rax]
       mov      dword ptr [rsp+0x04], eax
       mov      rax, rdx
       mov      edx, dword ptr [rsp+0x04]
 
G_M000_IG03:
       add      rsp, 8
       ret      
 
G_M000_IG04:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
RWD00  	dq	3FD34413509F79FFh	;  0.301029996

; Total bytes of code 126

; Assembly listing for method System.Number+Grisu3:TryDigitGenShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1086
; 1 inlinees with PGO data; 12 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 104
       lea      rbp, [rsp+0x90]
       mov      r15, rsi
       mov      r13, rcx
       mov      r12d, r8d
       mov      rbx, r9
       mov      r14, bword ptr [rbp+0x10]
 
G_M000_IG02:
       mov      qword ptr [rbp-0x30], 1
       mov      rax, qword ptr [rdi]
       dec      rax
       mov      rdi, qword ptr [rdx]
       inc      rdi
       mov      edx, dword ptr [rdx+0x08]
       mov      qword ptr [rbp-0x40], rdi
       mov      dword ptr [rbp-0x38], edx
       mov      rsi, qword ptr [rbp-0x40]
       sub      rsi, rax
       mov      eax, dword ptr [r15+0x08]
       neg      eax
       mov      r8d, eax
       and      r8d, 63
       mov      dword ptr [rbp-0x74], r8d
       mov      edx, 1
       shlx     r9, rdx, r8
       mov      qword ptr [rbp-0x70], r9
       mov      rdx, qword ptr [rbp-0x40]
       shrx     rdi, rdx, r8
       lea      r10, [r9-0x01]
       and      r10, qword ptr [rbp-0x40]
       neg      eax
       add      eax, 65
       imul     eax, eax, 0x4D1
       sar      eax, 12
       cmp      eax, 10
       jae      G_M000_IG15
       mov      edx, eax
       mov      r11, 0xD1FFAB1E
       mov      r11d, dword ptr [r11+4*rdx]
       cmp      edi, r11d
       jae      SHORT G_M000_IG04
 
G_M000_IG03:
       dec      eax
       cmp      eax, 10
       jae      G_M000_IG15
       mov      r11d, eax
       mov      rdx, 0xD1FFAB1E
       mov      r11d, dword ptr [rdx+4*r11]
 
G_M000_IG04:
       inc      eax
       mov      dword ptr [r14], eax
       xor      eax, eax
       mov      dword ptr [rbx], eax
       cmp      dword ptr [r14], 0
       jle      G_M000_IG11
 
G_M000_IG05:
       mov      eax, edi
       xor      edx, edx
       div      edx:eax, r11d
       mov      dword ptr [rbp-0x54], r11d
       mov      edx, eax
       imul     edx, r11d
       sub      edi, edx
       mov      edx, edi
       mov      edi, dword ptr [rbx]
       cmp      edi, r12d
       jae      G_M000_IG15
       add      eax, 48
       mov      byte  ptr [rdi+r13], al
       inc      dword ptr [rbx]
       dec      dword ptr [r14]
       mov      dword ptr [rbp-0x44], edx
       mov      edi, edx
       shlx     rax, rdi, r8
       mov      qword ptr [rbp-0x50], r10
       add      rax, r10
       mov      qword ptr [rbp-0x60], rax
       mov      qword ptr [rbp-0x68], rsi
       cmp      rax, rsi
       jb       G_M000_IG12
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, 0xD1FFAB1E
       mov      r11d, dword ptr [rbp-0x54]
       imul     r11, rdi
       shr      r11, 35
       mov      eax, r11d
       cmp      dword ptr [r14], 0
       mov      r11d, eax
       mov      edi, dword ptr [rbp-0x44]
       jg       G_M000_IG10
 
G_M000_IG07:
       mov      r10, qword ptr [rbp-0x50]
       lea      r10, [r10+4*r10]
       add      r10, r10
       mov      rcx, qword ptr [rbp-0x30]
       lea      rcx, [rcx+4*rcx]
       add      rcx, rcx
       mov      qword ptr [rbp-0x30], rcx
       mov      rdx, qword ptr [rbp-0x68]
       lea      rdx, [rdx+4*rdx]
       add      rdx, rdx
       mov      esi, dword ptr [rbp-0x74]
       shrx     rdi, r10, rsi
       mov      eax, dword ptr [rbx]
       cmp      eax, r12d
       jae      G_M000_IG15
       add      edi, 48
       mov      byte  ptr [rax+r13], dil
       inc      dword ptr [rbx]
       dec      dword ptr [r14]
       mov      rax, qword ptr [rbp-0x70]
       lea      rdi, [rax-0x01]
       and      r10, rdi
       mov      qword ptr [rbp-0x50], r10
       mov      qword ptr [rbp-0x68], rdx
       cmp      r10, rdx
       jae      G_M000_IG14
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      ebx, dword ptr [rbx]
       lea      rdi, [rbp-0x40]
       mov      rsi, r15
       call     [System.Number+DiyFp:Subtract(byref):System.Number+DiyFp:this]
       mov      rcx, rax
       mov      r14, qword ptr [rbp-0x70]
       mov      qword ptr [rsp], r14
       mov      r15, qword ptr [rbp-0x30]
       mov      qword ptr [rsp+0x08], r15
       imul     rcx, r15
       mov      rdi, r13
       mov      esi, r12d
       mov      edx, ebx
       mov      r8, qword ptr [rbp-0x68]
       mov      r9, qword ptr [rbp-0x50]
       call     [System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool]
       nop      
 
G_M000_IG09:
       add      rsp, 104
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       mov      rsi, qword ptr [rbp-0x68]
       mov      r8d, dword ptr [rbp-0x74]
       mov      r10, qword ptr [rbp-0x50]
       jmp      G_M000_IG05
 
G_M000_IG11:
       mov      qword ptr [rbp-0x68], rsi
       mov      qword ptr [rbp-0x50], r10
       jmp      G_M000_IG07
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edx, dword ptr [rbx]
       mov      rcx, qword ptr [rbp-0x40]
       sub      rcx, qword ptr [r15]
       mov      edi, dword ptr [rbp-0x54]
       mov      ebx, dword ptr [rbp-0x74]
       shlx     rdi, rdi, rbx
       mov      qword ptr [rsp], rdi
       mov      qword ptr [rsp+0x08], 1
       mov      rdi, r13
       mov      esi, r12d
       mov      r8, qword ptr [rbp-0x68]
       mov      r9, qword ptr [rbp-0x60]
       call     [System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool]
       nop      
 
G_M000_IG13:
       add      rsp, 104
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG07
 
G_M000_IG15:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 671

; Assembly listing for method System.Number+Grisu3:BiggestPowerTen(uint,int,byref):uint (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 1087
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     rbx
       lea      rbp, [rsp+0x20]
       mov      rbx, rdx
 
G_M000_IG02:
       inc      esi
       imul     r15d, esi, 0x4D1
       sar      r15d, 12
       cmp      r15d, 10
       jae      SHORT G_M000_IG06
       mov      eax, r15d
       mov      r14, 0xD1FFAB1E
       mov      r13d, dword ptr [r14+4*rax]
       cmp      edi, r13d
       jae      SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       dec      r15d
       cmp      r15d, 10
       jae      SHORT G_M000_IG06
       mov      edi, r15d
       mov      r13d, dword ptr [r14+4*rdi]
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      eax, [r15+0x01]
       mov      dword ptr [rbx], eax
       mov      eax, r13d
 
G_M000_IG05:
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 127

; Assembly listing for method System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1086

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 40
       lea      rbp, [rsp+0x50]
       mov      bword ptr [rbp-0x48], rdi
       mov      dword ptr [rbp-0x3C], esi
       mov      r14d, edx
       mov      r15, r8
       mov      rbx, r9
       mov      r12, qword ptr [rbp+0x10]
       mov      r13, qword ptr [rbp+0x18]
 
G_M000_IG02:
       mov      rax, rcx
       sub      rax, r13
       mov      qword ptr [rbp-0x30], rax
       add      rcx, r13
       mov      qword ptr [rbp-0x38], rcx
 
G_M000_IG03:
       cmp      rbx, rax
       jb       SHORT G_M000_IG07
 
G_M000_IG04:
       cmp      rbx, rcx
       jae      SHORT G_M000_IG09
 
G_M000_IG05:
       mov      rdi, r15
       sub      rdi, rbx
       cmp      rdi, r12
       jae      G_M000_IG14
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG09
 
G_M000_IG07:
       mov      rdi, r15
       sub      rdi, rbx
       cmp      rdi, r12
       jae      G_M000_IG17
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       cmp      rbx, qword ptr [rbp-0x38]
       jb       SHORT G_M000_IG05
 
G_M000_IG09:
       lea      rdi, [r13+r13]
       cmp      rdi, rbx
       ja       SHORT G_M000_IG11
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       shl      r13, 2
       sub      r15, r13
       xor      eax, eax
       cmp      r15, rbx
       setae    al
 
G_M000_IG10:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      eax, eax
 
G_M000_IG12:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      edi, [r14-0x01]
       mov      eax, dword ptr [rbp-0x3C]
       cmp      edi, eax
       jae      G_M000_IG21
       lea      edi, [r14-0x01]
       mov      rcx, bword ptr [rbp-0x48]
       add      rdi, rcx
       dec      byte  ptr [rdi]
       add      rbx, r12
       mov      bword ptr [rbp-0x48], rcx
       mov      dword ptr [rbp-0x3C], eax
       mov      rax, qword ptr [rbp-0x30]
       mov      rcx, qword ptr [rbp-0x38]
       jmp      G_M000_IG03
 
G_M000_IG14:
       lea      rdi, [rbx+r12]
       mov      rcx, qword ptr [rbp-0x38]
       cmp      rdi, rcx
       jb       SHORT G_M000_IG15
       mov      rdi, rcx
       sub      rdi, rbx
       add      r12, rbx
       sub      r12, rcx
       cmp      rdi, r12
       jbe      SHORT G_M000_IG19
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      eax, eax
 
G_M000_IG16:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG17:
       lea      rdi, [rbx+r12]
       cmp      rdi, rax
       jb       SHORT G_M000_IG18
       mov      rax, qword ptr [rbp-0x30]
       mov      rdi, rax
       sub      rdi, rbx
       lea      rdx, [rbx+r12]
       sub      rdx, rax
       cmp      rdi, rdx
       jae      SHORT G_M000_IG20
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rcx, qword ptr [rbp-0x38]
       jmp      G_M000_IG04
 
G_M000_IG18:
       jmp      G_M000_IG13
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG09
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG13
 
G_M000_IG21:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 474

; Assembly listing for method System.Number:NumberToString[ushort](byref,byref,ushort,int,System.Globalization.NumberFormatInfo) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1089
; 8 inlinees with PGO data; 29 single block inlinees; 8 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 40
       lea      rbp, [rsp+0x50]
       mov      r13, rdi
       mov      rbx, rsi
       mov      r14d, edx
       mov      r15d, ecx
       mov      r12, r8
 
G_M000_IG02:
       xor      eax, eax
       cmp      byte  ptr [rbx+0x0A], 3
       sete     al
       mov      dword ptr [rbp-0x2C], eax
       movzx    rcx, r14w
       mov      dword ptr [rbp-0x34], ecx
       cmp      ecx, 82
       ja       G_M000_IG19
       mov      eax, dword ptr [rbp-0x2C]
       lea      edx, [rcx-0x43]
       cmp      edx, 4
       jne      G_M000_IG13
 
G_M000_IG03:
       xor      r8d, r8d
       test     r15d, r15d
       jle      SHORT G_M000_IG08
 
G_M000_IG04:
       mov      dword ptr [rbp-0x30], r8d
 
G_M000_IG05:
       mov      rdi, rbx
       mov      esi, r15d
       mov      edx, eax
       call     [System.Number:RoundNumber(byref,int,bool)]
 
G_M000_IG06:
       cmp      byte  ptr [rbx+0x08], 0
       jne      G_M000_IG50
 
G_M000_IG07:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       add      r14d, -2
       movzx    r8, r14w
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       mov      r9d, dword ptr [rbp-0x30]
       call     [System.Number:FormatGeneral[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort,bool)]
       jmp      G_M000_IG14
 
G_M000_IG08:
       cmp      byte  ptr [rbx+0x0A], 2
       jne      SHORT G_M000_IG10
       cmp      r15d, -1
       jne      SHORT G_M000_IG11
       mov      dword ptr [rbp-0x30], 1
       lea      rdi, bword ptr [rbx+0x10]
       cmp      dword ptr [rdi+0x08], 0
       jbe      G_M000_IG59
       mov      rdi, bword ptr [rdi]
       cmp      byte  ptr [rdi], 0
       je       G_M000_IG51
 
G_M000_IG09:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG06
 
G_M000_IG10:
       mov      dword ptr [rbp-0x30], r8d
       jmp      G_M000_IG52
 
G_M000_IG11:
       mov      dword ptr [rbp-0x30], r8d
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG52
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r14d, dword ptr [rbp-0x34]
       add      r14d, -11
       movzx    r14, r14w
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG03
 
G_M000_IG13:
       cmp      edx, 4
       ja       SHORT G_M000_IG15
       mov      edi, edx
       lea      rdx, [reloc @RWD00]
       mov      edx, dword ptr [rdx+4*rdi]
       lea      rsi, G_M000_IG02
       add      rdx, rsi
       jmp      rdx
 
G_M000_IG14:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG15:
       lea      esi, [rcx-0x4E]
       cmp      esi, 4
       ja       SHORT G_M000_IG18
       mov      edi, esi
       lea      rdx, [reloc @RWD20]
       mov      edx, dword ptr [rdx+4*rdi]
       lea      rsi, G_M000_IG02
       add      rdx, rsi
       jmp      rdx
 
G_M000_IG16:
       jmp      SHORT G_M000_IG12
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG58
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG58
 
G_M000_IG19:
       lea      edx, [rcx-0x63]
       cmp      edx, 4
       ja       G_M000_IG25
       mov      edi, edx
       lea      rdx, [reloc @RWD40]
       mov      edx, dword ptr [rdx+4*rdi]
       lea      rsi, G_M000_IG02
       add      rdx, rsi
       jmp      rdx
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG03
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG33
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       mov      ecx, dword ptr [rbp-0x34]
       jmp      G_M000_IG43
 
G_M000_IG23:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG58
 
G_M000_IG24:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG31
 
G_M000_IG25:
       lea      esi, [rcx-0x6E]
       cmp      esi, 4
       ja       SHORT G_M000_IG30
       mov      edi, esi
       lea      rdx, [reloc @RWD60]
       mov      edx, dword ptr [rdx+4*rdi]
       lea      rsi, G_M000_IG02
       add      rdx, rsi
       jmp      rdx
 
G_M000_IG26:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG12
 
G_M000_IG27:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG56
 
G_M000_IG28:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG58
 
G_M000_IG29:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG41
 
G_M000_IG30:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG58
 
G_M000_IG31:
       test     r15d, r15d
       jge      SHORT G_M000_IG32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, dword ptr [r12+0x10C]
 
G_M000_IG32:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       mov      edx, dword ptr [rbp-0x2C]
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatCurrency[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG14
 
G_M000_IG33:
       test     r15d, r15d
       jge      SHORT G_M000_IG34
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, dword ptr [r12+0x108]
       mov      eax, dword ptr [rbp-0x2C]
 
G_M000_IG34:
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       mov      edx, eax
       call     [System.Number:RoundNumber(byref,int,bool)]
       cmp      byte  ptr [rbx+0x08], 0
       je       SHORT G_M000_IG38
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG35
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG36
 
G_M000_IG35:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG36:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG37
       cmp      edi, ecx
       jae      SHORT G_M000_IG37
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      SHORT G_M000_IG38
 
G_M000_IG37:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
 
G_M000_IG38:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r8, gword ptr [r12+0x30]
       test     r8, r8
       jne      SHORT G_M000_IG39
       xor      r8, r8
       xor      r9d, r9d
       jmp      SHORT G_M000_IG40
 
G_M000_IG39:
       lea      r9, bword ptr [r8+0x0C]
       mov      r8d, dword ptr [r8+0x08]
       mov      eax, r8d
       mov      r8, r9
       mov      r9d, eax
 
G_M000_IG40:
       xor      rdi, rdi
       xor      esi, esi
       mov      bword ptr [rsp], rdi
       mov      dword ptr [rsp+0x08], esi
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       xor      rcx, rcx
       call     [System.Number:FormatFixed[ushort](byref,byref,int,int[],System.ReadOnlySpan`1[ushort],System.ReadOnlySpan`1[ushort])]
       jmp      G_M000_IG14
 
G_M000_IG41:
       test     r15d, r15d
       jge      SHORT G_M000_IG42
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, dword ptr [r12+0x108]
 
G_M000_IG42:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       mov      edx, dword ptr [rbp-0x2C]
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatNumber[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG14
 
G_M000_IG43:
       test     r15d, r15d
       jge      SHORT G_M000_IG44
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, 6
       mov      eax, dword ptr [rbp-0x2C]
 
G_M000_IG44:
       inc      r15d
       mov      rdi, rbx
       mov      esi, r15d
       mov      edx, eax
       call     [System.Number:RoundNumber(byref,int,bool)]
       cmp      byte  ptr [rbx+0x08], 0
       je       SHORT G_M000_IG48
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG45
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG46
 
G_M000_IG45:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG46:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG47
       cmp      edi, ecx
       jae      SHORT G_M000_IG47
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      SHORT G_M000_IG48
 
G_M000_IG47:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
 
G_M000_IG48:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r8d, dword ptr [rbp-0x34]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatScientific[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort)]
       jmp      G_M000_IG14
 
G_M000_IG49:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG50:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG53
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG54
 
G_M000_IG51:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG07
 
G_M000_IG52:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, dword ptr [rbx]
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG05
 
G_M000_IG53:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG54:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG55
       cmp      edi, ecx
       jae      SHORT G_M000_IG55
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      G_M000_IG07
 
G_M000_IG55:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
       jmp      G_M000_IG07
 
G_M000_IG56:
       test     r15d, r15d
       jge      SHORT G_M000_IG57
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r15d, dword ptr [r12+0x124]
 
G_M000_IG57:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rsi, bword ptr [rbx+0x04]
       add      dword ptr [rsi], 2
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       mov      edx, dword ptr [rbp-0x2C]
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatPercent[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG14
 
G_M000_IG58:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
G_M000_IG59:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
RWD00  	dd	G_M000_IG31 - G_M000_IG02
       	dd	G_M000_IG58 - G_M000_IG02
       	dd	G_M000_IG43 - G_M000_IG02
       	dd	G_M000_IG33 - G_M000_IG02
       	dd	G_M000_IG03 - G_M000_IG02
RWD20  	dd	G_M000_IG41 - G_M000_IG02
       	dd	G_M000_IG17 - G_M000_IG02
       	dd	G_M000_IG56 - G_M000_IG02
       	dd	G_M000_IG17 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
RWD40  	dd	G_M000_IG24 - G_M000_IG02
       	dd	G_M000_IG23 - G_M000_IG02
       	dd	G_M000_IG22 - G_M000_IG02
       	dd	G_M000_IG21 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
RWD60  	dd	G_M000_IG29 - G_M000_IG02
       	dd	G_M000_IG28 - G_M000_IG02
       	dd	G_M000_IG27 - G_M000_IG02
       	dd	G_M000_IG28 - G_M000_IG02
       	dd	G_M000_IG26 - G_M000_IG02

; Total bytes of code 1557

; Assembly listing for method System.Number:RoundNumber(byref,int,bool) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1134
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      r15, rdi
       mov      ebx, esi
       mov      r14d, edx
 
G_M000_IG02:
       mov      r13, bword ptr [r15+0x10]
       xor      r12d, r12d
       jmp      SHORT G_M000_IG04
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       inc      r12d
 
G_M000_IG04:
       cmp      r12d, ebx
       jge      SHORT G_M000_IG07
 
G_M000_IG05:
       movsxd   rdi, r12d
       cmp      byte  ptr [rdi+r13], 0
       jne      SHORT G_M000_IG03
 
G_M000_IG06:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG07:
       cmp      r12d, ebx
       je       SHORT G_M000_IG14
 
G_M000_IG08:
       test     r12d, r12d
       jle      SHORT G_M000_IG11
 
G_M000_IG09:
       lea      edi, [r12-0x01]
       movsxd   rdi, edi
       cmp      byte  ptr [rdi+r13], 48
       je       G_M000_IG21
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG11:
       test     r12d, r12d
       je       SHORT G_M000_IG16
 
G_M000_IG12:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       movsxd   rdi, r12d
       mov      byte  ptr [rdi+r13], 0
       mov      dword ptr [r15], r12d
 
G_M000_IG13:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG14:
       movzx    rdx, byte  ptr [r15+0x0A]
       movzx    rcx, r14b
       mov      rdi, r13
       mov      esi, r12d
       call     [System.Number:<RoundNumber>g__ShouldRoundUp|121_0(ulong,int,ubyte,bool):bool]
       test     eax, eax
       jne      SHORT G_M000_IG19
 
G_M000_IG15:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      SHORT G_M000_IG08
 
G_M000_IG16:
       cmp      byte  ptr [r15+0x0A], 3
       jne      G_M000_IG22
 
G_M000_IG17:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       xor      edi, edi
       mov      dword ptr [r15+0x04], edi
       jmp      SHORT G_M000_IG12
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       dec      r12d
 
G_M000_IG19:
       test     r12d, r12d
       jle      SHORT G_M000_IG20
       lea      edi, [r12-0x01]
       movsxd   rdi, edi
       cmp      byte  ptr [rdi+r13], 57
       je       SHORT G_M000_IG18
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      edi, [r12-0x01]
       movsxd   rdi, edi
       add      rdi, r13
       inc      byte  ptr [rdi]
       jmp      G_M000_IG11
 
G_M000_IG20:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       lea      rdi, bword ptr [r15+0x04]
       inc      dword ptr [rdi]
       mov      byte  ptr [r13], 49
       mov      r12d, 1
       jmp      G_M000_IG11
 
G_M000_IG21:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       dec      r12d
       jmp      G_M000_IG08
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      byte  ptr [r15+0x08], 0
       jmp      G_M000_IG17
 
; Total bytes of code 418

; Assembly listing for method System.Number:FormatGeneral[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort,bool) (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; fully interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 1089
; 6 inlinees with PGO data; 12 single block inlinees; 2 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       mov      rbx, rdi
       mov      r15, rsi
       mov      r14, rcx
       mov      r13d, r8d
 
G_M000_IG02:
       mov      r12d, dword ptr [r15+0x04]
       xor      eax, eax
       mov      dword ptr [rbp-0x2C], eax
       test     r9b, r9b
       jne      SHORT G_M000_IG05
 
G_M000_IG03:
       cmp      r12d, edx
       jg       G_M000_IG33
       cmp      r12d, -3
       jge      G_M000_IG18
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG33
 
G_M000_IG05:
       mov      rcx, bword ptr [r15+0x10]
       test     r12d, r12d
       jle      G_M000_IG27
 
G_M000_IG06:
       mov      qword ptr [rbp-0x38], rcx
       cmp      byte  ptr [rcx], 0
       jne      SHORT G_M000_IG11
 
G_M000_IG07:
       mov      edx, 48
 
G_M000_IG08:
       movzx    rsi, dx
       mov      edi, dword ptr [rbx+0x08]
       mov      rdx, bword ptr [rbx+0x10]
       mov      r8d, dword ptr [rbx+0x18]
       cmp      edi, r8d
       jae      G_M000_IG34
       mov      r8d, edi
       mov      word  ptr [rdx+2*r8], si
       inc      edi
       mov      dword ptr [rbx+0x08], edi
 
G_M000_IG09:
       dec      r12d
       test     r12d, r12d
       jle      SHORT G_M000_IG12
 
G_M000_IG10:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rcx, qword ptr [rbp-0x38]
       jmp      SHORT G_M000_IG06
 
G_M000_IG11:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, qword ptr [rbp-0x38]
       lea      rax, [rdi+0x01]
       mov      qword ptr [rbp-0x38], rax
       movzx    rdx, byte  ptr [rdi]
       jmp      SHORT G_M000_IG08
 
G_M000_IG12:
       mov      rcx, qword ptr [rbp-0x38]
       cmp      byte  ptr [rcx], 0
       jne      SHORT G_M000_IG15
 
G_M000_IG13:
       test     r12d, r12d
       jge      G_M000_IG22
 
G_M000_IG14:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG15:
       mov      rsi, gword ptr [r14+0x30]
       test     rsi, rsi
       jne      G_M000_IG28
       xor      rsi, rsi
       xor      edx, edx
 
G_M000_IG16:
       mov      edi, dword ptr [rbx+0x08]
       mov      r8, bword ptr [rbx+0x10]
       mov      r9d, dword ptr [rbx+0x18]
       cmp      edx, 1
       jne      G_M000_IG29
 
G_M000_IG17:
       cmp      edi, r9d
       jae      G_M000_IG29
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [r8+2*rdx], si
       inc      edi
       mov      dword ptr [rbx+0x08], edi
       jmp      SHORT G_M000_IG24
 
G_M000_IG18:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       jmp      G_M000_IG05
 
G_M000_IG19:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG20:
       nop      
 
G_M000_IG21:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG22:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
 
G_M000_IG23:
       cmp      dword ptr [rbp-0x2C], 0
       jne      G_M000_IG31
       jmp      SHORT G_M000_IG19
 
G_M000_IG24:
       test     r12d, r12d
       jl       G_M000_IG35
       mov      r12, qword ptr [rbp-0x38]
       cmp      byte  ptr [r12], 0
       je       SHORT G_M000_IG23
 
G_M000_IG25:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, r12
       lea      r12, [rdi+0x01]
       movzx    rsi, byte  ptr [rdi]
       mov      edi, dword ptr [rbx+0x08]
       mov      rax, bword ptr [rbx+0x10]
       mov      ecx, dword ptr [rbx+0x18]
       cmp      edi, ecx
       jae      SHORT G_M000_IG30
       mov      ecx, edi
       mov      word  ptr [rax+2*rcx], si
       inc      edi
       mov      dword ptr [rbx+0x08], edi
 
G_M000_IG26:
       cmp      byte  ptr [r12], 0
       jne      SHORT G_M000_IG25
       jmp      SHORT G_M000_IG23
 
G_M000_IG27:
       mov      qword ptr [rbp-0x38], rcx
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbx+0x08]
       mov      rax, bword ptr [rbx+0x10]
       mov      ecx, dword ptr [rbx+0x18]
       cmp      edi, ecx
       jae      G_M000_IG38
       mov      ecx, edi
       mov      word  ptr [rax+2*rcx], 48
       inc      edi
       mov      dword ptr [rbx+0x08], edi
       jmp      G_M000_IG12
 
G_M000_IG28:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
       jmp      G_M000_IG16
 
G_M000_IG29:
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
       jmp      G_M000_IG24
 
G_M000_IG30:
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
       jmp      SHORT G_M000_IG26
 
G_M000_IG31:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edx, dword ptr [r15+0x04]
       dec      edx
       movzx    rcx, r13w
       mov      rdi, rbx
       mov      rsi, r14
       mov      r8d, 2
       mov      r9d, 1
       call     [System.Number:FormatExponent[ushort](byref,System.Globalization.NumberFormatInfo,int,ushort,int,bool)]
       jmp      G_M000_IG20
 
G_M000_IG32:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG33:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      r12d, 1
       mov      dword ptr [rbp-0x2C], 1
       jmp      G_M000_IG05
 
G_M000_IG34:
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
       jmp      G_M000_IG09
 
G_M000_IG35:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbx+0x08]
       mov      rsi, bword ptr [rbx+0x10]
       mov      eax, dword ptr [rbx+0x18]
       cmp      edi, eax
       jae      SHORT G_M000_IG36
       mov      eax, edi
       mov      word  ptr [rsi+2*rax], 48
       inc      edi
       mov      dword ptr [rbx+0x08], edi
       jmp      SHORT G_M000_IG37
 
G_M000_IG36:
       mov      rdi, rbx
       mov      esi, 48
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
 
G_M000_IG37:
       inc      r12d
       jmp      G_M000_IG24
 
G_M000_IG38:
       mov      rdi, rbx
       mov      esi, 48
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
       jmp      G_M000_IG12
 
; Total bytes of code 768

; Assembly listing for method System.ReadOnlySpan`1[ushort]:ToString():System.String:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      rsi, bword ptr [rdi]
       mov      edi, dword ptr [rdi+0x08]
       mov      dword ptr [rbp-0x04], edi
       mov      rdi, rsi
       mov      esi, dword ptr [rbp-0x04]
       call     System.String:.ctor(System.ReadOnlySpan`1[ushort]):this
       nop      
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 37

; Assembly listing for method System.String:Ctor(System.ReadOnlySpan`1[ushort]):System.String (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; optimized using Static PGO
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are valid, and fgCalledCount is 300334
; 1 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      r15, rdi
       mov      ebx, esi
 
G_M000_IG02:
       test     ebx, ebx
       je       SHORT G_M000_IG05
 
G_M000_IG03:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, ebx
       call     System.String:FastAllocateString(int):System.String
       mov      r14, rax
       cmp      byte  ptr [r14], r14b
       lea      rdi, bword ptr [r14+0x0C]
       mov      edx, ebx
       add      rdx, rdx
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      rax, r14
 
G_M000_IG04:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rax, 0xD1FFAB1E
 
G_M000_IG06:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 117

; Assembly listing for method System.IO.StreamWriter:Write(System.String):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data
; 5 inlinees with PGO data; 5 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x38], rax
       mov      rbx, rdi
 
G_M000_IG02:
       test     rsi, rsi
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       xor      r15, r15
       xor      r14d, r14d
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       lea      r15, bword ptr [rsi+0x0C]
       mov      r14d, dword ptr [rsi+0x08]
 
G_M000_IG05:
       mov      rdi, gword ptr [rbx+0x48]
       test     dword ptr [rdi+0x34], 0xD1FFAB1E
       je       G_M000_IG27
       cmp      r14d, 4
       jle      G_M000_IG13
 
G_M000_IG06:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG28
       mov      r13, gword ptr [rbx+0x40]
       mov      bword ptr [rbp-0x30], r15
       cmp      dword ptr [r13+0x08], 0
       jbe      G_M000_IG29
       lea      rdi, bword ptr [r13+0x10]
       mov      bword ptr [rbp-0x38], rdi
       mov      r12, bword ptr [rbp-0x38]
       mov      eax, dword ptr [rbx+0x50]
       test     r14d, r14d
       jle      G_M000_IG19
 
G_M000_IG07:
       cmp      dword ptr [r13+0x08], eax
       je       SHORT G_M000_IG15
 
G_M000_IG08:
       mov      ecx, dword ptr [r13+0x08]
       sub      ecx, eax
       cmp      ecx, r14d
       jg       SHORT G_M000_IG12
 
G_M000_IG09:
       mov      r8d, ecx
 
G_M000_IG10:
       mov      ecx, r8d
       mov      dword ptr [rbp-0x40], ecx
       lea      edi, [rcx+rcx]
       movsxd   rdx, edi
       mov      dword ptr [rbp-0x3C], eax
       movsxd   rdi, eax
       lea      rdi, [r12+2*rdi]
       test     rdx, rdx
       jl       G_M000_IG26
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      edi, dword ptr [rbp-0x40]
       add      dword ptr [rbx+0x50], edi
       mov      eax, edi
       add      eax, dword ptr [rbp-0x3C]
       mov      esi, eax
       movsxd   rdx, edi
       lea      r15, [r15+2*rdx]
       sub      r14d, edi
       test     r14d, r14d
       mov      eax, esi
       jg       SHORT G_M000_IG07
 
G_M000_IG11:
       jmp      SHORT G_M000_IG19
 
G_M000_IG12:
       mov      r8d, r14d
       jmp      SHORT G_M000_IG10
 
G_M000_IG13:
       mov      edi, dword ptr [rbx+0x54]
       sub      edi, dword ptr [rbx+0x50]
       cmp      edi, r14d
       jl       G_M000_IG06
 
G_M000_IG14:
       jmp      SHORT G_M000_IG16
 
G_M000_IG15:
       mov      rdi, rbx
       xor      esi, esi
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       xor      eax, eax
       jmp      SHORT G_M000_IG08
       align    [0 bytes for IG17]
 
G_M000_IG16:
       xor      eax, eax
       test     r14d, r14d
       jle      SHORT G_M000_IG21
       mov      r13, gword ptr [rbx+0x40]
 
G_M000_IG17:
       mov      rcx, r13
       mov      edx, dword ptr [rbx+0x50]
       lea      edi, [rdx+0x01]
       mov      dword ptr [rbx+0x50], edi
       mov      edi, eax
       movzx    rdi, word  ptr [r15+2*rdi]
       cmp      edx, dword ptr [rcx+0x08]
       jae      SHORT G_M000_IG29
       mov      word  ptr [rcx+2*rdx+0x10], di
       inc      eax
       cmp      eax, r14d
       jl       SHORT G_M000_IG17
 
G_M000_IG18:
       jmp      SHORT G_M000_IG21
 
G_M000_IG19:
       xor      edi, edi
       mov      bword ptr [rbp-0x38], rdi
 
G_M000_IG20:
       mov      bword ptr [rbp-0x30], rdi
 
G_M000_IG21:
       cmp      byte  ptr [rbx+0x58], 0
       jne      SHORT G_M000_IG25
 
G_M000_IG22:
       xor      rax, rax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG23:
       mov      bword ptr [rbp-0x38], rax
 
G_M000_IG24:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG25:
       mov      rdi, rbx
       mov      esi, 1
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       jmp      SHORT G_M000_IG22
 
G_M000_IG26:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG27:
       call     [System.IO.StreamWriter:ThrowAsyncIOInProgress()]
       int3     
 
G_M000_IG28:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG29:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 400

; Assembly listing for method System.Buffer:Memmove(byref,byref,ulong) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 154

G_M000_IG01:
       push     rbp
       vzeroupper 
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, rdi
       sub      rax, rsi
       cmp      rax, rdx
       jb       G_M000_IG11
       mov      rax, rsi
       sub      rax, rdi
       cmp      rax, rdx
       jb       G_M000_IG11
       lea      rax, bword ptr [rsi+rdx]
       lea      rcx, bword ptr [rdi+rdx]
       cmp      rdx, 16
       ja       SHORT G_M000_IG04
       test     dl, 24
       je       SHORT G_M000_IG07
       mov      rdx, qword ptr [rsi]
       mov      qword ptr [rdi], rdx
       mov      rsi, qword ptr [rax-0x08]
       mov      qword ptr [rcx-0x08], rsi
 
G_M000_IG03:
       pop      rbp
       ret      
 
G_M000_IG04:
       cmp      rdx, 64
       ja       SHORT G_M000_IG09
 
G_M000_IG05:
       vmovups  xmm0, xmmword ptr [rsi]
       vmovups  xmmword ptr [rdi], xmm0
       cmp      rdx, 32
       jbe      SHORT G_M000_IG06
       vmovups  xmm0, xmmword ptr [rsi+0x10]
       vmovups  xmmword ptr [rdi+0x10], xmm0
       cmp      rdx, 48
       jbe      SHORT G_M000_IG06
       vmovups  xmm0, xmmword ptr [rsi+0x20]
       vmovups  xmmword ptr [rdi+0x20], xmm0
 
G_M000_IG06:
       vmovups  xmm0, xmmword ptr [rax-0x10]
       vmovups  xmmword ptr [rcx-0x10], xmm0
       jmp      SHORT G_M000_IG03
 
G_M000_IG07:
       test     dl, 4
       je       SHORT G_M000_IG08
       mov      edx, dword ptr [rsi]
       mov      dword ptr [rdi], edx
       mov      eax, dword ptr [rax-0x04]
       mov      dword ptr [rcx-0x04], eax
       jmp      SHORT G_M000_IG03
 
G_M000_IG08:
       test     rdx, rdx
       je       SHORT G_M000_IG03
       movzx    rsi, byte  ptr [rsi]
       mov      byte  ptr [rdi], sil
       test     dl, 2
       je       SHORT G_M000_IG03
       movsx    rdx, word  ptr [rax-0x02]
       mov      word  ptr [rcx-0x02], dx
       jmp      SHORT G_M000_IG03
 
G_M000_IG09:
       cmp      rdx, 0x800
       ja       SHORT G_M000_IG12
       mov      r8, rdx
       shr      r8, 6
 
G_M000_IG10:
       vmovdqu  ymm0, ymmword ptr [rsi]
       vmovdqu  ymmword ptr [rdi], ymm0
       vmovdqu  ymm0, ymmword ptr [rsi+0x20]
       vmovdqu  ymmword ptr [rdi+0x20], ymm0
       add      rdi, 64
       add      rsi, 64
       dec      r8
       jne      SHORT G_M000_IG10
       and      rdx, 63
       cmp      rdx, 16
       ja       G_M000_IG05
       jmp      SHORT G_M000_IG06
 
G_M000_IG11:
       cmp      rdi, rsi
       je       G_M000_IG03
 
G_M000_IG12:
       pop      rbp
       tail.jmp [System.Buffer:_Memmove(byref,byref,ulong)]
 
; Total bytes of code 254

; Assembly listing for method System.IO.TextWriter:WriteLine():this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rdi, rbx
       mov      rsi, gword ptr [rbx+0x08]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x48]
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [rax+0x38]System.IO.TextWriter:Write(ushort[]):this
 
; Total bytes of code 53

; Assembly listing for method System.IO.StreamWriter:Write(ushort[]):this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data
; 6 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x38], rax
       mov      rbx, rdi
 
G_M000_IG02:
       test     rsi, rsi
       je       G_M000_IG18
 
G_M000_IG03:
       lea      r15, bword ptr [rsi+0x10]
       mov      r14d, dword ptr [rsi+0x08]
 
G_M000_IG04:
       mov      rdi, gword ptr [rbx+0x48]
       test     dword ptr [rdi+0x34], 0xD1FFAB1E
       je       G_M000_IG27
       cmp      r14d, 4
       jle      G_M000_IG12
 
G_M000_IG05:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG28
       mov      r13, gword ptr [rbx+0x40]
       mov      bword ptr [rbp-0x30], r15
       cmp      dword ptr [r13+0x08], 0
       jbe      G_M000_IG29
       lea      rdi, bword ptr [r13+0x10]
       mov      bword ptr [rbp-0x38], rdi
       mov      r12, bword ptr [rbp-0x38]
       mov      eax, dword ptr [rbx+0x50]
       test     r14d, r14d
       jle      G_M000_IG19
 
G_M000_IG06:
       cmp      dword ptr [r13+0x08], eax
       je       SHORT G_M000_IG14
 
G_M000_IG07:
       mov      ecx, dword ptr [r13+0x08]
       sub      ecx, eax
       cmp      ecx, r14d
       jg       SHORT G_M000_IG11
 
G_M000_IG08:
       mov      r8d, ecx
 
G_M000_IG09:
       mov      ecx, r8d
       mov      dword ptr [rbp-0x40], ecx
       lea      edi, [rcx+rcx]
       movsxd   rdx, edi
       mov      dword ptr [rbp-0x3C], eax
       movsxd   rdi, eax
       lea      rdi, [r12+2*rdi]
       test     rdx, rdx
       jl       G_M000_IG26
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      edi, dword ptr [rbp-0x40]
       add      dword ptr [rbx+0x50], edi
       mov      eax, edi
       add      eax, dword ptr [rbp-0x3C]
       mov      esi, eax
       movsxd   rdx, edi
       lea      r15, [r15+2*rdx]
       sub      r14d, edi
       test     r14d, r14d
       mov      eax, esi
       jg       SHORT G_M000_IG06
 
G_M000_IG10:
       jmp      SHORT G_M000_IG19
 
G_M000_IG11:
       mov      r8d, r14d
       jmp      SHORT G_M000_IG09
 
G_M000_IG12:
       mov      edi, dword ptr [rbx+0x54]
       sub      edi, dword ptr [rbx+0x50]
       cmp      edi, r14d
       jl       G_M000_IG05
 
G_M000_IG13:
       jmp      SHORT G_M000_IG15
 
G_M000_IG14:
       mov      rdi, rbx
       xor      esi, esi
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       xor      eax, eax
       jmp      SHORT G_M000_IG07
       align    [0 bytes for IG16]
 
G_M000_IG15:
       xor      eax, eax
       test     r14d, r14d
       jle      SHORT G_M000_IG21
       mov      r13, gword ptr [rbx+0x40]
 
G_M000_IG16:
       mov      rcx, r13
       mov      edx, dword ptr [rbx+0x50]
       lea      edi, [rdx+0x01]
       mov      dword ptr [rbx+0x50], edi
       mov      edi, eax
       movzx    rdi, word  ptr [r15+2*rdi]
       cmp      edx, dword ptr [rcx+0x08]
       jae      SHORT G_M000_IG29
       mov      word  ptr [rcx+2*rdx+0x10], di
       inc      eax
       cmp      eax, r14d
       jl       SHORT G_M000_IG16
 
G_M000_IG17:
       jmp      SHORT G_M000_IG21
 
G_M000_IG18:
       xor      r15, r15
       xor      r14d, r14d
       jmp      G_M000_IG04
 
G_M000_IG19:
       xor      edi, edi
       mov      bword ptr [rbp-0x38], rdi
 
G_M000_IG20:
       mov      bword ptr [rbp-0x30], rdi
 
G_M000_IG21:
       cmp      byte  ptr [rbx+0x58], 0
       jne      SHORT G_M000_IG25
 
G_M000_IG22:
       xor      rax, rax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG23:
       mov      bword ptr [rbp-0x38], rax
 
G_M000_IG24:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG25:
       mov      rdi, rbx
       mov      esi, 1
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       jmp      SHORT G_M000_IG22
 
G_M000_IG26:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG27:
       call     [System.IO.StreamWriter:ThrowAsyncIOInProgress()]
       int3     
 
G_M000_IG28:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG29:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 407

; Assembly listing for method Program:run_benchmark(int,int) (Instrumented Tier0)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier0 code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 160
       vzeroupper 
       lea      rbp, [rsp+0xA0]
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x70], xmm8
       vmovdqa  xmmword ptr [rbp-0x60], xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       mov      dword ptr [rbp-0x2C], edi
       mov      dword ptr [rbp-0x30], esi
 
G_M000_IG02:
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x88], rdx
       mov      rdx, qword ptr [rbp-0x88]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x38], rax
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x90], rdx
       mov      rdx, qword ptr [rbp-0x90]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x40], rax
       mov      edx, dword ptr [rbp-0x2C]
       mov      dword ptr [rbp-0x70], edx
       mov      edx, dword ptr [rbp-0x30]
       mov      dword ptr [rbp-0x6C], edx
       lea      rdx, [rbp-0x70]
       mov      qword ptr [rbp-0x98], rdx
       mov      rdx, qword ptr [rbp-0x98]
       mov      rdi, 0xD1FFAB1E
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      gword ptr [rbp-0x48], rax
       xor      edi, edi
       mov      dword ptr [rbp-0x4C], edi
       mov      dword ptr [rbp-0x80], 0x3E8
       jmp      G_M000_IG08
 
G_M000_IG03:
       xor      edi, edi
       mov      dword ptr [rbp-0x50], edi
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x4C]
       add      edi, dword ptr [rbp-0x50]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       mov      rdi, gword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x4C]
       mov      edx, dword ptr [rbp-0x50]
       call     double[,]:Set(int,int,double):this
       mov      edi, dword ptr [rbp-0x4C]
       add      edi, dword ptr [rbp-0x50]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       mov      rdi, gword ptr [rbp-0x40]
       mov      esi, dword ptr [rbp-0x4C]
       mov      edx, dword ptr [rbp-0x50]
       call     double[,]:Set(int,int,double):this
       mov      edi, dword ptr [rbp-0x50]
       inc      edi
       mov      dword ptr [rbp-0x50], edi
 
G_M000_IG05:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG07
 
G_M000_IG06:
       lea      rdi, [rbp-0x80]
       mov      esi, 67
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG07:
       mov      edi, dword ptr [rbp-0x50]
       cmp      edi, dword ptr [rbp-0x30]
       jl       SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x4C]
       inc      edi
       mov      dword ptr [rbp-0x4C], edi
 
G_M000_IG08:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG10
 
G_M000_IG09:
       lea      rdi, [rbp-0x80]
       mov      esi, 76
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG10:
       mov      edi, dword ptr [rbp-0x4C]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       G_M000_IG03
       xor      edi, edi
       mov      dword ptr [rbp-0x54], edi
       jmp      G_M000_IG20
 
G_M000_IG11:
       xor      edi, edi
       mov      dword ptr [rbp-0x58], edi
       jmp      G_M000_IG17
 
G_M000_IG12:
       xor      edi, edi
       mov      qword ptr [rbp-0x60], rdi
       xor      edi, edi
       mov      dword ptr [rbp-0x64], edi
       jmp      SHORT G_M000_IG14
 
G_M000_IG13:
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x38]
       mov      esi, dword ptr [rbp-0x54]
       mov      edx, dword ptr [rbp-0x64]
       call     double[,]:Get(int,int):double:this
       vmovsd   qword ptr [rbp-0x78], xmm0
       mov      rdi, gword ptr [rbp-0x40]
       mov      esi, dword ptr [rbp-0x64]
       mov      edx, dword ptr [rbp-0x58]
       call     double[,]:Get(int,int):double:this
       vmulsd   xmm0, xmm0, qword ptr [rbp-0x78]
       vaddsd   xmm0, xmm0, qword ptr [rbp-0x60]
       vmovsd   qword ptr [rbp-0x60], xmm0
       mov      edi, dword ptr [rbp-0x64]
       inc      edi
       mov      dword ptr [rbp-0x64], edi
 
G_M000_IG14:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG16
 
G_M000_IG15:
       lea      rdi, [rbp-0x80]
       mov      esi, 138
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG16:
       mov      edi, dword ptr [rbp-0x64]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       SHORT G_M000_IG13
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      rdi, gword ptr [rbp-0x48]
       mov      esi, dword ptr [rbp-0x54]
       mov      edx, dword ptr [rbp-0x58]
       vmovsd   xmm0, qword ptr [rbp-0x60]
       call     double[,]:Set(int,int,double):this
       mov      eax, dword ptr [rbp-0x58]
       inc      eax
       mov      dword ptr [rbp-0x58], eax
 
G_M000_IG17:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG19
 
G_M000_IG18:
       lea      rdi, [rbp-0x80]
       mov      esi, 161
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG19:
       mov      edi, dword ptr [rbp-0x58]
       cmp      edi, dword ptr [rbp-0x30]
       jl       G_M000_IG12
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edi, dword ptr [rbp-0x54]
       inc      edi
       mov      dword ptr [rbp-0x54], edi
 
G_M000_IG20:
       mov      edi, dword ptr [rbp-0x80]
       dec      edi
       mov      dword ptr [rbp-0x80], edi
       cmp      dword ptr [rbp-0x80], 0
       jg       SHORT G_M000_IG22
 
G_M000_IG21:
       lea      rdi, [rbp-0x80]
       mov      esi, 172
       call     CORINFO_HELP_PATCHPOINT
 
G_M000_IG22:
       mov      edi, dword ptr [rbp-0x54]
       cmp      edi, dword ptr [rbp-0x2C]
       jl       G_M000_IG11
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_COUNTPROFILE32
       mov      edx, dword ptr [rbp-0x30]
       dec      edx
       mov      esi, dword ptr [rbp-0x2C]
       dec      esi
       mov      rdi, gword ptr [rbp-0x48]
       call     double[,]:Get(int,int):double:this
       vmovsd   qword ptr [rbp-0xA0], xmm0
       vmovsd   xmm0, qword ptr [rbp-0xA0]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG23:
       add      rsp, 160
       pop      rbp
       ret      
 
; Total bytes of code 770

; Assembly listing for method Program:run_benchmark(int,int) (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x8a
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 184.71

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       sub      rsp, 32
       mov      qword ptr [rsp+0xC8], r15
       mov      qword ptr [rsp+0xC0], r14
       mov      qword ptr [rsp+0xB8], r13
       mov      qword ptr [rsp+0xB0], rbx
       vzeroupper 
       lea      rbp, [rsp+0x20]
       mov      edi, dword ptr [rbp+0x84]
       mov      esi, dword ptr [rbp+0x80]
       mov      rdx, gword ptr [rbp+0x78]
       mov      rcx, gword ptr [rbp+0x70]
       mov      r9, gword ptr [rbp+0x68]
       mov      r10d, dword ptr [rbp+0x5C]
       mov      r8d, dword ptr [rbp+0x58]
       vmovsd   xmm0, qword ptr [rbp+0x50]
       mov      eax, dword ptr [rbp+0x4C]
 
G_M000_IG02:
       jmp      SHORT G_M000_IG05
       align    [0 bytes for IG07]
 
G_M000_IG03:
       xor      r8d, r8d
       test     esi, esi
       jle      G_M000_IG09
 
G_M000_IG04:
       vxorps   xmm0, xmm0, xmm0
       xor      eax, eax
 
G_M000_IG05:
       cmp      eax, edi
       jge      SHORT G_M000_IG08
 
G_M000_IG06:
       mov      r11d, r10d
       sub      r11d, dword ptr [rdx+0x18]
       mov      ebx, dword ptr [rdx+0x10]
 
G_M000_IG07:
       mov      r15d, r11d
       cmp      r15d, ebx
       jae      G_M000_IG10
       mov      r14d, dword ptr [rdx+0x14]
       imul     r15d, r14d
       mov      r13d, eax
       sub      r13d, dword ptr [rdx+0x1C]
       cmp      r13d, r14d
       jae      G_M000_IG10
       add      r13d, r15d
       mov      r15d, r13d
       vmovsd   xmm1, qword ptr [rdx+8*r15+0x20]
       mov      r15d, eax
       sub      r15d, dword ptr [rcx+0x18]
       cmp      r15d, dword ptr [rcx+0x10]
       jae      SHORT G_M000_IG10
       mov      r14d, dword ptr [rcx+0x14]
       imul     r15d, r14d
       mov      r13d, r8d
       sub      r13d, dword ptr [rcx+0x1C]
       cmp      r13d, r14d
       jae      SHORT G_M000_IG10
       add      r15d, r13d
       vmulsd   xmm1, xmm1, qword ptr [rcx+8*r15+0x20]
       vaddsd   xmm0, xmm1, xmm0
       inc      eax
       cmp      eax, edi
       jl       SHORT G_M000_IG07
 
G_M000_IG08:
       mov      r15d, r10d
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG10
       mov      r11d, dword ptr [r9+0x14]
       mov      eax, r15d
       imul     eax, r11d
       mov      r13d, r8d
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r11d
       jae      SHORT G_M000_IG10
       add      eax, r13d
       vmovsd   qword ptr [r9+8*rax+0x20], xmm0
       inc      r8d
       cmp      r8d, esi
       jl       G_M000_IG04
 
G_M000_IG09:
       inc      r10d
       cmp      r10d, edi
       jge      SHORT G_M000_IG11
       jmp      G_M000_IG03
 
G_M000_IG10:
       call     CORINFO_HELP_RNGCHKFAIL
 
G_M000_IG11:
       dec      edi
       mov      r15d, edi
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG10
       mov      eax, r15d
       imul     eax, r11d
       dec      esi
       mov      r13d, esi
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r11d
       jae      SHORT G_M000_IG10
       add      eax, r13d
       vmovsd   xmm0, qword ptr [r9+8*rax+0x20]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG12:
       add      rsp, 176
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 369

; Assembly listing for method System.IO.StreamWriter:Flush(bool,bool):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 154
; 18 inlinees with PGO data; 12 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 104
       lea      rbp, [rsp+0x90]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x40], rax
       mov      qword ptr [rbp-0x80], 0xD1FFAB1E
       mov      rbx, rdi
       mov      r14d, esi
       mov      r15d, edx
 
G_M000_IG02:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG22
       movzx    rdi, r14b
       or       edi, dword ptr [rbx+0x50]
       movzx    rax, r15b
       or       edi, eax
       je       G_M000_IG23
       cmp      byte  ptr [rbx+0x59], 0
       je       G_M000_IG26
 
G_M000_IG03:
       cmp      gword ptr [rbx+0x38], 0
       jne      G_M000_IG27
 
G_M000_IG04:
       mov      rdi, gword ptr [rbx+0x28]
       mov      esi, dword ptr [rbx+0x50]
       mov      rax, 0xD1FFAB1E
       cmp      qword ptr [rdi], rax
       jne      G_M000_IG30
       mov      rdi, gword ptr [rdi+0x28]
       mov      rax, 0xD1FFAB1E
       cmp      qword ptr [rdi], rax
       jne      G_M000_IG29
       cmp      esi, 0xD1FFAB1E
       ja       G_M000_IG28
       lea      eax, [rsi+2*rsi]
       add      eax, 3
 
G_M000_IG05:
       cmp      eax, 0x400
       jg       G_M000_IG31
 
G_M000_IG06:
       test     dword ptr [rsp], esp
       sub      rsp, 0x400
       lea      r13, [rsp+0x10]
       mov      r12d, 0x400
 
G_M000_IG07:
       mov      rcx, gword ptr [rbx+0x30]
       mov      gword ptr [rbp-0x70], rcx
       mov      rsi, gword ptr [rbx+0x40]
       mov      edx, dword ptr [rbx+0x50]
       test     rsi, rsi
       je       G_M000_IG32
       cmp      dword ptr [rsi+0x08], edx
       jb       G_M000_IG39
       add      rsi, 16
 
G_M000_IG08:
       mov      rdi, 0xD1FFAB1E
       cmp      qword ptr [rcx], rdi
       jne      G_M000_IG38
       mov      r8, rcx
       mov      gword ptr [rbp-0x78], r8
       mov      r9d, edx
       mov      r10, r13
       mov      r11d, r12d
       mov      edi, 1
       test     r9d, r9d
       cmove    rsi, rdi
       mov      bword ptr [rbp-0x30], rsi
       mov      qword ptr [rbp-0x38], rsi
       test     r11d, r11d
       cmove    r10, rdi
       mov      bword ptr [rbp-0x40], r10
       mov      qword ptr [rbp-0x48], r10
       mov      dword ptr [rbp-0x50], r9d
       mov      dword ptr [rbp-0x4C], r11d
       test     rsi, rsi
       je       G_M000_IG33
       mov      rsi, qword ptr [rbp-0x38]
       test     r10, r10
       je       G_M000_IG34
       mov      r10, qword ptr [rbp-0x48]
       test     r11d, r11d
       jl       G_M000_IG35
       mov      r11d, dword ptr [rbp-0x4C]
       test     r9d, r9d
       jl       G_M000_IG36
       mov      byte  ptr [r8+0x26], r15b
       mov      byte  ptr [r8+0x27], 1
       mov      r15, gword ptr [r8+0x18]
       mov      rdi, 0xD1FFAB1E
       cmp      qword ptr [r15], rdi
       jne      G_M000_IG37
       xor      eax, eax
       mov      dword ptr [rbp-0x54], eax
 
G_M000_IG09:
       mov      dword ptr [rbp-0x58], eax
       cmp      word  ptr [r8+0x24], 0
       jne      G_M000_IG13
       mov      rdi, gword ptr [r8+0x10]
       test     rdi, rdi
       je       SHORT G_M000_IG10
       mov      rcx, qword ptr [rdi]
       mov      rcx, qword ptr [rcx+0x48]
       call     [rcx]System.Text.EncoderFallbackBuffer:get_Remaining():int:this
       test     eax, eax
       mov      eax, dword ptr [rbp-0x58]
       mov      rsi, qword ptr [rbp-0x38]
       mov      r10, qword ptr [rbp-0x48]
       mov      r11d, dword ptr [rbp-0x4C]
       jg       SHORT G_M000_IG12
 
G_M000_IG10:
       lea      r8, [rbp-0x60]
       lea      r9, [rbp-0x68]
       mov      rdi, rsi
       mov      esi, dword ptr [rbp-0x50]
       mov      rdx, r10
       mov      ecx, r11d
       call     [System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int]
       mov      rax, qword ptr [rbp-0x60]
       mov      r10, qword ptr [rbp-0x38]
       sub      rax, r10
       mov      rdi, rax
       shr      rdi, 63
       add      rax, rdi
       sar      rax, 1
       mov      rdx, qword ptr [rbp-0x68]
       mov      r11, qword ptr [rbp-0x48]
       sub      rdx, r11
       mov      r9d, dword ptr [rbp-0x50]
       cmp      eax, r9d
       mov      rsi, r10
       jne      SHORT G_M000_IG11
       mov      r15, gword ptr [rbp-0x78]
       mov      dword ptr [r15+0x20], r9d
       jmp      SHORT G_M000_IG15
 
G_M000_IG11:
       mov      dword ptr [rbp-0x54], edx
       mov      r10, r11
       mov      r8, gword ptr [rbp-0x78]
       mov      r11d, dword ptr [rbp-0x4C]
       jmp      SHORT G_M000_IG14
 
G_M000_IG12:
       mov      r8, gword ptr [rbp-0x78]
       mov      r9d, dword ptr [rbp-0x50]
       jmp      SHORT G_M000_IG14
 
G_M000_IG13:
       mov      eax, dword ptr [rbp-0x58]
       mov      r9d, dword ptr [rbp-0x50]
 
G_M000_IG14:
       mov      edx, dword ptr [rbp-0x54]
       mov      dword ptr [rsp], edx
       mov      gword ptr [rsp+0x08], r8
       mov      rdi, r15
       mov      edx, r9d
       mov      rcx, r10
       mov      r8d, r11d
       mov      r9d, eax
       call     [System.Text.Encoding:GetBytesWithFallback(ulong,int,ulong,int,int,int,System.Text.EncoderNLS):int:this]
       mov      edx, eax
 
G_M000_IG15:
       xor      rsi, rsi
       mov      bword ptr [rbp-0x30], rsi
 
G_M000_IG16:
       mov      bword ptr [rbp-0x40], rsi
 
G_M000_IG17:
       xor      esi, esi
       mov      dword ptr [rbx+0x50], esi
       test     edx, edx
       jle      SHORT G_M000_IG18
       mov      rdi, gword ptr [rbx+0x20]
       cmp      edx, r12d
       ja       G_M000_IG39
       mov      rsi, r13
       mov      rcx, 0xD1FFAB1E
       cmp      qword ptr [rdi], rcx
       jne      G_M000_IG40
       mov      rdi, gword ptr [rdi+0x18]
       mov      ecx, 1
       call     [System.ConsolePal:Write(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlySpan`1[ubyte],bool)]
 
G_M000_IG18:
       test     r14b, r14b
       je       SHORT G_M000_IG19
       mov      rdi, gword ptr [rbx+0x20]
       mov      rax, 0xD1FFAB1E
       cmp      qword ptr [rdi], rax
       jne      G_M000_IG42
       mov      rdi, gword ptr [rdi+0x18]
       test     byte  ptr [rdi+0x10], 1
       jne      G_M000_IG41
 
G_M000_IG19:
       cmp      qword ptr [rbp-0x80], 0xD1FFAB1E
       je       SHORT G_M000_IG20
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG20:
       nop      
 
G_M000_IG21:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG22:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG23:
       cmp      qword ptr [rbp-0x80], 0xD1FFAB1E
       je       SHORT G_M000_IG24
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG24:
       nop      
 
G_M000_IG25:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG26:
       mov      byte  ptr [rbx+0x59], 1
       mov      rdi, gword ptr [rbx+0x28]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x30]System.Text.Encoding:get_Preamble():System.ReadOnlySpan`1[ubyte]:this
       test     edx, edx
       jle      G_M000_IG03
       mov      rdi, gword ptr [rbx+0x20]
       mov      rsi, rax
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x60]
       call     [rax+0x38]System.IO.Stream:Write(System.ReadOnlySpan`1[ubyte]):this
       cmp      gword ptr [rbx+0x38], 0
       je       G_M000_IG04
 
G_M000_IG27:
       mov      rdi, gword ptr [rbx+0x38]
       lea      r13, bword ptr [rdi+0x10]
       mov      r12d, dword ptr [rdi+0x08]
       jmp      G_M000_IG07
 
G_M000_IG28:
       mov      edi, esi
       call     [System.Text.UTF8Encoding+UTF8EncodingSealed:<GetMaxByteCount>g__ThrowArgumentException|7_0(int)]
       int3     
 
G_M000_IG29:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
       jmp      G_M000_IG05
 
G_M000_IG30:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
       cmp      eax, 0x400
       jle      G_M000_IG06
 
G_M000_IG31:
       mov      rdi, gword ptr [rbx+0x28]
       mov      rsi, gword ptr [rbx+0x40]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
       movsxd   rsi, eax
       mov      rdi, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       mov      r13, rax
       lea      rdi, bword ptr [rbx+0x38]
       mov      rsi, r13
       call     CORINFO_HELP_ASSIGN_REF
       lea      rdi, bword ptr [r13+0x10]
       mov      r12d, dword ptr [r13+0x08]
       mov      r13, rdi
       jmp      G_M000_IG07
 
G_M000_IG32:
       test     edx, edx
       jne      G_M000_IG39
       xor      rsi, rsi
       xor      edx, edx
       jmp      G_M000_IG08
 
G_M000_IG33:
       mov      edi, 0x12C1A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG34:
       mov      edi, 0x1363
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG35:
       mov      edi, 0x12C00
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, dword ptr [rbp-0x4C]
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
G_M000_IG36:
       mov      edi, 0x12C3A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, dword ptr [rbp-0x50]
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
G_M000_IG37:
       mov      r9d, dword ptr [rbp-0x50]
       mov      rdi, r15
       mov      edx, r9d
       mov      rcx, r10
       mov      r8d, r11d
       mov      r9, gword ptr [rbp-0x78]
       mov      rax, qword ptr [r15]
       mov      rax, qword ptr [rax+0x70]
       call     [rax+0x38]System.Text.Encoding:GetBytes(ulong,int,ulong,int,System.Text.EncoderNLS):int:this
       mov      edx, eax
       jmp      G_M000_IG15
 
G_M000_IG38:
       mov      rcx, r13
       mov      r8d, r12d
       movzx    r9, r15b
       mov      rdi, gword ptr [rbp-0x70]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x48]
       call     [rax+0x10]System.Text.Encoder:GetBytes(System.ReadOnlySpan`1[ushort],System.Span`1[ubyte],bool):int:this
       mov      edx, eax
       jmp      G_M000_IG17
 
G_M000_IG39:
       call     [System.ThrowHelper:ThrowArgumentOutOfRangeException()]
       int3     
 
G_M000_IG40:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x60]
       call     [rax+0x38]System.IO.Stream:Write(System.ReadOnlySpan`1[ubyte]):this
       jmp      G_M000_IG18
 
G_M000_IG41:
       call     [System.IO.Error:GetFileNotOpen():System.Exception]
       mov      rdi, rax
       call     CORINFO_HELP_THROW
 
G_M000_IG42:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x50]
       call     [rax+0x30]System.IO.Stream:Flush():this
       jmp      G_M000_IG19
 
; Total bytes of code 1231

; Assembly listing for method System.Text.ConsoleEncoding:GetMaxByteCount(int):int:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rdi, gword ptr [rdi+0x28]
       mov      rax, 0xD1FFAB1E
       cmp      qword ptr [rdi], rax
       jne      SHORT G_M000_IG06
 
G_M000_IG03:
       cmp      esi, 0xD1FFAB1E
       ja       SHORT G_M000_IG05
       lea      eax, [rsi+2*rsi]
       add      eax, 3
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      edi, esi
       call     [System.Text.UTF8Encoding+UTF8EncodingSealed:<GetMaxByteCount>g__ThrowArgumentException|7_0(int)]
       int3     
 
G_M000_IG06:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
 
G_M000_IG07:
       pop      rbp
       tail.jmp [rax+0x28]System.Text.Encoding:GetMaxByteCount(int):int:this
 
; Total bytes of code 60

; Assembly listing for method System.Text.UTF8Encoding+UTF8EncodingSealed:GetMaxByteCount(int):int:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rsp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 156

G_M000_IG01:
       push     rax
 
G_M000_IG02:
       cmp      esi, 0xD1FFAB1E
       ja       SHORT G_M000_IG04
       lea      eax, [rsi+2*rsi]
       add      eax, 3
 
G_M000_IG03:
       add      rsp, 8
       ret      
 
G_M000_IG04:
       mov      edi, esi
       call     [System.Text.UTF8Encoding+UTF8EncodingSealed:<GetMaxByteCount>g__ThrowArgumentException|7_0(int)]
       int3     
 
; Total bytes of code 29

; Assembly listing for method System.Text.Encoder:GetBytes(System.ReadOnlySpan`1[ushort],System.Span`1[ubyte],bool):int:this (Instrumented Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Instrumented Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; 2 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x38], rax
       mov      rbx, rdi
       mov      r14d, edx
       mov      r13d, r8d
       mov      r15d, r9d
 
G_M000_IG02:
       mov      edi, 1
       test     r14d, r14d
       cmove    rsi, rdi
       mov      bword ptr [rbp-0x30], rsi
       mov      r12, rsi
       test     r13d, r13d
       mov      rax, rdi
       cmovne   rax, rcx
       mov      rcx, rax
       mov      bword ptr [rbp-0x40], rcx
       mov      bword ptr [rbp-0x38], rcx
       mov      rdi, rbx
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_CLASSPROFILE32
       mov      rsi, r12
       mov      edx, r14d
       mov      r14, bword ptr [rbp-0x40]
       mov      rcx, r14
       mov      rdi, rbx
       movzx    r9, r15b
       mov      r8d, r13d
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x48]
       call     [rax+0x08]System.Text.Encoder:GetBytes(ulong,int,ulong,int,bool):int:this
       nop      
 
G_M000_IG03:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 148

; Assembly listing for method System.Text.EncoderNLS:GetBytes(ulong,int,ulong,int,bool):int:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; 6 inlinees with PGO data; 3 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 56
       lea      rbp, [rsp+0x60]
       mov      rbx, rdi
       mov      r14, rsi
       mov      r15d, edx
       mov      r13, rcx
       mov      r12d, r8d
 
G_M000_IG02:
       test     r14, r14
       je       G_M000_IG10
       test     r13, r13
       je       G_M000_IG11
       test     r12d, r12d
       jl       G_M000_IG12
       test     r15d, r15d
       jl       G_M000_IG13
       mov      byte  ptr [rbx+0x26], r9b
       mov      byte  ptr [rbx+0x27], 1
       mov      rax, gword ptr [rbx+0x18]
       mov      rdi, 0xD1FFAB1E
       cmp      qword ptr [rax], rdi
       jne      G_M000_IG14
 
G_M000_IG03:
       mov      gword ptr [rbp-0x48], rax
       xor      ecx, ecx
       mov      dword ptr [rbp-0x2C], ecx
       xor      edx, edx
       mov      dword ptr [rbp-0x30], edx
       cmp      word  ptr [rbx+0x24], 0
       mov      rax, gword ptr [rbp-0x48]
       jne      SHORT G_M000_IG07
       mov      rdi, gword ptr [rbx+0x10]
       test     rdi, rdi
       je       SHORT G_M000_IG04
       mov      rsi, qword ptr [rdi]
       mov      rsi, qword ptr [rsi+0x48]
       call     [rsi]System.Text.EncoderFallbackBuffer:get_Remaining():int:this
       test     eax, eax
       jg       SHORT G_M000_IG06
 
G_M000_IG04:
       lea      r8, [rbp-0x38]
       lea      r9, [rbp-0x40]
       mov      rdi, r14
       mov      esi, r15d
       mov      rdx, r13
       mov      ecx, r12d
       call     [System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int]
       mov      rdx, qword ptr [rbp-0x38]
       sub      rdx, r14
       mov      rdi, rdx
       shr      rdi, 63
       add      rdx, rdi
       sar      rdx, 1
       mov      eax, edx
       mov      rcx, qword ptr [rbp-0x40]
       sub      rcx, r13
       mov      r10d, ecx
       mov      dword ptr [rbp-0x30], eax
       cmp      eax, r15d
       mov      rax, gword ptr [rbp-0x48]
       jne      SHORT G_M000_IG05
       mov      dword ptr [rbx+0x20], r15d
       mov      eax, r10d
       jmp      SHORT G_M000_IG08
 
G_M000_IG05:
       mov      dword ptr [rbp-0x2C], r10d
       jmp      SHORT G_M000_IG07
 
G_M000_IG06:
       mov      rax, gword ptr [rbp-0x48]
 
G_M000_IG07:
       mov      ecx, dword ptr [rbp-0x2C]
       mov      dword ptr [rsp], ecx
       mov      gword ptr [rsp+0x08], rbx
       mov      rdi, rax
       mov      rsi, r14
       mov      edx, r15d
       mov      rcx, r13
       mov      r8d, r12d
       mov      r9d, dword ptr [rbp-0x30]
       call     [System.Text.Encoding:GetBytesWithFallback(ulong,int,ulong,int,int,int,System.Text.EncoderNLS):int:this]
 
G_M000_IG08:
       nop      
 
G_M000_IG09:
       add      rsp, 56
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       mov      edi, 0x12C1A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG11:
       mov      edi, 0x1363
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rdi, rax
       call     [System.ArgumentNullException:Throw(System.String)]
       int3     
 
G_M000_IG12:
       mov      edi, 0x12C00
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, r12d
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
G_M000_IG13:
       mov      edi, 0x12C3A
       mov      rsi, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rsi, rax
       mov      edi, r15d
       call     [System.ArgumentOutOfRangeException:ThrowNegative[int](int,System.String)]
       int3     
 
G_M000_IG14:
       mov      rdi, rax
       mov      rsi, r14
       mov      edx, r15d
       mov      rcx, r13
       mov      r8d, r12d
       mov      r9, rbx
       mov      rax, qword ptr [rax]
       mov      rax, qword ptr [rax+0x70]
       call     [rax+0x38]System.Text.Encoding:GetBytes(ulong,int,ulong,int,System.Text.EncoderNLS):int:this
       jmp      G_M000_IG08
 
; Total bytes of code 448

; Assembly listing for method Program:run_benchmark(int,int) (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x43
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 1529.57

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       sub      rsp, 32
       mov      qword ptr [rsp+0xC8], r15
       mov      qword ptr [rsp+0xC0], r14
       mov      qword ptr [rsp+0xB8], r13
       mov      qword ptr [rsp+0xB0], rbx
       vzeroupper 
       lea      rbp, [rsp+0x20]
       mov      edi, dword ptr [rbp+0x84]
       mov      esi, dword ptr [rbp+0x80]
       mov      rdx, gword ptr [rbp+0x78]
       mov      rcx, gword ptr [rbp+0x70]
       mov      r9, gword ptr [rbp+0x68]
       mov      r8d, dword ptr [rbp+0x64]
       mov      eax, dword ptr [rbp+0x60]
 
G_M000_IG02:
       jmp      SHORT G_M000_IG04
       align    [0 bytes for IG06]
 
G_M000_IG03:
       xor      eax, eax
 
G_M000_IG04:
       cmp      eax, esi
       jge      G_M000_IG07
 
G_M000_IG05:
       mov      r10d, r8d
       sub      r10d, dword ptr [rdx+0x18]
       mov      r11d, dword ptr [rdx+0x10]
 
G_M000_IG06:
       mov      ebx, r10d
       cmp      ebx, r11d
       jae      G_M000_IG13
       mov      r15d, dword ptr [rdx+0x14]
       imul     ebx, r15d
       mov      r14d, eax
       sub      r14d, dword ptr [rdx+0x1C]
       cmp      r14d, r15d
       jae      G_M000_IG13
       add      r14d, ebx
       mov      r15d, r14d
       lea      ebx, [r8+rax]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, ebx
       vmovsd   qword ptr [rdx+8*r15+0x20], xmm0
       mov      ebx, r8d
       sub      ebx, dword ptr [rcx+0x18]
       cmp      ebx, dword ptr [rcx+0x10]
       jae      G_M000_IG13
       mov      r15d, dword ptr [rcx+0x14]
       imul     ebx, r15d
       mov      r14d, eax
       sub      r14d, dword ptr [rcx+0x1C]
       cmp      r14d, r15d
       jae      G_M000_IG13
       add      r14d, ebx
       mov      r15d, r14d
       vmovsd   qword ptr [rcx+8*r15+0x20], xmm0
       inc      eax
       cmp      eax, esi
       jl       SHORT G_M000_IG06
 
G_M000_IG07:
       inc      r8d
       cmp      r8d, edi
       jge      G_M000_IG14
       jmp      G_M000_IG03
       align    [0 bytes for IG10]
 
G_M000_IG08:
       xor      r8d, r8d
       test     esi, esi
       jle      G_M000_IG12
 
G_M000_IG09:
       vxorps   xmm0, xmm0, xmm0
       xor      r10d, r10d
       mov      ebx, eax
       sub      ebx, dword ptr [rdx+0x18]
       mov      r11d, dword ptr [rdx+0x10]
 
G_M000_IG10:
       mov      r15d, ebx
       cmp      r15d, r11d
       jae      G_M000_IG13
       mov      r14d, dword ptr [rdx+0x14]
       imul     r15d, r14d
       mov      r13d, r10d
       sub      r13d, dword ptr [rdx+0x1C]
       cmp      r13d, r14d
       jae      G_M000_IG13
       add      r15d, r13d
       mov      r13d, r15d
       vmovsd   xmm1, qword ptr [rdx+8*r13+0x20]
       mov      r15d, r10d
       sub      r15d, dword ptr [rcx+0x18]
       cmp      r15d, dword ptr [rcx+0x10]
       jae      SHORT G_M000_IG13
       mov      r14d, dword ptr [rcx+0x14]
       imul     r15d, r14d
       mov      r13d, r8d
       sub      r13d, dword ptr [rcx+0x1C]
       cmp      r13d, r14d
       jae      SHORT G_M000_IG13
       add      r15d, r13d
       vmulsd   xmm1, xmm1, qword ptr [rcx+8*r15+0x20]
       vaddsd   xmm0, xmm1, xmm0
       inc      r10d
       cmp      r10d, edi
       jl       SHORT G_M000_IG10
 
G_M000_IG11:
       mov      r15d, eax
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG13
       mov      r10d, dword ptr [r9+0x14]
       mov      r11d, r15d
       imul     r11d, r10d
       mov      r13d, r8d
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r10d
       jae      SHORT G_M000_IG13
       add      r11d, r13d
       mov      r10d, r11d
       vmovsd   qword ptr [r9+8*r10+0x20], xmm0
       inc      r8d
       cmp      r8d, esi
       jl       G_M000_IG09
 
G_M000_IG12:
       inc      eax
       cmp      eax, edi
       jge      SHORT G_M000_IG15
       jmp      G_M000_IG08
 
G_M000_IG13:
       call     CORINFO_HELP_RNGCHKFAIL
 
G_M000_IG14:
       xor      eax, eax
       test     edi, edi
       jg       G_M000_IG08
 
G_M000_IG15:
       dec      edi
       mov      r15d, edi
       sub      r15d, dword ptr [r9+0x18]
       cmp      r15d, dword ptr [r9+0x10]
       jae      SHORT G_M000_IG13
       mov      r10d, dword ptr [r9+0x14]
       mov      eax, r15d
       imul     eax, r10d
       dec      esi
       mov      r13d, esi
       sub      r13d, dword ptr [r9+0x1C]
       cmp      r13d, r10d
       jae      SHORT G_M000_IG13
       add      eax, r13d
       vmovsd   xmm0, qword ptr [r9+8*rax+0x20]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG16:
       add      rsp, 176
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 530

; Assembly listing for method System.Text.Encoding:GetBytes(ulong,int,ulong,int,System.Text.EncoderNLS):int:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 108
; 1 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 56
       lea      rbp, [rsp+0x60]
       mov      dword ptr [rbp-0x2C], r8d
       mov      r12, rdi
       mov      r14, rsi
       mov      ebx, edx
       mov      r13, rcx
       mov      r15, r9
 
G_M000_IG02:
       xor      ecx, ecx
       mov      dword ptr [rbp-0x30], ecx
       xor      edi, edi
       mov      dword ptr [rbp-0x38], edi
       cmp      word  ptr [r15+0x24], 0
       mov      eax, dword ptr [rbp-0x2C]
       jne      G_M000_IG07
       mov      rdi, gword ptr [r15+0x10]
       test     rdi, rdi
       je       SHORT G_M000_IG03
       mov      dword ptr [rbp-0x2C], eax
       mov      rdx, qword ptr [rdi]
       mov      rdx, qword ptr [rdx+0x48]
       call     [rdx]System.Text.EncoderFallbackBuffer:get_Remaining():int:this
       test     eax, eax
       mov      eax, dword ptr [rbp-0x2C]
       jg       SHORT G_M000_IG07
 
G_M000_IG03:
       mov      r8, 0xD1FFAB1E
       cmp      qword ptr [r12], r8
       jne      G_M000_IG09
       lea      r8, [rbp-0x40]
       lea      r9, [rbp-0x48]
       mov      rdi, r14
       mov      esi, ebx
       mov      rdx, r13
       mov      dword ptr [rbp-0x2C], eax
       mov      ecx, eax
       call     [System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int]
       mov      rax, qword ptr [rbp-0x40]
       sub      rax, r14
       mov      r9, rax
       shr      r9, 63
       add      rax, r9
       sar      rax, 1
       mov      dword ptr [rbp-0x38], eax
       mov      rcx, qword ptr [rbp-0x48]
       sub      rcx, r13
 
G_M000_IG04:
       mov      r10d, ecx
       cmp      dword ptr [rbp-0x38], ebx
       mov      eax, dword ptr [rbp-0x2C]
       jne      SHORT G_M000_IG06
       mov      dword ptr [r15+0x20], ebx
       mov      eax, r10d
 
G_M000_IG05:
       add      rsp, 56
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      dword ptr [rbp-0x30], r10d
 
G_M000_IG07:
       mov      ecx, dword ptr [rbp-0x30]
       mov      dword ptr [rsp], ecx
       mov      gword ptr [rsp+0x08], r15
       mov      rdi, r12
       mov      rsi, r14
       mov      edx, ebx
       mov      rcx, r13
       mov      r8d, eax
       mov      r9d, dword ptr [rbp-0x38]
       call     [System.Text.Encoding:GetBytesWithFallback(ulong,int,ulong,int,int,int,System.Text.EncoderNLS):int:this]
       nop      
 
G_M000_IG08:
       add      rsp, 56
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG09:
       lea      r9, [rbp-0x38]
       mov      rdi, r12
       mov      rsi, r14
       mov      edx, ebx
       mov      rcx, r13
       mov      dword ptr [rbp-0x2C], eax
       mov      r8d, eax
       mov      r10, qword ptr [r12]
       mov      r10, qword ptr [r10+0x78]
       call     [r10]System.Text.Encoding:GetBytesFast(ulong,int,ulong,int,byref):int:this
       mov      ecx, eax
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 291

; Assembly listing for method System.Text.UTF8Encoding:GetBytesFast(ulong,int,ulong,int,byref):int:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
       push     r15
       push     r14
       push     rbx
       sub      rsp, 16
       mov      rbx, rsi
       mov      r15, rcx
       mov      ecx, r8d
       mov      r14, r9
 
G_M000_IG02:
       lea      r8, [rsp+0x08]
       lea      r9, [rsp]
       mov      rdi, rbx
       mov      esi, edx
       mov      rdx, r15
       call     [System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int]
       mov      rax, qword ptr [rsp+0x08]
       sub      rax, rbx
       mov      rcx, rax
       shr      rcx, 63
       add      rax, rcx
       sar      rax, 1
       mov      dword ptr [r14], eax
       mov      rax, qword ptr [rsp]
       sub      rax, r15
 
G_M000_IG03:
       add      rsp, 16
       pop      rbx
       pop      r14
       pop      r15
       ret      
 
; Total bytes of code 85

; Assembly listing for method System.Text.Unicode.Utf8Utility:TranscodeToUtf8(ulong,int,ulong,int,byref,byref):int (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 13 inlinees with PGO data; 12 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x30]
       mov      bword ptr [rbp-0x30], r9
       mov      rbx, rdi
       mov      r14d, esi
       mov      r15, rdx
       mov      r13d, ecx
       mov      r12, r8
 
G_M000_IG02:
       cmp      r14d, r13d
       mov      edx, r13d
       cmovle   edx, r14d
       mov      rdi, rbx
       mov      rsi, r15
       call     [System.Text.Ascii:NarrowUtf16ToAscii(ulong,ulong,ulong):ulong]
       lea      rbx, [rbx+2*rax]
       add      r15, rax
       cmp      eax, r14d
       jne      SHORT G_M000_IG05
 
G_M000_IG03:
       mov      qword ptr [r12], rbx
       mov      r12, bword ptr [rbp-0x30]
       mov      qword ptr [r12], r15
       xor      eax, eax
 
G_M000_IG04:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG05:
       sub      r14d, eax
       sub      r13d, eax
       cmp      r14d, 2
       jl       G_M000_IG28
       mov      eax, r14d
       lea      rax, [rbx+2*rax-0x04]
 
G_M000_IG06:
       mov      ecx, dword ptr [rbx]
 
G_M000_IG07:
       test     ecx, 0xD1FFAB1E
       jne      G_M000_IG14
       cmp      r13d, 2
       jl       G_M000_IG29
       mov      edx, ecx
       shr      edx, 8
       or       edx, ecx
       mov      word  ptr [r15], dx
       add      rbx, 4
       add      r15, 2
       add      r13d, -2
       mov      rcx, rax
       sub      rcx, rbx
       mov      rdx, rcx
       shr      rdx, 63
       add      rcx, rdx
       sar      rcx, 1
       add      ecx, 2
       movsxd   rdx, r13d
       cmp      rcx, rdx
       jle      SHORT G_M000_IG08
       jmp      SHORT G_M000_IG09
 
G_M000_IG08:
       mov      rdx, rcx
 
G_M000_IG09:
       mov      ecx, edx
       shr      ecx, 3
       xor      edi, edi
       jmp      SHORT G_M000_IG11
 
G_M000_IG10:
       vmovups  xmm0, xmmword ptr [rbx]
       vptest   xmm0, xmmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG12
       vpackuswb xmm0, xmm0, xmm0
       vmovq    qword ptr [r15], xmm0
       add      rbx, 16
       add      r15, 8
       inc      edi
 
G_M000_IG11:
       cmp      edi, ecx
       jb       SHORT G_M000_IG10
       shl      edi, 3
       sub      r13d, edi
       test     dl, 4
       je       G_M000_IG26
       mov      rcx, qword ptr [rbx]
       mov      rdx, 0xD1FFAB1E
       test     rcx, rdx
       jne      SHORT G_M000_IG13
       vmovd    xmm0, rcx
       vpackuswb xmm0, xmm0, xmm0
       vmovd    dword ptr [r15], xmm0
       add      rbx, 8
       jmp      G_M000_IG25
 
G_M000_IG12:
       lea      ecx, [8*rdi]
       sub      r13d, ecx
       vmovd    rcx, xmm0
       mov      rdx, 0xD1FFAB1E
       test     rcx, rdx
       jne      SHORT G_M000_IG13
       vpackuswb xmm1, xmm0, xmm0
       vmovd    dword ptr [r15], xmm1
       add      rbx, 8
       add      r15, 4
       add      r13d, -4
       vpextrq  rcx, xmm0, 1
 
G_M000_IG13:
       mov      edx, ecx
       test     edx, 0xD1FFAB1E
       jne      G_M000_IG17
       mov      edi, edx
       shr      edi, 8
       or       edi, edx
       mov      word  ptr [r15], di
       add      rbx, 4
       add      r15, 2
       add      r13d, -2
       shr      rcx, 32
       mov      edx, ecx
       mov      ecx, edx
 
G_M000_IG14:
       test     ecx, 0xFF80
       jne      SHORT G_M000_IG15
       test     r13d, r13d
       je       G_M000_IG37
       mov      byte  ptr [r15], cl
       add      rbx, 2
       inc      r15
       dec      r13d
       cmp      rbx, rax
       ja       G_M000_IG27
       mov      ecx, dword ptr [rbx]
 
G_M000_IG15:
       test     ecx, 0xF800
       jne      G_M000_IG21
 
G_M000_IG16:
       lea      edx, [rcx+D1FFAB1EH]
       cmp      edx, 0xD1FFAB1E
       ja       SHORT G_M000_IG18
       cmp      r13d, 4
       jl       G_M000_IG29
       mov      edx, ecx
       shr      edx, 6
       and      edx, 0xD1FFAB1E
       shl      ecx, 8
       and      ecx, 0xD1FFAB1E
       add      ecx, edx
       add      ecx, 0xD1FFAB1E
       mov      dword ptr [r15], ecx
       add      rbx, 4
       add      r15, 4
       add      r13d, -4
       cmp      rbx, rax
       ja       G_M000_IG27
       mov      ecx, dword ptr [rbx]
       lea      edx, [rcx-0x80]
       movzx    rdx, dx
       cmp      edx, 0x780
       jb       SHORT G_M000_IG16
       jmp      G_M000_IG07
 
G_M000_IG17:
       mov      ecx, edx
       jmp      G_M000_IG14
 
G_M000_IG18:
       cmp      r13d, 2
       jl       G_M000_IG37
       lea      edx, [4*rcx]
       and      edx, 0x1F00
       mov      edi, ecx
       and      edi, 63
       lea      edx, [rdx+rdi+0xC080]
       movzx    rdx, dx
       movbe    word  ptr [r15], dx
       cmp      ecx, 0xD1FFAB1E
       jae      SHORT G_M000_IG20
       cmp      r13d, 3
       jl       SHORT G_M000_IG19
       shr      ecx, 16
       mov      byte  ptr [r15+0x02], cl
       add      rbx, 4
       add      r15, 3
       add      r13d, -3
       jmp      G_M000_IG26
 
G_M000_IG19:
       add      rbx, 2
       add      r15, 2
       jmp      G_M000_IG37
 
G_M000_IG20:
       add      rbx, 2
       add      r15, 2
       add      r13d, -2
       cmp      rbx, rax
       ja       G_M000_IG27
       mov      ecx, dword ptr [rbx]
 
G_M000_IG21:
       lea      edx, [rcx-0xD800]
       test     edx, 0xF800
       je       G_M000_IG24
       test     ecx, 0xD1FFAB1E
       je       G_M000_IG22
       lea      edx, [rcx+D1FFAB1EH]
       cmp      edx, 0xD1FFAB1E
       jb       G_M000_IG22
       cmp      r13d, 6
       jl       G_M000_IG22
       lea      edx, [4*rcx]
       and      edx, 0x3F00
       mov      edi, ecx
       and      edi, 63
       shl      edi, 16
       or       edx, edi
       mov      edi, ecx
       shr      edi, 4
       and      edi, 0xD1FFAB1E
       mov      esi, ecx
       shr      esi, 12
       and      esi, 15
       or       edi, esi
       add      edx, edi
       add      edx, 0xD1FFAB1E
       mov      dword ptr [r15], edx
       mov      edx, ecx
       shr      edx, 22
       and      edx, 63
       shr      ecx, 8
       and      ecx, 0x3F00
       add      ecx, edx
       add      ecx, 0x8080
       mov      word  ptr [r15+0x04], cx
       add      rbx, 4
       add      r15, 6
       add      r13d, -6
       cmp      rbx, rax
       ja       G_M000_IG27
       mov      ecx, dword ptr [rbx]
       test     ecx, 0xF800
       jne      G_M000_IG21
       jmp      G_M000_IG07
 
G_M000_IG22:
       cmp      r13d, 3
       jl       G_M000_IG37
       lea      edx, [4*rcx]
       and      edx, 0x3F00
       movzx    rdi, cx
       shr      edi, 12
       add      edx, edi
       add      edx, 0x80E0
       mov      word  ptr [r15], dx
       mov      edx, ecx
       and      edx, 63
       or       edx, -128
       mov      byte  ptr [r15+0x02], dl
       add      rbx, 2
       add      r15, 3
       add      r13d, -3
       cmp      ecx, 0xD1FFAB1E
       jae      SHORT G_M000_IG23
       test     r13d, r13d
       je       G_M000_IG37
       shr      ecx, 16
       mov      byte  ptr [r15], cl
       add      rbx, 2
       inc      r15
       dec      r13d
       cmp      rbx, rax
       ja       G_M000_IG27
       mov      ecx, dword ptr [rbx]
       test     ecx, 0xF800
       jne      G_M000_IG21
       jmp      G_M000_IG07
 
G_M000_IG23:
       cmp      rbx, rax
       ja       SHORT G_M000_IG27
       mov      ecx, dword ptr [rbx]
       jmp      G_M000_IG14
 
G_M000_IG24:
       lea      edx, [rcx+D1FFAB1EH]
       test     edx, 0xD1FFAB1E
       jne      G_M000_IG38
       cmp      r13d, 4
       jl       G_M000_IG37
       add      ecx, 64
       mov      edx, ecx
       and      edx, 3
       shl      edx, 20
       or       edx, 0xD1FFAB1E
       mov      edi, ecx
       and      edi, 0xD1FFAB1E
       bswap    edi
       rol      edi, 16
       or       edx, edi
       mov      edi, ecx
       shr      edi, 6
       and      edi, 0xD1FFAB1E
       or       edx, edi
       and      ecx, 252
       shl      ecx, 6
       or       ecx, edx
       mov      dword ptr [r15], ecx
       add      rbx, 4
 
G_M000_IG25:
       add      r15, 4
       add      r13d, -4
 
G_M000_IG26:
       cmp      rbx, rax
       jbe      G_M000_IG06
 
G_M000_IG27:
       sub      rax, rbx
       mov      r14, rax
       shr      r14, 63
       add      r14, rax
       sar      r14, 1
       add      r14d, 2
 
G_M000_IG28:
       test     r14d, r14d
       je       G_M000_IG35
       movzx    rax, word  ptr [rbx]
       jmp      SHORT G_M000_IG30
 
G_M000_IG29:
       movzx    rax, cx
 
G_M000_IG30:
       cmp      eax, 127
       ja       SHORT G_M000_IG31
       test     r13d, r13d
       je       G_M000_IG37
       mov      byte  ptr [r15], al
       add      rbx, 2
       inc      r15
       jmp      SHORT G_M000_IG34
 
G_M000_IG31:
       cmp      eax, 0x800
       jae      SHORT G_M000_IG32
       cmp      r13d, 2
       jl       SHORT G_M000_IG37
       mov      ecx, eax
       and      ecx, 63
       or       ecx, -128
       mov      byte  ptr [r15+0x01], cl
       shr      eax, 6
       or       eax, -64
       mov      byte  ptr [r15], al
       add      rbx, 2
       add      r15, 2
       jmp      SHORT G_M000_IG34
 
G_M000_IG32:
       lea      ecx, [rax-0xD800]
       cmp      ecx, 0x7FF
       jbe      SHORT G_M000_IG33
       cmp      r13d, 3
       jl       SHORT G_M000_IG37
       mov      ecx, eax
       and      ecx, 63
       or       ecx, -128
       mov      byte  ptr [r15+0x02], cl
       mov      ecx, eax
       shr      ecx, 6
       and      ecx, 63
       or       ecx, -128
       mov      byte  ptr [r15+0x01], cl
       shr      eax, 12
       or       eax, -32
       mov      byte  ptr [r15], al
       add      rbx, 2
       add      r15, 3
       jmp      SHORT G_M000_IG34
 
G_M000_IG33:
       cmp      eax, 0xDBFF
       ja       SHORT G_M000_IG38
       jmp      SHORT G_M000_IG36
 
G_M000_IG34:
       cmp      r14d, 1
       jg       SHORT G_M000_IG37
 
G_M000_IG35:
       xor      eax, eax
       jmp      SHORT G_M000_IG39
 
G_M000_IG36:
       mov      eax, 2
       jmp      SHORT G_M000_IG39
 
G_M000_IG37:
       mov      eax, 1
       jmp      SHORT G_M000_IG39
 
G_M000_IG38:
       mov      eax, 3
 
G_M000_IG39:
       mov      qword ptr [r12], rbx
       mov      r12, bword ptr [rbp-0x30]
       mov      qword ptr [r12], r15
 
G_M000_IG40:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
RWD00  	dq	FF80FF80FF80FF80h, FF80FF80FF80FF80h

; Total bytes of code 1354

; Assembly listing for method System.Text.Ascii:NarrowUtf16ToAscii(ulong,ulong,ulong):ulong (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 100
; 3 inlinees with PGO data; 9 single block inlinees; 13 inlinees without PGO data

G_M000_IG01:
       push     rbp
       vzeroupper 
       mov      rbp, rsp
 
G_M000_IG02:
       xor      eax, eax
       cmp      rdx, 32
       jae      G_M000_IG13
 
G_M000_IG03:
       sub      rdx, rax
       cmp      rdx, 4
       jb       SHORT G_M000_IG06
 
G_M000_IG04:
       lea      rcx, [rax+rdx-0x04]
 
G_M000_IG05:
       mov      r8, qword ptr [rdi+2*rax]
       mov      r9, 0xD1FFAB1E
       test     r8, r9
       jne      SHORT G_M000_IG11
       vmovd    xmm0, r8
       vpackuswb xmm0, xmm0, xmm0
       vmovd    dword ptr [rsi+rax], xmm0
       add      rax, 4
       cmp      rax, rcx
       jbe      SHORT G_M000_IG05
 
G_M000_IG06:
       test     dl, 2
       je       SHORT G_M000_IG08
 
G_M000_IG07:
       mov      ecx, dword ptr [rdi+2*rax]
       test     ecx, 0xD1FFAB1E
       jne      SHORT G_M000_IG12
       lea      r8, [rsi+rax]
       mov      byte  ptr [r8], cl
       shr      ecx, 16
       mov      byte  ptr [r8+0x01], cl
       add      rax, 2
 
G_M000_IG08:
       test     dl, 1
       je       SHORT G_M000_IG10
       movzx    rcx, word  ptr [rdi+2*rax]
       cmp      ecx, 127
       ja       SHORT G_M000_IG10
 
G_M000_IG09:
       mov      byte  ptr [rsi+rax], cl
       inc      rax
 
G_M000_IG10:
       vzeroupper 
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      ecx, r8d
       test     ecx, 0xD1FFAB1E
       jne      SHORT G_M000_IG12
       lea      rdx, [rsi+rax]
       mov      byte  ptr [rdx], cl
       shr      ecx, 16
       mov      byte  ptr [rdx+0x01], cl
       shr      r8, 32
       mov      ecx, r8d
       add      rax, 2
 
G_M000_IG12:
       test     ecx, 0xFF80
       je       SHORT G_M000_IG09
       jmp      SHORT G_M000_IG10
 
G_M000_IG13:
       mov      r8, qword ptr [rdi]
       mov      rcx, 0xD1FFAB1E
       test     r8, rcx
       jne      SHORT G_M000_IG11
       cmp      rdx, 64
       jb       G_M000_IG20
       mov      rax, rdi
       vmovups  ymm0, ymmword ptr [rax]
       vptest   ymm0, ymmword ptr [reloc @RWD00]
       je       SHORT G_M000_IG14
       xor      eax, eax
       jmp      G_M000_IG19
 
G_M000_IG14:
       mov      r8, rsi
       vpand    ymm1, ymm0, ymmword ptr [reloc @RWD32]
       vpand    ymm0, ymm0, ymmword ptr [reloc @RWD32]
       vpackuswb ymm0, ymm1, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [r8], xmm0
       mov      ecx, 16
       test     sil, 16
       jne      SHORT G_M000_IG15
       vmovups  ymm0, ymmword ptr [rax+0x20]
       vptest   ymm0, ymmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG17
       vpand    ymm1, ymm0, ymmword ptr [reloc @RWD32]
       vpand    ymm0, ymm0, ymmword ptr [reloc @RWD32]
       vpackuswb ymm0, ymm1, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [r8+0x10], xmm0
 
G_M000_IG15:
       mov      rcx, rsi
       and      rcx, 31
       neg      rcx
       add      rcx, 32
       lea      r9, [rdx-0x20]
 
G_M000_IG16:
       vmovups  ymm0, ymmword ptr [rax+2*rcx]
       vmovups  ymm1, ymmword ptr [rax+2*rcx+0x20]
       vpor     ymm2, ymm0, ymm1
       vptest   ymm2, ymmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG18
       vpand    ymm0, ymm0, ymmword ptr [reloc @RWD32]
       vpand    ymm1, ymm1, ymmword ptr [reloc @RWD32]
       vpackuswb ymm0, ymm0, ymm1
       vpermq   ymm0, ymm0, -40
       vmovups  ymmword ptr [r8+rcx], ymm0
       add      rcx, 32
       cmp      rcx, r9
       jbe      SHORT G_M000_IG16
 
G_M000_IG17:
       mov      rax, rcx
       jmp      SHORT G_M000_IG19
 
G_M000_IG18:
       vptest   ymm0, ymmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG17
       vpand    ymm1, ymm0, ymmword ptr [reloc @RWD32]
       vpand    ymm0, ymm0, ymmword ptr [reloc @RWD32]
       vpackuswb ymm0, ymm1, ymm0
       vpermq   ymm0, ymm0, -40
       vmovups  xmmword ptr [r8+rcx], xmm0
       add      rcx, 16
       jmp      SHORT G_M000_IG17
 
G_M000_IG19:
       jmp      G_M000_IG03
 
G_M000_IG20:
       mov      rax, rdi
       vmovups  xmm0, xmmword ptr [rax]
       vptest   xmm0, xmmword ptr [reloc @RWD00]
       je       SHORT G_M000_IG21
       xor      eax, eax
       jmp      G_M000_IG26
 
G_M000_IG21:
       mov      rcx, rsi
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx], xmm0
       mov      r8d, 8
       test     sil, 8
       jne      SHORT G_M000_IG22
       vmovups  xmm0, xmmword ptr [rax+0x10]
       vptest   xmm0, xmmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG24
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx+0x08], xmm0
 
G_M000_IG22:
       mov      r8, rsi
       and      r8, 15
       mov      r9d, 16
       sub      r9, r8
       mov      r8, r9
       mov      r9, rdx
       sub      r9, 16
 
G_M000_IG23:
       vmovups  xmm0, xmmword ptr [rax+2*r8]
       vmovups  xmm1, xmmword ptr [rax+2*r8+0x10]
       vpor     xmm2, xmm0, xmm1
       vptest   xmm2, xmmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG25
       vpackuswb xmm0, xmm0, xmm1
       vmovups  xmmword ptr [rcx+r8], xmm0
       add      r8, 16
       cmp      r8, r9
       jbe      SHORT G_M000_IG23
 
G_M000_IG24:
       mov      rax, r8
       jmp      SHORT G_M000_IG26
 
G_M000_IG25:
       vptest   xmm0, xmmword ptr [reloc @RWD00]
       jne      SHORT G_M000_IG24
       vpackuswb xmm0, xmm0, xmm0
       vmovsd   qword ptr [rcx+r8], xmm0
       add      r8, 8
       jmp      SHORT G_M000_IG24
 
G_M000_IG26:
       jmp      G_M000_IG03
 
RWD00  	dq	FF80FF80FF80FF80h, FF80FF80FF80FF80h, FF80FF80FF80FF80h, FF80FF80FF80FF80h
RWD32  	dq	00FF00FF00FF00FFh, 00FF00FF00FF00FFh, 00FF00FF00FF00FFh, 00FF00FF00FF00FFh

; Total bytes of code 651

; Assembly listing for method System.ConsolePal+UnixConsoleStream:Write(System.ReadOnlySpan`1[ubyte]):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rsp based frame
; fully interruptible
; No PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      rdi, gword ptr [rdi+0x18]
       mov      ecx, 1
 
G_M000_IG03:
       tail.jmp [System.ConsolePal:Write(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlySpan`1[ubyte],bool)]
 
; Total bytes of code 15

; Assembly listing for method System.ConsolePal:Write(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlySpan`1[ubyte],bool) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 2 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 40
       lea      rbp, [rsp+0x50]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      rbx, rdi
       mov      r13, rsi
       mov      r14d, edx
       mov      r15d, ecx
 
G_M000_IG02:
       cmp      byte  ptr [(reloc)], 0
       je       SHORT G_M000_IG10
 
G_M000_IG03:
       xor      rdi, rdi
       test     r14d, r14d
       cmovne   rdi, r13
       mov      bword ptr [rbp-0x30], rdi
       mov      r13, rdi
       test     r14d, r14d
       jle      SHORT G_M000_IG08
 
G_M000_IG04:
       movzx    r12, r15b
       test     r12d, r12d
       je       G_M000_IG14
       mov      eax, dword ptr [(reloc)]
 
G_M000_IG05:
       mov      dword ptr [rbp-0x34], eax
       mov      rdi, rbx
       mov      rsi, r13
       mov      edx, r14d
       call     [Interop+Sys:Write(System.Runtime.InteropServices.SafeHandle,ulong,int):int]
       mov      dword ptr [rbp-0x38], eax
       test     eax, eax
       jl       SHORT G_M000_IG11
       test     r12d, r12d
       je       SHORT G_M000_IG06
       mov      rdi, r13
       mov      esi, eax
       mov      edx, dword ptr [rbp-0x34]
       call     [System.ConsolePal:UpdatedCachedCursorPosition(ulong,int,int)]
       mov      eax, dword ptr [rbp-0x38]
 
G_M000_IG06:
       sub      r14d, eax
       cdqe     
       add      r13, rax
 
G_M000_IG07:
       test     r14d, r14d
       jg       SHORT G_M000_IG04
 
G_M000_IG08:
       xor      eax, eax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG09:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      G_M000_IG03
 
G_M000_IG11:
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r12d, eax
       mov      edi, r12d
       call     Interop+Sys:ConvertErrorPlatformToPal(int):int
       cmp      eax, 0x10043
       je       SHORT G_M000_IG12
       cmp      eax, 0x10006
       jne      SHORT G_M000_IG13
       lea      rcx, [rbp-0x40]
       mov      rdi, rbx
       mov      esi, 4
       mov      edx, -1
       call     [Interop+Sys:Poll(System.Runtime.InteropServices.SafeHandle,short,int,byref):int]
       jmp      SHORT G_M000_IG07
 
G_M000_IG12:
       add      rsp, 40
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG13:
       mov      dword ptr [rbp-0x48], eax
       mov      dword ptr [rbp-0x44], r12d
       mov      rdi, qword ptr [rbp-0x48]
       xor      rsi, rsi
       xor      edx, edx
       call     [Interop:GetExceptionForIoErrno(Interop+ErrorInfo,System.String,bool):System.Exception]
       mov      rdi, rax
       call     CORINFO_HELP_THROW
 
G_M000_IG14:
       mov      eax, -1
       jmp      G_M000_IG05
 
; Total bytes of code 287

; Assembly listing for method Interop+Sys:Write(System.Runtime.InteropServices.SafeHandle,ulong,int):int (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 5 inlinees with PGO data; 6 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 104
       lea      rbp, [rsp+0x90]
       mov      qword ptr [rbp-0x90], rsp
       mov      rbx, rdi
       mov      r15, rsi
       mov      r14d, edx
 
G_M000_IG02:
       lea      rdi, [rbp-0x80]
       mov      rsi, r10
       call     CORINFO_HELP_INIT_PINVOKE_FRAME
       mov      r13, rax
       mov      rax, rsp
       mov      qword ptr [rbp-0x60], rax
       mov      rax, rbp
       mov      qword ptr [rbp-0x50], rax
       xor      eax, eax
       mov      dword ptr [rbp-0x30], eax
 
G_M000_IG03:
       mov      gword ptr [rbp-0x40], rax
       mov      byte  ptr [rbp-0x38], 0
 
G_M000_IG04:
       mov      gword ptr [rbp-0x40], rbx
 
G_M000_IG05:
       mov      eax, dword ptr [rbx+0x10]
       mov      dword ptr [rbp-0x34], eax
       test     al, 1
       jne      G_M000_IG12
       lea      rdi, bword ptr [rbx+0x10]
       lea      ecx, [rax+0x04]
       lock     
       cmpxchg  dword ptr [rdi], ecx
       cmp      eax, dword ptr [rbp-0x34]
       jne      SHORT G_M000_IG05
       mov      byte  ptr [rbp-0x38], 1
       mov      rdi, gword ptr [rbp-0x40]
       mov      rbx, qword ptr [rdi+0x08]
       xor      edi, edi
       mov      rax, 0xD1FFAB1E
 
G_M000_IG06:
       call     rax ; Interop+Sys:SetErrNo(int)
       mov      rdi, rbx
       mov      rsi, r15
       mov      edx, r14d
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x70], rax
       lea      rax, G_M000_IG09
       mov      qword ptr [rbp-0x58], rax
       lea      rax, bword ptr [rbp-0x80]
       mov      qword ptr [r13+0x10], rax
       mov      byte  ptr [r13+0x0C], 0
 
G_M000_IG07:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG08:
       call     rax ; Interop+Sys:<Write>g____PInvoke|37_0(long,ulong,int):int
 
G_M000_IG09:
       mov      byte  ptr [r13+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG10
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG10:
       mov      rcx, bword ptr [rbp-0x78]
       mov      qword ptr [r13+0x10], rcx
       mov      dword ptr [rbp-0x30], eax
       mov      rax, 0xD1FFAB1E
 
G_M000_IG11:
       call     rax ; Interop+Sys:GetErrNo():int
       mov      dword ptr [rbp-0x2C], eax
       jmp      SHORT G_M000_IG13
 
G_M000_IG12:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
G_M000_IG13:
       mov      rdi, rsp
       call     G_M000_IG17
 
G_M000_IG14:
       jmp      SHORT G_M000_IG16
 
G_M000_IG15:
       add      rsp, 104
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG16:
       mov      edi, dword ptr [rbp-0x2C]
       call     System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
       mov      eax, dword ptr [rbp-0x30]
       jmp      SHORT G_M000_IG15
 
G_M000_IG17:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x90]
 
G_M000_IG18:
       cmp      byte  ptr [rbp-0x38], 0
       je       G_M000_IG25
       mov      rbx, gword ptr [rbp-0x40]
       mov      rax, gword ptr [rbp-0x40]
       cmp      byte  ptr [rax], al
 
G_M000_IG19:
       mov      r15d, dword ptr [rbx+0x10]
       test     r15d, -4
       je       G_M000_IG27
       mov      eax, r15d
       and      eax, -3
       cmp      eax, 4
       jne      SHORT G_M000_IG21
 
G_M000_IG20:
       cmp      byte  ptr [rbx+0x14], 0
       je       SHORT G_M000_IG21
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x20]System.Runtime.InteropServices.SafeHandle:get_IsInvalid():bool:this
       xor      r14d, r14d
       test     eax, eax
       sete     r14b
       jmp      SHORT G_M000_IG22
 
G_M000_IG21:
       xor      r14d, r14d
 
G_M000_IG22:
       movzx    rdi, r14b
       lea      ecx, [r15-0x04]
       mov      eax, r15d
       and      eax, -4
       cmp      eax, 4
       jne      SHORT G_M000_IG23
       or       ecx, 1
 
G_M000_IG23:
       lea      rdx, bword ptr [rbx+0x10]
       mov      eax, r15d
       lock     
       cmpxchg  dword ptr [rdx], ecx
       cmp      eax, r15d
       jne      SHORT G_M000_IG19
       test     edi, edi
       je       SHORT G_M000_IG25
 
G_M000_IG24:
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r15d, eax
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x38]System.Runtime.InteropServices.SafeHandle:ReleaseHandle():bool:this
       mov      edi, r15d
       call     System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
 
G_M000_IG25:
       nop      
 
G_M000_IG26:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG27:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
; Total bytes of code 498

; Assembly listing for method System.Runtime.InteropServices.SafeHandle:DangerousAddRef(byref):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 104
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      eax, dword ptr [rdi+0x10]
       mov      dword ptr [rbp-0x04], eax
       test     al, 1
       jne      SHORT G_M000_IG04
       lea      rcx, bword ptr [rdi+0x10]
       lea      edx, [rax+0x04]
       lock     
       cmpxchg  dword ptr [rcx], edx
       cmp      eax, dword ptr [rbp-0x04]
       jne      SHORT G_M000_IG02
       mov      byte  ptr [rsi], 1
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
G_M000_IG04:
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
; Total bytes of code 52

; Assembly listing for method System.Runtime.InteropServices.SafeHandle:InternalRelease(bool):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       lea      rbp, [rsp+0x30]
       mov      rbx, rdi
       mov      r15d, esi
 
G_M000_IG02:
       mov      r14d, dword ptr [rbx+0x10]
       movzx    r13, r15b
       test     r13d, r13d
       jne      SHORT G_M000_IG08
 
G_M000_IG03:
       mov      r12d, r14d
       and      r12d, -4
       je       SHORT G_M000_IG10
       mov      eax, r14d
       and      eax, -3
       cmp      eax, 4
       je       SHORT G_M000_IG11
 
G_M000_IG04:
       xor      ecx, ecx
 
G_M000_IG05:
       movzx    rdx, cl
       lea      esi, [r14-0x04]
       cmp      r12d, 4
       je       SHORT G_M000_IG12
       test     r13d, r13d
       jne      SHORT G_M000_IG13
 
G_M000_IG06:
       lea      rdi, bword ptr [rbx+0x10]
       mov      eax, r14d
       lock     
       cmpxchg  dword ptr [rdi], esi
       cmp      eax, r14d
       jne      SHORT G_M000_IG02
       test     edx, edx
       jne      SHORT G_M000_IG14
 
G_M000_IG07:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       test     r14b, 2
       je       SHORT G_M000_IG03
 
G_M000_IG09:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       mov      rdi, rbx
       call     [System.ThrowHelper:ThrowObjectDisposedException(System.Object)]
       int3     
 
G_M000_IG11:
       cmp      byte  ptr [rbx+0x14], 0
       je       SHORT G_M000_IG04
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x20]System.Runtime.InteropServices.SafeHandle:get_IsInvalid():bool:this
       xor      ecx, ecx
       test     eax, eax
       sete     cl
       jmp      SHORT G_M000_IG05
 
G_M000_IG12:
       or       esi, 1
       test     r13d, r13d
       je       SHORT G_M000_IG06
 
G_M000_IG13:
       or       esi, 2
       jmp      SHORT G_M000_IG06
 
G_M000_IG14:
       call     System.Runtime.InteropServices.Marshal:GetLastPInvokeError():int
       mov      r15d, eax
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x40]
       call     [rax+0x38]System.Runtime.InteropServices.SafeHandle:ReleaseHandle():bool:this
       mov      edi, r15d
 
G_M000_IG15:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       jmp      System.Runtime.InteropServices.Marshal:SetLastPInvokeError(int)
 
; Total bytes of code 225

; Assembly listing for method System.ConsolePal:UpdatedCachedCursorPosition(ulong,int,int) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 100
; 5 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 56
       lea      rbp, [rsp+0x60]
       mov      qword ptr [rbp-0x60], rsp
       mov      r14, rdi
       mov      r15d, esi
       mov      ebx, edx
 
G_M000_IG02:
       mov      rsi, 0xD1FFAB1E
       mov      rdi, gword ptr [rsi]
       test     rdi, rdi
       je       G_M000_IG23
 
G_M000_IG03:
       mov      gword ptr [rbp-0x58], rdi
       xor      esi, esi
       mov      dword ptr [rbp-0x30], esi
 
G_M000_IG04:
       cmp      byte  ptr [rbp-0x30], 0
       jne      SHORT G_M000_IG08
       lea      rsi, [rbp-0x30]
       call     System.Threading.Monitor:ReliableEnter(System.Object,byref)
       mov      r13, 0xD1FFAB1E
       cmp      ebx, dword ptr [r13]
       jne      SHORT G_M000_IG07
       cmp      byte  ptr [(reloc)], 0
       je       G_M000_IG19
 
G_M000_IG05:
       mov      rdi, 0xD1FFAB1E
       xor      ecx, ecx
       mov      eax, 1
       lock     
       cmpxchg  dword ptr [rdi], ecx
       xor      edi, edi
       cmp      eax, 1
       sete     dil
       test     edi, edi
       jne      G_M000_IG16
 
G_M000_IG06:
       xor      edi, edi
       cmp      dword ptr [(reloc)], 0
       setge    dil
       test     edi, edi
       jne      G_M000_IG15
 
G_M000_IG07:
       mov      dword ptr [(reloc)], -1
       inc      dword ptr [r13]
       jmp      G_M000_IG20
 
G_M000_IG08:
       call     [System.Threading.Monitor:ThrowLockTakenException()]
       int3     
 
G_M000_IG09:
       cmp      r15d, 255
       mov      dword ptr [rbp-0x34], eax
       jg       SHORT G_M000_IG07
       lea      rdi, [rbp-0x40]
       lea      rsi, [rbp-0x48]
       call     [System.ConsolePal:GetWindowSize(byref,byref)]
       xor      r13d, r13d
       jmp      G_M000_IG18
 
G_M000_IG10:
       movsxd   rax, r13d
       movzx    rax, byte  ptr [r14+rax]
       cmp      eax, 127
       jge      SHORT G_M000_IG11
       cmp      eax, 32
       jl       SHORT G_M000_IG11
       inc      r12d
       cmp      r12d, dword ptr [rbp-0x40]
       jl       SHORT G_M000_IG17
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       jmp      G_M000_IG20
 
G_M000_IG11:
       cmp      eax, 13
       jne      SHORT G_M000_IG12
       xor      r12d, r12d
       jmp      SHORT G_M000_IG17
 
G_M000_IG12:
       cmp      eax, 10
       jne      SHORT G_M000_IG13
       xor      r12d, r12d
       mov      eax, dword ptr [rbp-0x34]
       inc      eax
       cmp      eax, dword ptr [rbp-0x48]
       mov      dword ptr [rbp-0x34], eax
       jl       SHORT G_M000_IG17
       mov      eax, dword ptr [rbp-0x48]
       dec      eax
       mov      dword ptr [rbp-0x34], eax
       jmp      SHORT G_M000_IG17
 
G_M000_IG13:
       cmp      eax, 8
       jne      SHORT G_M000_IG14
       test     r12d, r12d
       jle      SHORT G_M000_IG17
       dec      r12d
       jmp      SHORT G_M000_IG17
 
G_M000_IG14:
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       jmp      SHORT G_M000_IG20
 
G_M000_IG15:
       mov      r12d, dword ptr [(reloc)]
       mov      eax, dword ptr [(reloc)]
       jmp      G_M000_IG09
 
G_M000_IG16:
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       mov      dword ptr [(reloc)], -1
       jmp      G_M000_IG06
 
G_M000_IG17:
       inc      r13d
 
G_M000_IG18:
       cmp      r13d, r15d
       jl       G_M000_IG10
       mov      edi, r12d
       mov      r15d, dword ptr [rbp-0x34]
       mov      esi, r15d
       mov      byte  ptr [rbp-0x50], 1
       mov      dword ptr [rbp-0x4C], ebx
       mov      rdx, qword ptr [rbp-0x50]
       call     [System.ConsolePal:SetCachedCursorPosition(int,int,System.Nullable`1[int])]
       jmp      SHORT G_M000_IG20
 
G_M000_IG19:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      G_M000_IG05
 
G_M000_IG20:
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG21
       mov      rdi, gword ptr [rbp-0x58]
       call     System.Threading.Monitor:Exit(System.Object)
 
G_M000_IG21:
       nop      
 
G_M000_IG22:
       add      rsp, 56
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG23:
       call     [System.Console:<get_Out>g__EnsureInitialized|26_0():System.IO.TextWriter]
       mov      rdi, rax
       jmp      G_M000_IG03
 
G_M000_IG24:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x60]
 
G_M000_IG25:
       cmp      byte  ptr [rbp-0x30], 0
       je       SHORT G_M000_IG26
       mov      rdi, gword ptr [rbp-0x58]
       call     System.Threading.Monitor:Exit(System.Object)
 
G_M000_IG26:
       nop      
 
G_M000_IG27:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 516

; Assembly listing for method System.ConsolePal:TryGetCachedCursorPosition(byref,byref):bool (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 2 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
       mov      r15, rsi
 
G_M000_IG02:
       cmp      byte  ptr [(reloc)], 0
       je       SHORT G_M000_IG07
 
G_M000_IG03:
       mov      rcx, 0xD1FFAB1E
       xor      edx, edx
       mov      eax, 1
       lock     
       cmpxchg  dword ptr [rcx], edx
       cmp      eax, 1
       sete     al
       movzx    rax, al
       test     eax, eax
       jne      SHORT G_M000_IG08
 
G_M000_IG04:
       xor      eax, eax
       cmp      dword ptr [(reloc)], 0
       setge    al
       test     eax, eax
       jne      SHORT G_M000_IG09
       xor      ecx, ecx
       mov      dword ptr [rbx], ecx
 
G_M000_IG05:
       mov      dword ptr [r15], ecx
 
G_M000_IG06:
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG07:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      SHORT G_M000_IG03
 
G_M000_IG08:
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       mov      dword ptr [(reloc)], -1
       jmp      SHORT G_M000_IG04
 
G_M000_IG09:
       mov      ecx, dword ptr [(reloc)]
       mov      dword ptr [rbx], ecx
       mov      ecx, dword ptr [(reloc)]
       mov      dword ptr [r15], ecx
       jmp      SHORT G_M000_IG06
 
; Total bytes of code 131

; Assembly listing for method System.ConsolePal:CheckTerminalSettingsInvalidated() (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 102
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       cmp      byte  ptr [(reloc)], 0
       je       SHORT G_M000_IG05
 
G_M000_IG03:
       mov      rcx, 0xD1FFAB1E
       xor      edx, edx
       mov      eax, 1
       lock     
       cmpxchg  dword ptr [rcx], edx
       cmp      eax, 1
       sete     al
       movzx    rax, al
       test     eax, eax
       jne      SHORT G_M000_IG06
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       call     [System.ConsolePal:EnsureInitializedCore()]
       jmp      SHORT G_M000_IG03
 
G_M000_IG06:
       call     [System.ConsolePal:InvalidateCachedCursorPosition()]
       mov      dword ptr [(reloc)], -1
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 75

; Assembly listing for method System.ConsolePal:InvalidateCachedCursorPosition() (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data

G_M000_IG01:
 
G_M000_IG02:
       mov      dword ptr [(reloc)], -1
       mov      rax, 0xD1FFAB1E
       inc      dword ptr [rax]
 
G_M000_IG03:
       ret      
 
; Total bytes of code 23

; Assembly listing for method System.ConsolePal+UnixConsoleStream:Flush():this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rax
 
G_M000_IG02:
       mov      rax, gword ptr [rdi+0x18]
       test     byte  ptr [rax+0x10], 1
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       add      rsp, 8
       ret      
 
G_M000_IG04:
       call     [System.IO.Error:GetFileNotOpen():System.Exception]
       mov      rdi, rax
       call     CORINFO_HELP_THROW
       int3     
 
; Total bytes of code 31

; Assembly listing for method System.Console:WriteLine(double) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       vzeroupper 
       lea      rbp, [rsp+0x10]
       vmovsd   qword ptr [rbp-0x08], xmm0
 
G_M000_IG02:
       call     [System.Console:get_Out():System.IO.TextWriter]
       mov      rdi, rax
       vmovsd   xmm0, qword ptr [rbp-0x08]
       mov      rax, qword ptr [rax]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x20]System.IO.TextWriter:WriteLine(double):this
       nop      
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 49

; Assembly listing for method System.IO.TextWriter+SyncTextWriter:WriteLine(double):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; fully interruptible

G_M000_IG01:
       push     rbp
       push     rbx
       sub      rsp, 40
       vzeroupper 
       lea      rbp, [rsp+0x30]
       xor      eax, eax
       mov      qword ptr [rbp-0x20], rax
       mov      qword ptr [rbp-0x30], rsp
       vmovsd   qword ptr [rbp-0x18], xmm0
       mov      rbx, rdi
 
G_M000_IG02:
       xor      esi, esi
       mov      qword ptr [rbp-0x10], rsi
 
G_M000_IG03:
       mov      gword ptr [rbp-0x20], rbx
       lea      rsi, [rbp-0x10]
       mov      rdi, rbx
       call     CORINFO_HELP_MON_ENTER
       mov      rdi, gword ptr [rbx+0x20]
       vmovsd   xmm0, qword ptr [rbp-0x18]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x68]
       call     [rax+0x20]System.IO.TextWriter:WriteLine(double):this
       lea      rsi, [rbp-0x10]
       mov      rdi, rbx
       call     CORINFO_HELP_MON_EXIT
       nop      
 
G_M000_IG04:
       add      rsp, 40
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG05:
       push     rbp
       push     rbx
       push     rax
       vzeroupper 
       mov      rbp, qword ptr [rdi]
       mov      qword ptr [rsp], rbp
       lea      rbp, [rbp+0x30]
 
G_M000_IG06:
       lea      rsi, [rbp-0x10]
       mov      rdi, gword ptr [rbp-0x20]
       call     CORINFO_HELP_MON_EXIT
       nop      
 
G_M000_IG07:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
; Total bytes of code 131

; Assembly listing for method System.IO.TextWriter:WriteLine(double):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rdi, 0xD1FFAB1E
       cmp      qword ptr [rbx], rdi
       jne      SHORT G_M000_IG07
 
G_M000_IG03:
       mov      rdi, rbx
       call     [System.IO.TextWriter:Write(double):this]
       mov      rsi, gword ptr [rbx+0x08]
       mov      rdi, rbx
 
G_M000_IG04:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [System.IO.StreamWriter:Write(ushort[]):this]
 
G_M000_IG05:
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x60]
 
G_M000_IG06:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [rax+0x08]System.IO.TextWriter:WriteLine():this
 
G_M000_IG07:
       mov      rdi, rbx
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+0x58]
       call     [rax]System.IO.TextWriter:Write(double):this
       jmp      SHORT G_M000_IG05
 
; Total bytes of code 91

; Assembly listing for method System.IO.TextWriter:Write(double):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; 2 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       vzeroupper 
       lea      rbp, [rsp+0x20]
       vmovsd   qword ptr [rbp-0x18], xmm0
       mov      rbx, rdi
 
G_M000_IG02:
       mov      r15, qword ptr [rbx]
       mov      rax, 0xD1FFAB1E
       cmp      r15, rax
       jne      SHORT G_M000_IG09
 
G_M000_IG03:
       mov      rdi, gword ptr [rbx+0x18]
       test     rdi, rdi
       jne      SHORT G_M000_IG04
       call     [System.Globalization.CultureInfo:get_CurrentCulture():System.Globalization.CultureInfo]
       mov      rdi, rax
 
G_M000_IG04:
       vmovsd   xmm0, qword ptr [rbp-0x18]
       vmovsd   qword ptr [rbp-0x20], xmm0
       test     rdi, rdi
       jne      SHORT G_M000_IG08
 
G_M000_IG05:
       call     [System.Globalization.NumberFormatInfo:get_CurrentInfo():System.Globalization.NumberFormatInfo]
 
G_M000_IG06:
       vmovsd   xmm0, qword ptr [rbp-0x20]
       mov      rsi, rax
       xor      rdi, rdi
       call     [System.Number:FormatDouble(double,System.String,System.Globalization.NumberFormatInfo):System.String]
       mov      rsi, rax
       mov      rdi, rbx
       mov      rax, qword ptr [r15+0x58]
       call     [rax+0x10]System.IO.TextWriter:Write(System.String):this
       nop      
 
G_M000_IG07:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       call     [System.Globalization.NumberFormatInfo:<GetInstance>g__GetProviderNonNull|58_0(System.IFormatProvider):System.Globalization.NumberFormatInfo]
       jmp      SHORT G_M000_IG06
 
G_M000_IG09:
       mov      rdi, rbx
       mov      rax, qword ptr [r15+0x40]
       call     [rax+0x28]System.IO.TextWriter:get_FormatProvider():System.IFormatProvider:this
       mov      rdi, rax
       jmp      SHORT G_M000_IG04
 
; Total bytes of code 143

; Assembly listing for method System.IO.TextWriter:get_FormatProvider():System.IFormatProvider:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 50
; 1 inlinees with PGO data; 0 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, gword ptr [rdi+0x18]
       test     rax, rax
       jne      SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       mov      rax, 0xD1FFAB1E
       call     rax
       cmp      dword ptr [rax+0x10], 2
       jl       SHORT G_M000_IG05
       mov      rax, qword ptr [rax+0x18]
       mov      rax, qword ptr [rax+0x10]
       test     rax, rax
       je       SHORT G_M000_IG05
       mov      rcx, bword ptr [rax]
       add      rcx, 16
 
G_M000_IG03:
       mov      rax, gword ptr [rcx+0x10]
       test     rax, rax
       jne      SHORT G_M000_IG04
       mov      rax, 0xD1FFAB1E
       mov      rax, gword ptr [rax]
       test     rax, rax
       jne      SHORT G_M000_IG04
       mov      rax, 0xD1FFAB1E
       mov      rax, gword ptr [rax]
       test     rax, rax
       je       SHORT G_M000_IG06
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      edi, 2
       call     CORINFO_HELP_GETSHARED_GCTHREADSTATIC_BASE_NOCTOR_OPTIMIZED
       mov      rcx, rax
       jmp      SHORT G_M000_IG03
 
G_M000_IG06:
       pop      rbp
       tail.jmp [System.Globalization.CultureInfo:InitializeUserDefaultCulture():System.Globalization.CultureInfo]
 
; Total bytes of code 130

; Assembly listing for method System.Globalization.CultureInfo:get_CurrentCulture():System.Globalization.CultureInfo (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 50

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rdi, 0xD1FFAB1E
       mov      rax, 0xD1FFAB1E
       call     rax
       cmp      dword ptr [rax+0x10], 2
       jl       SHORT G_M000_IG05
       mov      rax, qword ptr [rax+0x18]
       mov      rax, qword ptr [rax+0x10]
       test     rax, rax
       je       SHORT G_M000_IG05
       mov      rcx, bword ptr [rax]
       add      rcx, 16
 
G_M000_IG03:
       mov      rax, gword ptr [rcx+0x10]
       test     rax, rax
       jne      SHORT G_M000_IG04
       mov      rax, 0xD1FFAB1E
       mov      rax, gword ptr [rax]
       test     rax, rax
       jne      SHORT G_M000_IG04
       mov      rax, 0xD1FFAB1E
       mov      rax, gword ptr [rax]
       test     rax, rax
       je       SHORT G_M000_IG06
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       mov      edi, 2
       call     CORINFO_HELP_GETSHARED_GCTHREADSTATIC_BASE_NOCTOR_OPTIMIZED
       mov      rcx, rax
       jmp      SHORT G_M000_IG03
 
G_M000_IG06:
       pop      rbp
       tail.jmp [System.Globalization.CultureInfo:InitializeUserDefaultCulture():System.Globalization.CultureInfo]
 
; Total bytes of code 121

; Assembly listing for method System.Globalization.NumberFormatInfo:<GetInstance>g__GetProviderNonNull|58_0(System.IFormatProvider):System.Globalization.NumberFormatInfo (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 50

G_M000_IG01:
       push     rbp
       push     rbx
       push     rax
       lea      rbp, [rsp+0x10]
       mov      rbx, rdi
 
G_M000_IG02:
       mov      rsi, rbx
       mov      rdi, 0xD1FFAB1E
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       mov      rdi, rax
       test     rdi, rdi
       je       SHORT G_M000_IG04
       cmp      byte  ptr [rdi+0x61], 0
       jne      SHORT G_M000_IG04
       mov      rax, gword ptr [rdi+0x18]
       test     rax, rax
       je       SHORT G_M000_IG07
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rsi, rbx
       mov      rdi, 0xD1FFAB1E
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       test     rax, rax
       jne      SHORT G_M000_IG06
       mov      rdi, rbx
       mov      r11, 0xD1FFAB1E
       mov      rsi, 0xD1FFAB1E
       call     [r11]System.IFormatProvider:GetFormat(System.Type):System.Object:this
       mov      rsi, rax
       mov      rdi, 0xD1FFAB1E
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       test     rax, rax
       jne      SHORT G_M000_IG06
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [System.Globalization.NumberFormatInfo:get_CurrentInfo():System.Globalization.NumberFormatInfo]
 
G_M000_IG06:
       add      rsp, 8
       pop      rbx
       pop      rbp
       ret      
 
G_M000_IG07:
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+0x50]
 
G_M000_IG08:
       add      rsp, 8
       pop      rbx
       pop      rbp
       tail.jmp [rax+0x10]System.Globalization.CultureInfo:get_NumberFormat():System.Globalization.NumberFormatInfo:this
 
; Total bytes of code 170

; Assembly listing for method System.Runtime.CompilerServices.CastHelpers:IsInstanceOfClass(ulong,System.Object):System.Object (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 51
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
       mov      rax, rsi
 
G_M000_IG02:
       test     rax, rax
       je       SHORT G_M000_IG03
       cmp      qword ptr [rax], rdi
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rcx, qword ptr [rax]
       mov      rcx, qword ptr [rcx+0x10]
 
G_M000_IG05:
       cmp      rcx, rdi
       je       SHORT G_M000_IG07
       test     rcx, rcx
       je       SHORT G_M000_IG06
       mov      rcx, qword ptr [rcx+0x10]
       cmp      rcx, rdi
       je       SHORT G_M000_IG07
       test     rcx, rcx
       je       SHORT G_M000_IG06
       mov      rcx, qword ptr [rcx+0x10]
       cmp      rcx, rdi
       je       SHORT G_M000_IG07
       test     rcx, rcx
       je       SHORT G_M000_IG06
       mov      rcx, qword ptr [rcx+0x10]
       cmp      rcx, rdi
       je       SHORT G_M000_IG07
       test     rcx, rcx
       je       SHORT G_M000_IG06
       mov      rcx, qword ptr [rcx+0x10]
       jmp      SHORT G_M000_IG05
 
G_M000_IG06:
       xor      rax, rax
 
G_M000_IG07:
       pop      rbp
       ret      
 
; Total bytes of code 88

; Assembly listing for method System.Number:FormatDouble(double,System.String,System.Globalization.NumberFormatInfo):System.String (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 50
; 3 inlinees with PGO data; 9 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 64
       vzeroupper 
       lea      rbp, [rsp+0x50]
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x40], xmm8
       vmovdqa  xmmword ptr [rbp-0x30], xmm8
       vmovdqa  xmmword ptr [rbp-0x20], xmm8
       mov      qword ptr [rbp-0x48], 0xD1FFAB1E
       mov      rcx, rsi
 
G_M000_IG02:
       test     dword ptr [rsp], esp
       sub      rsp, 64
       lea      rsi, [rsp]
       mov      bword ptr [rbp-0x20], rsi
       mov      dword ptr [rbp-0x18], 32
       xor      rsi, rsi
       mov      gword ptr [rbp-0x30], rsi
 
G_M000_IG03:
       mov      dword ptr [rbp-0x28], esi
       test     rdi, rdi
       jne      SHORT G_M000_IG04
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       lea      rsi, bword ptr [rdi+0x0C]
       mov      edx, dword ptr [rdi+0x08]
 
G_M000_IG05:
       lea      rdi, [rbp-0x30]
       call     [System.Number:FormatDouble[ushort](byref,double,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo):System.String]
       mov      rbx, rax
       test     rbx, rbx
       jne      SHORT G_M000_IG06
       mov      edi, dword ptr [rbp-0x28]
       cmp      edi, dword ptr [rbp-0x18]
       ja       SHORT G_M000_IG10
       mov      rax, bword ptr [rbp-0x20]
       mov      bword ptr [rbp-0x40], rax
       mov      dword ptr [rbp-0x38], edi
       lea      rdi, [rbp-0x40]
       call     [System.ReadOnlySpan`1[ushort]:ToString():System.String:this]
       mov      rbx, rax
 
G_M000_IG06:
       mov      r15, gword ptr [rbp-0x30]
       test     r15, r15
       jne      SHORT G_M000_IG11
 
G_M000_IG07:
       mov      rax, rbx
       cmp      qword ptr [rbp-0x48], 0xD1FFAB1E
       je       SHORT G_M000_IG08
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG08:
       nop      
 
G_M000_IG09:
       lea      rsp, [rbp-0x10]
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       call     [System.ThrowHelper:ThrowArgumentOutOfRangeException()]
       int3     
 
G_M000_IG11:
       xor      rdi, rdi
       mov      gword ptr [rbp-0x30], rdi
       mov      rdi, 0xD1FFAB1E
       mov      esi, 9
       call     CORINFO_HELP_CLASSINIT_SHARED_DYNAMICCLASS
       mov      rdi, 0xD1FFAB1E
       mov      rdi, gword ptr [rdi]
       mov      rsi, r15
       xor      edx, edx
       cmp      dword ptr [rdi], edi
       call     [System.Buffers.SharedArrayPool`1[ushort]:Return(ushort[],bool):this]
       jmp      SHORT G_M000_IG07
 
; Total bytes of code 244

; Assembly listing for method System.Number:FormatDouble[ushort](byref,double,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo):System.String (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 49
; 2 inlinees with PGO data; 10 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 72
       vzeroupper 
       lea      rbp, [rsp+0x70]
       xor      eax, eax
       mov      qword ptr [rbp-0x58], rax
       vxorps   xmm8, xmm8, xmm8
       vmovdqa  xmmword ptr [rbp-0x50], xmm8
       mov      qword ptr [rbp-0x40], rax
       mov      qword ptr [rbp-0x70], 0xD1FFAB1E
       mov      r15, rdi
       mov      r14, rsi
       mov      r13d, edx
       mov      rbx, rcx
 
G_M000_IG02:
       vmovsd   qword ptr [rbp-0x30], xmm0
       vmovd    rdi, xmm0
       mov      rsi, 0xD1FFAB1E
       and      rdi, rsi
       mov      rsi, 0xD1FFAB1E
       cmp      rdi, rsi
       jge      G_M000_IG11
       mov      rdi, r14
       mov      esi, r13d
       lea      rdx, [rbp-0x38]
       call     [System.Number:ParseFormatSpecifier(System.ReadOnlySpan`1[ushort],byref):ushort]
       mov      r12d, eax
       test     dword ptr [rsp], esp
       sub      rsp, 784
       lea      rcx, [rsp]
       mov      esi, 15
       test     r12d, r12d
       cmovne   esi, dword ptr [rbp-0x38]
       mov      dword ptr [rbp-0x38], esi
       xor      esi, esi
       mov      dword ptr [rbp-0x58], esi
 
G_M000_IG03:
       mov      dword ptr [rbp-0x54], esi
       mov      byte  ptr [rbp-0x50], 0
       mov      byte  ptr [rbp-0x4F], 0
       mov      byte  ptr [rbp-0x4E], 3
       mov      bword ptr [rbp-0x48], rcx
       mov      dword ptr [rbp-0x40], 769
       cmp      dword ptr [rbp-0x40], 0
       jbe      G_M000_IG23
       mov      rcx, bword ptr [rbp-0x48]
       mov      byte  ptr [rcx], 0
       mov      rcx, qword ptr [rbp-0x30]
       shr      rcx, 63
       mov      byte  ptr [rbp-0x50], cl
       lea      rcx, [rbp-0x68]
       lea      rsi, [rbp-0x38]
       mov      edi, r12d
       mov      rdx, rbx
       call     [System.Number:GetFloatingPointMaxDigitsAndPrecision(ushort,byref,System.Globalization.NumberFormatInfo,byref):int]
       mov      dword ptr [rbp-0x5C], eax
       vxorps   xmm0, xmm0, xmm0
       vmovsd   xmm1, qword ptr [rbp-0x30]
       vucomisd xmm1, xmm0
       jp       SHORT G_M000_IG04
       je       SHORT G_M000_IG05
 
G_M000_IG04:
       cmp      byte  ptr [rbp-0x68], 0
       je       G_M000_IG21
       lea      rsi, [rbp-0x58]
       vmovsd   qword ptr [rbp-0x30], xmm1
       vmovaps  xmm0, xmm1
       mov      edi, dword ptr [rbp-0x38]
       call     [System.Number+Grisu3:TryRunDouble(double,int,byref):bool]
       test     eax, eax
       vmovsd   xmm1, qword ptr [rbp-0x30]
       je       G_M000_IG21
 
G_M000_IG05:
       test     r12d, r12d
       je       G_M000_IG22
 
G_M000_IG06:
       cmp      dword ptr [rbp-0x38], -1
       mov      eax, dword ptr [rbp-0x5C]
       jne      SHORT G_M000_IG07
       mov      eax, dword ptr [rbp-0x58]
       mov      esi, 17
       cmp      eax, 17
       cmovl    eax, esi
       mov      r14d, eax
       mov      eax, r14d
 
G_M000_IG07:
       lea      rsi, [rbp-0x58]
       mov      rdi, r15
       mov      edx, r12d
       mov      ecx, eax
       mov      r8, rbx
       call     [System.Number:NumberToString[ushort](byref,byref,ushort,int,System.Globalization.NumberFormatInfo)]
 
G_M000_IG08:
       xor      rax, rax
       cmp      qword ptr [rbp-0x70], 0xD1FFAB1E
       je       SHORT G_M000_IG09
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG09:
       nop      
 
G_M000_IG10:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       vmovsd   xmm0, qword ptr [rbp-0x30]
       vucomisd xmm0, xmm0
       jp       SHORT G_M000_IG12
       je       SHORT G_M000_IG15
 
G_M000_IG12:
       mov      rax, gword ptr [rbx+0x58]
       cmp      qword ptr [rbp-0x70], 0xD1FFAB1E
       je       SHORT G_M000_IG13
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG13:
       nop      
 
G_M000_IG14:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG15:
       vmovd    rax, xmm0
       test     rax, rax
       jl       SHORT G_M000_IG18
       mov      rax, gword ptr [rbx+0x60]
       cmp      qword ptr [rbp-0x70], 0xD1FFAB1E
       je       SHORT G_M000_IG16
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG16:
       nop      
 
G_M000_IG17:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG18:
       mov      rax, gword ptr [rbx+0x68]
       cmp      qword ptr [rbp-0x70], 0xD1FFAB1E
       je       SHORT G_M000_IG19
       call     CORINFO_HELP_FAIL_FAST
 
G_M000_IG19:
       nop      
 
G_M000_IG20:
       lea      rsp, [rbp-0x28]
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG21:
       movzx    rsi, byte  ptr [rbp-0x68]
       lea      rdx, [rbp-0x58]
       vmovaps  xmm0, xmm1
       mov      edi, dword ptr [rbp-0x38]
       call     [System.Number:Dragon4Double(double,int,bool,byref)]
       test     r12d, r12d
       jne      G_M000_IG06
 
G_M000_IG22:
       mov      rdx, r14
       mov      ecx, r13d
       lea      rsi, [rbp-0x58]
       mov      rdi, r15
       mov      r8, rbx
       call     [System.Number:NumberToStringFormat[ushort](byref,byref,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG08
 
G_M000_IG23:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 580

; Assembly listing for method System.Number:ParseFormatSpecifier(System.ReadOnlySpan`1[ushort],byref):ushort (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 49
; 0 inlinees with PGO data; 3 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      bword ptr [rbp-0x20], rdi
 
G_M000_IG02:
       xor      ebx, ebx
       test     esi, esi
       jg       SHORT G_M000_IG08
 
G_M000_IG03:
       mov      dword ptr [rdx], -1
       test     esi, esi
       jne      G_M000_IG18
 
G_M000_IG04:
       mov      eax, 71
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       movzx    rax, bx
 
G_M000_IG07:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       mov      rdi, bword ptr [rbp-0x20]
       movzx    rbx, word  ptr [rdi]
       mov      eax, ebx
       or       eax, 32
       add      eax, -97
       cmp      eax, 25
       mov      bword ptr [rbp-0x20], rdi
       ja       SHORT G_M000_IG03
       cmp      esi, 1
       jne      SHORT G_M000_IG09
       mov      dword ptr [rdx], -1
       jmp      SHORT G_M000_IG06
 
G_M000_IG09:
       cmp      esi, 2
       jne      SHORT G_M000_IG10
       mov      rdi, bword ptr [rbp-0x20]
       movzx    rax, word  ptr [rdi+0x02]
       add      eax, -48
       cmp      eax, 10
       jae      SHORT G_M000_IG12
       mov      dword ptr [rdx], eax
       jmp      SHORT G_M000_IG06
 
G_M000_IG10:
       cmp      esi, 3
       jne      SHORT G_M000_IG11
       mov      rdi, bword ptr [rbp-0x20]
       movzx    rax, word  ptr [rdi+0x02]
       add      eax, -48
       movzx    rcx, word  ptr [rdi+0x04]
       add      ecx, -48
       cmp      eax, 10
       jae      SHORT G_M000_IG12
       cmp      ecx, 10
       jae      SHORT G_M000_IG12
       lea      esi, [rax+4*rax]
       add      esi, esi
       add      ecx, esi
       mov      dword ptr [rdx], ecx
       jmp      SHORT G_M000_IG06
 
G_M000_IG11:
       mov      rdi, bword ptr [rbp-0x20]
 
G_M000_IG12:
       xor      r15d, r15d
       mov      r14d, 1
       jmp      SHORT G_M000_IG15
 
G_M000_IG13:
       cmp      r15d, 0xD1FFAB1E
       jl       SHORT G_M000_IG14
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
G_M000_IG14:
       lea      eax, [r14+0x01]
       mov      ecx, r14d
       movzx    rcx, word  ptr [rdi+2*rcx]
       lea      r8d, [r15+4*r15]
       lea      r15d, [rcx+2*r8-0x30]
       mov      r14d, eax
 
G_M000_IG15:
       cmp      r14d, esi
       jae      SHORT G_M000_IG16
       mov      eax, r14d
       movzx    rax, word  ptr [rdi+2*rax]
       add      eax, -48
       cmp      eax, 9
       jbe      SHORT G_M000_IG13
 
G_M000_IG16:
       cmp      r14d, esi
       jae      SHORT G_M000_IG17
       mov      eax, r14d
       cmp      word  ptr [rdi+2*rax], 0
       jne      G_M000_IG03
 
G_M000_IG17:
       mov      dword ptr [rdx], r15d
       jmp      G_M000_IG06
 
G_M000_IG18:
       test     ebx, ebx
       je       G_M000_IG04
       xor      eax, eax
 
G_M000_IG19:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 294

; Assembly listing for method System.Number:GetFloatingPointMaxDigitsAndPrecision(ushort,byref,System.Globalization.NumberFormatInfo,byref):int (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 49
; 0 inlinees with PGO data; 3 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     rbx
       lea      rbp, [rsp+0x20]
 
G_M000_IG02:
       movzx    rdi, di
       test     edi, edi
       je       SHORT G_M000_IG06
       mov      ebx, dword ptr [rsi]
       mov      eax, ebx
       cmp      edi, 82
       ja       SHORT G_M000_IG10
       lea      r15d, [rdi-0x43]
       cmp      r15d, 4
       jne      SHORT G_M000_IG08
 
G_M000_IG03:
       test     ebx, ebx
       je       G_M000_IG17
 
G_M000_IG04:
       mov      byte  ptr [rcx], 1
 
G_M000_IG05:
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       mov      byte  ptr [rcx], 1
       mov      eax, dword ptr [rsi]
 
G_M000_IG07:
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       cmp      r15d, 4
       ja       SHORT G_M000_IG09
       mov      edi, r15d
       lea      r8, [reloc @RWD00]
       mov      r8d, dword ptr [r8+4*rdi]
       lea      r9, G_M000_IG02
       add      r8, r9
       jmp      r8
 
G_M000_IG09:
       add      edi, -78
       cmp      edi, 4
       ja       G_M000_IG20
       lea      r8, [reloc @RWD20]
       mov      r8d, dword ptr [r8+4*rdi]
       lea      r9, G_M000_IG02
       add      r8, r9
       jmp      r8
 
G_M000_IG10:
       lea      r14d, [rdi-0x63]
       cmp      r14d, 4
       ja       SHORT G_M000_IG11
       mov      edi, r14d
       lea      r8, [reloc @RWD40]
       mov      r8d, dword ptr [r8+4*rdi]
       lea      r9, G_M000_IG02
       add      r8, r9
       jmp      r8
 
G_M000_IG11:
       lea      r13d, [rdi-0x6E]
       cmp      r13d, 4
       ja       SHORT G_M000_IG20
       mov      edi, r13d
       lea      r8, [reloc @RWD60]
       mov      r8d, dword ptr [r8+4*rdi]
       lea      r9, G_M000_IG02
       add      r8, r9
       jmp      r8
 
G_M000_IG12:
       cmp      ebx, -1
       jne      SHORT G_M000_IG13
       mov      edx, dword ptr [rdx+0x10C]
       mov      dword ptr [rsi], edx
 
G_M000_IG13:
       mov      byte  ptr [rcx], 0
       jmp      G_M000_IG05
 
G_M000_IG14:
       cmp      ebx, -1
       jne      SHORT G_M000_IG15
       mov      dword ptr [rsi], 6
 
G_M000_IG15:
       inc      dword ptr [rsi]
       jmp      G_M000_IG04
 
G_M000_IG16:
       cmp      ebx, -1
       jne      SHORT G_M000_IG13
       mov      edx, dword ptr [rdx+0x108]
       mov      dword ptr [rsi], edx
       jmp      SHORT G_M000_IG13
 
G_M000_IG17:
       mov      dword ptr [rsi], -1
       jmp      G_M000_IG04
 
G_M000_IG18:
       cmp      ebx, -1
       jne      SHORT G_M000_IG19
       mov      edx, dword ptr [rdx+0x124]
       mov      dword ptr [rsi], edx
 
G_M000_IG19:
       add      dword ptr [rsi], 2
       jmp      SHORT G_M000_IG13
 
G_M000_IG20:
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
RWD00  	dd	G_M000_IG12 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG14 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG03 - G_M000_IG02
RWD20  	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG18 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG17 - G_M000_IG02
RWD40  	dd	G_M000_IG12 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG14 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG03 - G_M000_IG02
RWD60  	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG18 - G_M000_IG02
       	dd	G_M000_IG20 - G_M000_IG02
       	dd	G_M000_IG17 - G_M000_IG02

; Total bytes of code 306

; Assembly listing for method System.Number+Grisu3:TryRunDouble(double,int,byref):bool (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 49
; 1 inlinees with PGO data; 11 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     rbx
       sub      rsp, 208
       vzeroupper 
       lea      rbp, [rsp+0xF0]
       mov      r15d, edi
       mov      rbx, rsi
 
G_M000_IG02:
       vmovd    rdi, xmm0
       test     rdi, rdi
       jl       G_M000_IG09
 
G_M000_IG03:
       cmp      r15d, -1
       jne      G_M000_IG10
       vmovd    rdi, xmm0
       mov      rcx, 0xD1FFAB1E
       and      rcx, rdi
       shr      rdi, 52
       and      edi, 0x7FF
       mov      dword ptr [rbp-0x98], edi
       cmp      dword ptr [rbp-0x98], 0
       je       SHORT G_M000_IG04
       mov      rdi, 0xD1FFAB1E
       or       rcx, rdi
       mov      edi, dword ptr [rbp-0x98]
       add      edi, -0x433
       mov      dword ptr [rbp-0x98], edi
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       mov      dword ptr [rbp-0x98], -0x432
 
G_M000_IG05:
       mov      qword ptr [rbp-0xA0], rcx
       lea      rdi, [rbp-0xA0]
       lea      rcx, [rbp-0x60]
       lea      rdx, [rbp-0x50]
       mov      esi, 52
       call     [System.Number+DiyFp:GetBoundaries(int,byref,byref):this]
       vmovups  xmm0, xmmword ptr [rbp-0xA0]
       vmovups  xmmword ptr [rbp-0x70], xmm0
       xor      edi, edi
       lzcnt    rdi, qword ptr [rbp-0x70]
       mov      rsi, qword ptr [rbp-0x70]
       shlx     rsi, rsi, rdi
       mov      eax, dword ptr [rbp-0x68]
       sub      eax, edi
       mov      qword ptr [rbp-0x40], rsi
       mov      dword ptr [rbp-0x38], eax
       mov      r15, bword ptr [rbx+0x10]
       mov      r14d, dword ptr [rbx+0x18]
       mov      edi, dword ptr [rbp-0x38]
       add      edi, 64
       neg      edi
       add      edi, 3
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, edi
       vmulsd   xmm0, xmm0, qword ptr [reloc @RWD00]
       vroundsd xmm0, xmm0, xmm0, 10
       vcvttsd2si  edi, xmm0
       add      edi, 347
       mov      esi, edi
       sar      esi, 31
       and      esi, 7
       add      edi, esi
       sar      edi, 3
       inc      edi
       cmp      edi, 87
       jae      G_M000_IG11
       mov      rsi, 0xD1FFAB1E
       movsx    r13, word  ptr [rsi+2*rdi]
       mov      rsi, 0xD1FFAB1E
       mov      rsi, qword ptr [rsi+8*rdi]
       mov      rax, 0xD1FFAB1E
       movsx    rdi, word  ptr [rax+2*rdi]
       mov      qword ptr [rbp-0xB0], rsi
       mov      dword ptr [rbp-0xA8], edi
       lea      rdi, [rbp-0x40]
       lea      rsi, [rbp-0xB0]
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xC0], rax
       mov      qword ptr [rbp-0xB8], rdx
       lea      rdi, [rbp-0x50]
       lea      rsi, [rbp-0xB0]
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xD0], rax
       mov      qword ptr [rbp-0xC8], rdx
       lea      rdi, [rbp-0x60]
       lea      rsi, [rbp-0xB0]
 
G_M000_IG06:
       call     [System.Number+DiyFp:Multiply(byref):System.Number+DiyFp:this]
       mov      qword ptr [rbp-0xE0], rax
       mov      qword ptr [rbp-0xD8], rdx
       lea      rcx, [rbp-0xE8]
       mov      qword ptr [rsp], rcx
       mov      rcx, r15
       mov      r8d, r14d
       lea      rsi, [rbp-0xC0]
       lea      rdx, [rbp-0xE0]
       lea      rdi, [rbp-0xD0]
       lea      r9, [rbp-0x28]
       call     [System.Number+Grisu3:TryDigitGenShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool]
       mov      edi, dword ptr [rbp-0xE8]
       sub      edi, r13d
       mov      dword ptr [rbp-0x30], edi
 
G_M000_IG07:
       test     eax, eax
       je       SHORT G_M000_IG08
       mov      edi, dword ptr [rbp-0x28]
       add      edi, dword ptr [rbp-0x30]
       mov      dword ptr [rbx+0x04], edi
       lea      rdi, bword ptr [rbx+0x10]
       mov      ecx, dword ptr [rdi+0x08]
       cmp      dword ptr [rbp-0x28], ecx
       jae      G_M000_IG11
       mov      rdi, bword ptr [rdi]
       mov      ecx, dword ptr [rbp-0x28]
       mov      byte  ptr [rdi+rcx], 0
       mov      edi, dword ptr [rbp-0x28]
       mov      dword ptr [rbx], edi
 
G_M000_IG08:
       add      rsp, 208
       pop      rbx
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG09:
       vxorps   xmm0, xmm0, xmmword ptr [reloc @RWD16]
       jmp      G_M000_IG03
 
G_M000_IG10:
       vxorps   xmm1, xmm1, xmm1
       vmovups  xmmword ptr [rbp-0x90], xmm1
       lea      rdi, [rbp-0x90]
       call     [System.Number+DiyFp:.ctor(double):this]
       vmovups  xmm0, xmmword ptr [rbp-0x90]
       vmovups  xmmword ptr [rbp-0x70], xmm0
       lea      rdi, [rbp-0x70]
       call     [System.Number+DiyFp:Normalize():System.Number+DiyFp:this]
       mov      qword ptr [rbp-0x80], rax
       mov      qword ptr [rbp-0x78], rdx
       mov      rdx, bword ptr [rbx+0x10]
       mov      rcx, qword ptr [rbx+0x18]
       lea      r9, [rbp-0x30]
       lea      rdi, [rbp-0x80]
       lea      r8, [rbp-0x28]
       mov      esi, r15d
       call     [System.Number+Grisu3:TryRunCounted(byref,int,System.Span`1[ubyte],byref,byref):bool]
       jmp      G_M000_IG07
 
G_M000_IG11:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
RWD00  	dq	3FD34413509F79FFh	;  0.301029996
RWD08  	dd	00000000h, 00000000h
RWD16  	dq	8000000000000000h, 8000000000000000h

; Total bytes of code 671

; Assembly listing for method System.Number+DiyFp:GetBoundaries(int,byref,byref):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 49
; 0 inlinees with PGO data; 6 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       mov      rbp, rsp
 
G_M000_IG02:
       mov      rax, qword ptr [rdi]
       lea      rax, [2*rax+0x01]
       mov      r8d, dword ptr [rdi+0x08]
       dec      r8d
       xor      r9d, r9d
       lzcnt    r9, rax
       shlx     rax, rax, r9
       sub      r8d, r9d
       mov      qword ptr [rcx], rax
       mov      dword ptr [rcx+0x08], r8d
       mov      rax, qword ptr [rdi]
       mov      r8d, 1
       shlx     rsi, r8, rsi
       cmp      rax, rsi
       je       SHORT G_M000_IG05
       lea      rax, [2*rax-0x01]
       mov      edi, dword ptr [rdi+0x08]
       dec      edi
       mov      qword ptr [rdx], rax
       mov      dword ptr [rdx+0x08], edi
 
G_M000_IG03:
       mov      rax, qword ptr [rdx]
       mov      edi, dword ptr [rdx+0x08]
       mov      ecx, dword ptr [rcx+0x08]
       sub      edi, ecx
       shlx     rax, rax, rdi
       mov      qword ptr [rdx], rax
       mov      dword ptr [rdx+0x08], ecx
 
G_M000_IG04:
       pop      rbp
       ret      
 
G_M000_IG05:
       lea      rax, [4*rax-0x01]
       mov      edi, dword ptr [rdi+0x08]
       add      edi, -2
       mov      qword ptr [rdx], rax
       mov      dword ptr [rdx+0x08], edi
       jmp      SHORT G_M000_IG03
 
; Total bytes of code 129

; Assembly listing for method System.Number+Grisu3:TryDigitGenShortest(byref,byref,byref,System.Span`1[ubyte],byref,byref):bool (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 48
; 1 inlinees with PGO data; 12 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 72
       lea      rbp, [rsp+0x70]
       mov      rbx, rcx
       mov      r15d, r8d
       mov      r10, bword ptr [rbp+0x10]
 
G_M000_IG02:
       mov      ecx, 1
       mov      rax, qword ptr [rdi]
       dec      rax
       mov      rdi, qword ptr [rdx]
       inc      rdi
       mov      edx, dword ptr [rdx+0x08]
       mov      qword ptr [rbp-0x38], rdi
       mov      dword ptr [rbp-0x30], edx
       mov      r14, qword ptr [rbp-0x38]
       sub      r14, rax
       mov      eax, dword ptr [rsi+0x08]
       neg      eax
       mov      r13d, eax
       and      r13d, 63
       mov      edx, 1
       shlx     rdi, rdx, r13
       mov      qword ptr [rbp-0x58], rdi
       mov      rdx, qword ptr [rbp-0x38]
       shrx     r8, rdx, r13
       lea      r11, [rdi-0x01]
       mov      rdx, r11
       and      rdx, qword ptr [rbp-0x38]
       mov      qword ptr [rbp-0x40], rdx
       neg      eax
       add      eax, 65
       imul     eax, eax, 0x4D1
       sar      eax, 12
       cmp      eax, 10
       jae      G_M000_IG13
       mov      r12d, eax
       mov      rdi, 0xD1FFAB1E
       mov      r12d, dword ptr [rdi+4*r12]
       cmp      r8d, r12d
       jae      SHORT G_M000_IG03
       dec      eax
       cmp      eax, 10
       jae      G_M000_IG13
       mov      edi, eax
       mov      r12, 0xD1FFAB1E
       mov      r12d, dword ptr [r12+4*rdi]
 
G_M000_IG03:
       inc      eax
       mov      dword ptr [r10], eax
       xor      eax, eax
       mov      dword ptr [r9], eax
       cmp      dword ptr [r10], 0
       jle      G_M000_IG10
 
G_M000_IG04:
       mov      eax, r8d
       xor      edx, edx
       div      edx:eax, r12d
       mov      edi, eax
       imul     edi, r12d
       sub      r8d, edi
       mov      edi, dword ptr [r9]
       cmp      edi, r15d
       jae      G_M000_IG13
       add      eax, 48
       mov      byte  ptr [rbx+rdi], al
       inc      dword ptr [r9]
       dec      dword ptr [r10]
       mov      edi, r8d
       shlx     rax, rdi, r13
       mov      rdx, qword ptr [rbp-0x40]
       add      rax, rdx
       mov      qword ptr [rbp-0x48], rax
       cmp      rax, r14
       jb       G_M000_IG11
       mov      edi, 0xD1FFAB1E
       mov      r12d, r12d
       imul     r12, rdi
       shr      r12, 35
       cmp      dword ptr [r10], 0
       jg       G_M000_IG09
 
G_M000_IG05:
       lea      rdx, [rdx+4*rdx]
       add      rdx, rdx
       lea      rcx, [rcx+4*rcx]
       add      rcx, rcx
       lea      r14, [r14+4*r14]
       add      r14, r14
       shrx     rdi, rdx, r13
       mov      r8d, dword ptr [r9]
       cmp      r8d, r15d
       jae      G_M000_IG13
       add      edi, 48
       mov      byte  ptr [rbx+r8], dil
       inc      dword ptr [r9]
       dec      dword ptr [r10]
       and      rdx, r11
       mov      qword ptr [rbp-0x40], rdx
       cmp      rdx, r14
       jae      SHORT G_M000_IG08
 
G_M000_IG06:
       mov      r8d, dword ptr [r9]
       mov      rdi, qword ptr [rbp-0x38]
       sub      rdi, qword ptr [rsi]
       mov      rsi, qword ptr [rbp-0x58]
       mov      qword ptr [rsp], rsi
       mov      qword ptr [rsp+0x08], rcx
       imul     rcx, rdi
       mov      rdi, rbx
       mov      esi, r15d
       mov      edx, r8d
       mov      r8, r14
       mov      r9, qword ptr [rbp-0x40]
       call     [System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool]
       nop      
 
G_M000_IG07:
       add      rsp, 72
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       mov      rdx, qword ptr [rbp-0x40]
       jmp      G_M000_IG05
 
G_M000_IG09:
       mov      qword ptr [rbp-0x40], rdx
       jmp      G_M000_IG04
 
G_M000_IG10:
       mov      rdx, qword ptr [rbp-0x40]
       jmp      G_M000_IG05
 
G_M000_IG11:
       mov      ecx, dword ptr [r9]
       mov      dword ptr [rbp-0x4C], ecx
       lea      rdi, [rbp-0x38]
       call     [System.Number+DiyFp:Subtract(byref):System.Number+DiyFp:this]
       mov      rcx, rax
       mov      edi, r12d
       shlx     rdi, rdi, r13
       mov      qword ptr [rsp], rdi
       mov      qword ptr [rsp+0x08], 1
       mov      rdi, rbx
       mov      esi, r15d
       mov      edx, dword ptr [rbp-0x4C]
       mov      r8, r14
       mov      r9, qword ptr [rbp-0x48]
       call     [System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool]
       nop      
 
G_M000_IG12:
       add      rsp, 72
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG13:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 539

; Assembly listing for method System.Number+Grisu3:TryRoundWeedShortest(System.Span`1[ubyte],int,ulong,ulong,ulong,ulong,ulong):bool (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 48

G_M000_IG01:
       push     rbp
       push     r15
       push     rbx
       sub      rsp, 16
       lea      rbp, [rsp+0x20]
       mov      bword ptr [rbp-0x20], rdi
       mov      dword ptr [rbp-0x14], esi
       mov      rax, qword ptr [rbp+0x18]
 
G_M000_IG02:
       mov      rdi, rcx
       sub      rdi, rax
       add      rcx, rax
       cmp      r9, rdi
       jb       SHORT G_M000_IG09
 
G_M000_IG03:
       cmp      r9, rcx
       jae      SHORT G_M000_IG04
       mov      rdi, r8
       sub      rdi, r9
       mov      rsi, qword ptr [rbp+0x10]
       cmp      rdi, rsi
       mov      qword ptr [rbp+0x10], rsi
       jae      G_M000_IG10
 
G_M000_IG04:
       lea      rsi, [rax+rax]
       cmp      rsi, r9
       ja       SHORT G_M000_IG06
       shl      rax, 2
       sub      r8, rax
       xor      eax, eax
       cmp      r8, r9
       setae    al
 
G_M000_IG05:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG06:
       xor      eax, eax
 
G_M000_IG07:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG08:
       lea      esi, [rdx-0x01]
       mov      r11d, dword ptr [rbp-0x14]
       cmp      esi, r11d
       jae      G_M000_IG13
       lea      esi, [rdx-0x01]
       mov      rbx, bword ptr [rbp-0x20]
       add      rsi, rbx
       dec      byte  ptr [rsi]
       add      r9, r10
       cmp      r9, rdi
       mov      bword ptr [rbp-0x20], rbx
       mov      dword ptr [rbp-0x14], r11d
       mov      qword ptr [rbp+0x10], r10
       jae      SHORT G_M000_IG03
 
G_M000_IG09:
       mov      rsi, r8
       sub      rsi, r9
       mov      r10, qword ptr [rbp+0x10]
       cmp      rsi, r10
       mov      qword ptr [rbp+0x10], r10
       jb       G_M000_IG03
       mov      r10, qword ptr [rbp+0x10]
       lea      rsi, [r9+r10]
       cmp      rsi, rdi
       jb       SHORT G_M000_IG08
       mov      rsi, rdi
       sub      rsi, r9
       lea      r15, [r9+r10]
       sub      r15, rdi
       cmp      rsi, r15
       jae      SHORT G_M000_IG08
       mov      qword ptr [rbp+0x10], r10
       jmp      G_M000_IG03
 
G_M000_IG10:
       mov      r10, qword ptr [rbp+0x10]
       lea      rdx, [r9+r10]
       cmp      rdx, rcx
       jb       SHORT G_M000_IG11
       mov      rdx, rcx
       sub      rdx, r9
       add      r10, r9
       sub      r10, rcx
       cmp      rdx, r10
       jbe      G_M000_IG04
 
G_M000_IG11:
       xor      eax, eax
 
G_M000_IG12:
       add      rsp, 16
       pop      rbx
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG13:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 272

; Assembly listing for method System.Number:NumberToString[ushort](byref,byref,ushort,int,System.Globalization.NumberFormatInfo) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 53
; 8 inlinees with PGO data; 29 single block inlinees; 8 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       mov      r13, rdi
       mov      rbx, rsi
       mov      r14d, edx
       mov      r15d, ecx
       mov      r12, r8
 
G_M000_IG02:
       xor      edx, edx
       cmp      byte  ptr [rbx+0x0A], 3
       sete     dl
       movzx    rax, r14w
       mov      dword ptr [rbp-0x30], eax
       cmp      eax, 82
       ja       G_M000_IG12
       lea      ecx, [rax-0x43]
       cmp      ecx, 4
       jne      SHORT G_M000_IG10
 
G_M000_IG03:
       xor      r8d, r8d
       mov      dword ptr [rbp-0x2C], r8d
       test     r15d, r15d
       jle      G_M000_IG31
 
G_M000_IG04:
       mov      rdi, rbx
       mov      esi, r15d
       call     [System.Number:RoundNumber(byref,int,bool)]
 
G_M000_IG05:
       cmp      byte  ptr [rbx+0x08], 0
       jne      G_M000_IG33
 
G_M000_IG06:
       add      r14d, -2
       movzx    r8, r14w
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       mov      r9d, dword ptr [rbp-0x2C]
       call     [System.Number:FormatGeneral[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort,bool)]
 
G_M000_IG07:
       nop      
 
G_M000_IG08:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG09:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG10:
       cmp      ecx, 4
       ja       SHORT G_M000_IG11
       mov      esi, ecx
       lea      rdi, [reloc @RWD00]
       mov      edi, dword ptr [rdi+4*rsi]
       lea      rcx, G_M000_IG02
       add      rdi, rcx
       jmp      rdi
 
G_M000_IG11:
       lea      r8d, [rax-0x4E]
       cmp      r8d, 4
       ja       G_M000_IG40
       mov      esi, r8d
       lea      rdi, [reloc @RWD20]
       mov      edi, dword ptr [rdi+4*rsi]
       lea      rcx, G_M000_IG02
       add      rdi, rcx
       jmp      rdi
 
G_M000_IG12:
       lea      r9d, [rax-0x63]
       cmp      r9d, 4
       ja       SHORT G_M000_IG13
       mov      ecx, r9d
       lea      rdi, [reloc @RWD40]
       mov      edi, dword ptr [rdi+4*rcx]
       lea      rsi, G_M000_IG02
       add      rdi, rsi
       jmp      rdi
 
G_M000_IG13:
       lea      r10d, [rax-0x6E]
       cmp      r10d, 4
       ja       G_M000_IG40
       mov      eax, dword ptr [rbp-0x30]
       mov      ecx, r10d
       lea      rdi, [reloc @RWD60]
       mov      edi, dword ptr [rdi+4*rcx]
       lea      rsi, G_M000_IG02
       add      rdi, rsi
       jmp      rdi
 
G_M000_IG14:
       test     r15d, r15d
       jge      SHORT G_M000_IG15
       mov      r15d, dword ptr [r12+0x10C]
 
G_M000_IG15:
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatCurrency[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG07
 
G_M000_IG16:
       test     r15d, r15d
       jge      SHORT G_M000_IG17
       mov      r15d, dword ptr [r12+0x108]
 
G_M000_IG17:
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       call     [System.Number:RoundNumber(byref,int,bool)]
       cmp      byte  ptr [rbx+0x08], 0
       je       SHORT G_M000_IG21
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG18
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG19
 
G_M000_IG18:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG19:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG20
       cmp      edi, ecx
       jae      SHORT G_M000_IG20
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      SHORT G_M000_IG21
 
G_M000_IG20:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
 
G_M000_IG21:
       mov      r8, gword ptr [r12+0x30]
       test     r8, r8
       jne      SHORT G_M000_IG22
       xor      r8, r8
       xor      r9d, r9d
       jmp      SHORT G_M000_IG23
 
G_M000_IG22:
       lea      r9, bword ptr [r8+0x0C]
       mov      r8d, dword ptr [r8+0x08]
       mov      eax, r8d
       mov      r8, r9
       mov      r9d, eax
 
G_M000_IG23:
       xor      rdi, rdi
       xor      esi, esi
       mov      bword ptr [rsp], rdi
       mov      dword ptr [rsp+0x08], esi
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       xor      rcx, rcx
       call     [System.Number:FormatFixed[ushort](byref,byref,int,int[],System.ReadOnlySpan`1[ushort],System.ReadOnlySpan`1[ushort])]
       jmp      G_M000_IG07
 
G_M000_IG24:
       test     r15d, r15d
       jge      SHORT G_M000_IG25
       mov      r15d, dword ptr [r12+0x108]
 
G_M000_IG25:
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatNumber[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG07
 
G_M000_IG26:
       mov      edi, 6
       test     r15d, r15d
       cmovl    r15d, edi
       inc      r15d
       mov      rdi, rbx
       mov      esi, r15d
       call     [System.Number:RoundNumber(byref,int,bool)]
       cmp      byte  ptr [rbx+0x08], 0
       je       SHORT G_M000_IG30
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG27
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG28
 
G_M000_IG27:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG28:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG29
       cmp      edi, ecx
       jae      SHORT G_M000_IG29
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      SHORT G_M000_IG30
 
G_M000_IG29:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
 
G_M000_IG30:
       mov      r8d, dword ptr [rbp-0x30]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatScientific[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort)]
       jmp      G_M000_IG07
 
G_M000_IG31:
       cmp      byte  ptr [rbx+0x0A], 2
       jne      SHORT G_M000_IG32
       cmp      r15d, -1
       jne      SHORT G_M000_IG32
       mov      dword ptr [rbp-0x2C], 1
       lea      rdx, bword ptr [rbx+0x10]
       cmp      dword ptr [rdx+0x08], 0
       jbe      G_M000_IG41
       mov      rsi, bword ptr [rdx]
       cmp      byte  ptr [rsi], 0
       jne      G_M000_IG05
       jmp      G_M000_IG06
 
G_M000_IG32:
       mov      r15d, dword ptr [rbx]
       jmp      G_M000_IG04
 
G_M000_IG33:
       mov      rsi, gword ptr [r12+0x28]
       test     rsi, rsi
       jne      SHORT G_M000_IG34
       xor      rsi, rsi
       xor      edx, edx
       jmp      SHORT G_M000_IG35
 
G_M000_IG34:
       lea      rdx, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      rax, rdx
       mov      edx, esi
       mov      rsi, rax
 
G_M000_IG35:
       mov      edi, dword ptr [r13+0x08]
       mov      rax, bword ptr [r13+0x10]
       mov      ecx, dword ptr [r13+0x18]
       cmp      edx, 1
       jne      SHORT G_M000_IG36
       cmp      edi, ecx
       jae      SHORT G_M000_IG36
       mov      edx, edi
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [rax+2*rdx], si
       inc      edi
       mov      dword ptr [r13+0x08], edi
       jmp      G_M000_IG06
 
G_M000_IG36:
       mov      rdi, r13
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
       jmp      G_M000_IG06
 
G_M000_IG37:
       test     r15d, r15d
       jge      SHORT G_M000_IG38
       mov      r15d, dword ptr [r12+0x124]
 
G_M000_IG38:
       lea      rsi, bword ptr [rbx+0x04]
       add      dword ptr [rsi], 2
       mov      esi, r15d
       add      esi, dword ptr [rbx+0x04]
       mov      rdi, rbx
       call     [System.Number:RoundNumber(byref,int,bool)]
       mov      rdi, r13
       mov      rsi, rbx
       mov      edx, r15d
       mov      rcx, r12
       call     [System.Number:FormatPercent[ushort](byref,byref,int,System.Globalization.NumberFormatInfo)]
       jmp      G_M000_IG07
 
G_M000_IG39:
       add      eax, -11
       movzx    r14, ax
       jmp      G_M000_IG03
 
G_M000_IG40:
       call     [System.ThrowHelper:ThrowFormatException_BadFormatSpecifier()]
       int3     
 
G_M000_IG41:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
RWD00  	dd	G_M000_IG14 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG26 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG03 - G_M000_IG02
RWD20  	dd	G_M000_IG24 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG37 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG39 - G_M000_IG02
RWD40  	dd	G_M000_IG14 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG26 - G_M000_IG02
       	dd	G_M000_IG16 - G_M000_IG02
       	dd	G_M000_IG03 - G_M000_IG02
RWD60  	dd	G_M000_IG24 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG37 - G_M000_IG02
       	dd	G_M000_IG40 - G_M000_IG02
       	dd	G_M000_IG39 - G_M000_IG02

; Total bytes of code 949

; Assembly listing for method System.Number:RoundNumber(byref,int,bool) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 31
; 0 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      rbx, rdi
       mov      ecx, edx
 
G_M000_IG02:
       mov      r15, bword ptr [rbx+0x10]
       xor      r14d, r14d
       jmp      SHORT G_M000_IG04
       align    [6 bytes for IG03]
 
G_M000_IG03:
       inc      r14d
 
G_M000_IG04:
       cmp      r14d, esi
       jge      SHORT G_M000_IG05
       movsxd   rdx, r14d
       cmp      byte  ptr [r15+rdx], 0
       jne      SHORT G_M000_IG03
 
G_M000_IG05:
       cmp      r14d, esi
       je       SHORT G_M000_IG10
 
G_M000_IG06:
       test     r14d, r14d
       jle      SHORT G_M000_IG07
       lea      edx, [r14-0x01]
       movsxd   rdx, edx
       cmp      byte  ptr [r15+rdx], 48
       je       SHORT G_M000_IG15
 
G_M000_IG07:
       test     r14d, r14d
       je       SHORT G_M000_IG16
 
G_M000_IG08:
       movsxd   rdx, r14d
       mov      byte  ptr [r15+rdx], 0
       mov      dword ptr [rbx], r14d
 
G_M000_IG09:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG10:
       movzx    rdx, byte  ptr [rbx+0x0A]
       movzx    rcx, cl
       mov      rdi, r15
       mov      esi, r14d
       call     [System.Number:<RoundNumber>g__ShouldRoundUp|121_0(ulong,int,ubyte,bool):bool]
       test     eax, eax
       je       SHORT G_M000_IG06
       jmp      SHORT G_M000_IG12
 
G_M000_IG11:
       dec      r14d
 
G_M000_IG12:
       test     r14d, r14d
       jle      SHORT G_M000_IG13
       lea      eax, [r14-0x01]
       cdqe     
       cmp      byte  ptr [r15+rax], 57
       je       SHORT G_M000_IG11
 
G_M000_IG13:
       test     r14d, r14d
       jle      SHORT G_M000_IG14
       lea      eax, [r14-0x01]
       cdqe     
       add      rax, r15
       inc      byte  ptr [rax]
       jmp      SHORT G_M000_IG07
 
G_M000_IG14:
       lea      rax, bword ptr [rbx+0x04]
       inc      dword ptr [rax]
       mov      byte  ptr [r15], 49
       mov      r14d, 1
       jmp      SHORT G_M000_IG07
 
G_M000_IG15:
       dec      r14d
       jmp      G_M000_IG06
 
G_M000_IG16:
       cmp      byte  ptr [rbx+0x0A], 3
       je       SHORT G_M000_IG17
       mov      byte  ptr [rbx+0x08], 0
 
G_M000_IG17:
       xor      eax, eax
       mov      dword ptr [rbx+0x04], eax
       jmp      G_M000_IG08
 
; Total bytes of code 211

; Assembly listing for method System.Number:FormatGeneral[ushort](byref,byref,int,System.Globalization.NumberFormatInfo,ushort,bool) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; fully interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 30
; 6 inlinees with PGO data; 12 single block inlinees; 2 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       mov      rbx, rdi
       mov      r15, rsi
       mov      r14, rcx
       mov      r13d, r8d
 
G_M000_IG02:
       mov      r12d, dword ptr [r15+0x04]
       xor      eax, eax
       test     r9b, r9b
       jne      SHORT G_M000_IG03
       cmp      r12d, edx
       jg       G_M000_IG30
       cmp      r12d, -3
       jl       G_M000_IG30
 
G_M000_IG03:
       mov      rdi, bword ptr [r15+0x10]
       test     r12d, r12d
       jle      G_M000_IG14
 
G_M000_IG04:
       movzx    rsi, byte  ptr [rdi]
       test     esi, esi
       je       SHORT G_M000_IG12
 
G_M000_IG05:
       inc      rdi
       mov      rdx, rdi
       mov      ecx, esi
 
G_M000_IG06:
       movzx    rsi, cx
       mov      edi, dword ptr [rbx+0x08]
       mov      rcx, bword ptr [rbx+0x10]
       mov      r8d, dword ptr [rbx+0x18]
       cmp      edi, r8d
       jae      SHORT G_M000_IG13
       mov      r8d, edi
       mov      word  ptr [rcx+2*r8], si
       inc      edi
       mov      dword ptr [rbx+0x08], edi
 
G_M000_IG07:
       dec      r12d
       test     r12d, r12d
       jg       SHORT G_M000_IG11
 
G_M000_IG08:
       mov      qword ptr [rbp-0x38], rdx
       cmp      byte  ptr [rdx], 0
       jne      G_M000_IG31
       test     r12d, r12d
       jl       G_M000_IG31
 
G_M000_IG09:
       test     eax, eax
       jne      G_M000_IG28
 
G_M000_IG10:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG11:
       mov      rdi, rdx
       jmp      SHORT G_M000_IG04
 
G_M000_IG12:
       mov      ecx, 48
       mov      rdx, rdi
       jmp      SHORT G_M000_IG06
 
G_M000_IG13:
       mov      qword ptr [rbp-0x38], rdx
       mov      dword ptr [rbp-0x2C], eax
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
       mov      eax, dword ptr [rbp-0x2C]
       mov      rdx, qword ptr [rbp-0x38]
       jmp      SHORT G_M000_IG07
 
G_M000_IG14:
       mov      esi, dword ptr [rbx+0x08]
       mov      rcx, bword ptr [rbx+0x10]
       mov      edx, dword ptr [rbx+0x18]
       cmp      esi, edx
       jae      SHORT G_M000_IG15
       mov      edx, esi
       mov      word  ptr [rcx+2*rdx], 48
       inc      esi
       mov      dword ptr [rbx+0x08], esi
       mov      rdx, rdi
       jmp      SHORT G_M000_IG08
 
G_M000_IG15:
       mov      qword ptr [rbp-0x38], rdi
       mov      dword ptr [rbp-0x2C], eax
       mov      rdi, rbx
       mov      esi, 48
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
       mov      eax, dword ptr [rbp-0x2C]
       mov      rdx, qword ptr [rbp-0x38]
       jmp      G_M000_IG08
 
G_M000_IG16:
       lea      rdi, bword ptr [rsi+0x0C]
       mov      esi, dword ptr [rsi+0x08]
       mov      ecx, esi
       mov      rsi, rdi
       mov      edi, ecx
 
G_M000_IG17:
       mov      ecx, dword ptr [rbx+0x08]
       mov      r8, bword ptr [rbx+0x10]
       mov      r9d, dword ptr [rbx+0x18]
       cmp      edi, 1
       jne      SHORT G_M000_IG19
       cmp      ecx, r9d
       jae      SHORT G_M000_IG18
       mov      edi, ecx
       movzx    rsi, word  ptr [rsi]
       mov      word  ptr [r8+2*rdi], si
       inc      ecx
       mov      dword ptr [rbx+0x08], ecx
       jmp      SHORT G_M000_IG24
 
G_M000_IG18:
       mov      dword ptr [rbp-0x2C], eax
       jmp      SHORT G_M000_IG20
 
G_M000_IG19:
       mov      dword ptr [rbp-0x2C], eax
 
G_M000_IG20:
       mov      edx, edi
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AppendMultiChar(System.ReadOnlySpan`1[ushort]):this]
       test     r12d, r12d
       jge      SHORT G_M000_IG27
 
G_M000_IG21:
       mov      edi, dword ptr [rbx+0x08]
       mov      rsi, bword ptr [rbx+0x10]
       mov      eax, dword ptr [rbx+0x18]
       cmp      edi, eax
       jae      SHORT G_M000_IG22
       mov      eax, edi
       mov      word  ptr [rsi+2*rax], 48
       inc      edi
       mov      dword ptr [rbx+0x08], edi
       jmp      SHORT G_M000_IG23
 
G_M000_IG22:
       mov      rdi, rbx
       mov      esi, 48
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
 
G_M000_IG23:
       inc      r12d
       mov      eax, dword ptr [rbp-0x2C]
 
G_M000_IG24:
       test     r12d, r12d
       mov      dword ptr [rbp-0x2C], eax
       jl       SHORT G_M000_IG21
       jmp      SHORT G_M000_IG27
 
G_M000_IG25:
       mov      rdi, rdx
       lea      rdx, [rdi+0x01]
       mov      qword ptr [rbp-0x38], rdx
       movzx    rsi, byte  ptr [rdi]
       mov      edi, dword ptr [rbx+0x08]
       mov      rcx, bword ptr [rbx+0x10]
       mov      r8d, dword ptr [rbx+0x18]
       cmp      edi, r8d
       jae      SHORT G_M000_IG26
       mov      r8d, edi
       mov      word  ptr [rcx+2*r8], si
       inc      edi
       mov      dword ptr [rbx+0x08], edi
       jmp      SHORT G_M000_IG27
 
G_M000_IG26:
       mov      rdi, rbx
       call     [System.Collections.Generic.ValueListBuilder`1[ushort]:AddWithResize(ushort):this]
 
G_M000_IG27:
       mov      rdx, qword ptr [rbp-0x38]
       cmp      byte  ptr [rdx], 0
       jne      SHORT G_M000_IG25
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG09
 
G_M000_IG28:
       mov      edx, dword ptr [r15+0x04]
       dec      edx
       movzx    rcx, r13w
       mov      rdi, rbx
       mov      rsi, r14
       mov      r8d, 2
       mov      r9d, 1
       call     [System.Number:FormatExponent[ushort](byref,System.Globalization.NumberFormatInfo,int,ushort,int,bool)]
       jmp      G_M000_IG10
 
G_M000_IG29:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG30:
       mov      r12d, 1
       mov      dword ptr [rbp-0x2C], 1
       mov      eax, dword ptr [rbp-0x2C]
       jmp      G_M000_IG03
 
G_M000_IG31:
       mov      rsi, gword ptr [r14+0x30]
       test     rsi, rsi
       jne      G_M000_IG16
       xor      rsi, rsi
       xor      edi, edi
       jmp      G_M000_IG17
 
; Total bytes of code 574

; Assembly listing for method System.ReadOnlySpan`1[ushort]:ToString():System.String:this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       sub      rsp, 16
       lea      rbp, [rsp+0x10]
 
G_M000_IG02:
       mov      rsi, bword ptr [rdi]
       mov      edi, dword ptr [rdi+0x08]
       mov      dword ptr [rbp-0x04], edi
       mov      rdi, rsi
       mov      esi, dword ptr [rbp-0x04]
       call     System.String:.ctor(System.ReadOnlySpan`1[ushort]):this
       nop      
 
G_M000_IG03:
       add      rsp, 16
       pop      rbp
       ret      
 
; Total bytes of code 37

; Assembly listing for method System.String:Ctor(System.ReadOnlySpan`1[ushort]):System.String (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 30
; 1 inlinees with PGO data; 2 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     rbx
       push     rax
       lea      rbp, [rsp+0x20]
       mov      r15, rdi
       mov      ebx, esi
 
G_M000_IG02:
       test     ebx, ebx
       je       SHORT G_M000_IG04
       mov      edi, ebx
       call     System.String:FastAllocateString(int):System.String
       mov      r14, rax
       cmp      byte  ptr [r14], r14b
       lea      rdi, bword ptr [r14+0x0C]
       mov      edx, ebx
       add      rdx, rdx
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      rax, r14
 
G_M000_IG03:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG04:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG05:
       add      rsp, 8
       pop      rbx
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 87

; Assembly listing for method System.IO.StreamWriter:Write(System.String):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data
; 5 inlinees with PGO data; 5 single block inlinees; 1 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x38], rax
       mov      rbx, rdi
 
G_M000_IG02:
       test     rsi, rsi
       jne      SHORT G_M000_IG04
 
G_M000_IG03:
       xor      r15, r15
       xor      r14d, r14d
       jmp      SHORT G_M000_IG05
 
G_M000_IG04:
       lea      r15, bword ptr [rsi+0x0C]
       mov      r14d, dword ptr [rsi+0x08]
 
G_M000_IG05:
       mov      rdi, gword ptr [rbx+0x48]
       test     dword ptr [rdi+0x34], 0xD1FFAB1E
       je       G_M000_IG27
       cmp      r14d, 4
       jle      G_M000_IG13
 
G_M000_IG06:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG28
       mov      r13, gword ptr [rbx+0x40]
       mov      bword ptr [rbp-0x30], r15
       cmp      dword ptr [r13+0x08], 0
       jbe      G_M000_IG29
       lea      rdi, bword ptr [r13+0x10]
       mov      bword ptr [rbp-0x38], rdi
       mov      r12, bword ptr [rbp-0x38]
       mov      eax, dword ptr [rbx+0x50]
       test     r14d, r14d
       jle      G_M000_IG19
 
G_M000_IG07:
       cmp      dword ptr [r13+0x08], eax
       je       SHORT G_M000_IG15
 
G_M000_IG08:
       mov      ecx, dword ptr [r13+0x08]
       sub      ecx, eax
       cmp      ecx, r14d
       jg       SHORT G_M000_IG12
 
G_M000_IG09:
       mov      r8d, ecx
 
G_M000_IG10:
       mov      ecx, r8d
       mov      dword ptr [rbp-0x40], ecx
       lea      edi, [rcx+rcx]
       movsxd   rdx, edi
       mov      dword ptr [rbp-0x3C], eax
       movsxd   rdi, eax
       lea      rdi, [r12+2*rdi]
       test     rdx, rdx
       jl       G_M000_IG26
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      edi, dword ptr [rbp-0x40]
       add      dword ptr [rbx+0x50], edi
       mov      eax, edi
       add      eax, dword ptr [rbp-0x3C]
       mov      esi, eax
       movsxd   rdx, edi
       lea      r15, [r15+2*rdx]
       sub      r14d, edi
       test     r14d, r14d
       mov      eax, esi
       jg       SHORT G_M000_IG07
 
G_M000_IG11:
       jmp      SHORT G_M000_IG19
 
G_M000_IG12:
       mov      r8d, r14d
       jmp      SHORT G_M000_IG10
 
G_M000_IG13:
       mov      edi, dword ptr [rbx+0x54]
       sub      edi, dword ptr [rbx+0x50]
       cmp      edi, r14d
       jl       G_M000_IG06
 
G_M000_IG14:
       jmp      SHORT G_M000_IG16
 
G_M000_IG15:
       mov      rdi, rbx
       xor      esi, esi
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       xor      eax, eax
       jmp      SHORT G_M000_IG08
       align    [0 bytes for IG17]
 
G_M000_IG16:
       xor      eax, eax
       test     r14d, r14d
       jle      SHORT G_M000_IG21
       mov      r13, gword ptr [rbx+0x40]
 
G_M000_IG17:
       mov      rcx, r13
       mov      edx, dword ptr [rbx+0x50]
       lea      edi, [rdx+0x01]
       mov      dword ptr [rbx+0x50], edi
       mov      edi, eax
       movzx    rdi, word  ptr [r15+2*rdi]
       cmp      edx, dword ptr [rcx+0x08]
       jae      SHORT G_M000_IG29
       mov      word  ptr [rcx+2*rdx+0x10], di
       inc      eax
       cmp      eax, r14d
       jl       SHORT G_M000_IG17
 
G_M000_IG18:
       jmp      SHORT G_M000_IG21
 
G_M000_IG19:
       xor      edi, edi
       mov      bword ptr [rbp-0x38], rdi
 
G_M000_IG20:
       mov      bword ptr [rbp-0x30], rdi
 
G_M000_IG21:
       cmp      byte  ptr [rbx+0x58], 0
       jne      SHORT G_M000_IG25
 
G_M000_IG22:
       xor      rax, rax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG23:
       mov      bword ptr [rbp-0x38], rax
 
G_M000_IG24:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG25:
       mov      rdi, rbx
       mov      esi, 1
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       jmp      SHORT G_M000_IG22
 
G_M000_IG26:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG27:
       call     [System.IO.StreamWriter:ThrowAsyncIOInProgress()]
       int3     
 
G_M000_IG28:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG29:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 400

; Assembly listing for method System.IO.StreamWriter:Write(ushort[]):this (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; rbp based frame
; fully interruptible
; No PGO data
; 6 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       sub      rsp, 24
       lea      rbp, [rsp+0x40]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      qword ptr [rbp-0x38], rax
       mov      rbx, rdi
 
G_M000_IG02:
       test     rsi, rsi
       je       G_M000_IG18
 
G_M000_IG03:
       lea      r15, bword ptr [rsi+0x10]
       mov      r14d, dword ptr [rsi+0x08]
 
G_M000_IG04:
       mov      rdi, gword ptr [rbx+0x48]
       test     dword ptr [rdi+0x34], 0xD1FFAB1E
       je       G_M000_IG27
       cmp      r14d, 4
       jle      G_M000_IG12
 
G_M000_IG05:
       cmp      byte  ptr [rbx+0x5B], 0
       jne      G_M000_IG28
       mov      r13, gword ptr [rbx+0x40]
       mov      bword ptr [rbp-0x30], r15
       cmp      dword ptr [r13+0x08], 0
       jbe      G_M000_IG29
       lea      rdi, bword ptr [r13+0x10]
       mov      bword ptr [rbp-0x38], rdi
       mov      r12, bword ptr [rbp-0x38]
       mov      eax, dword ptr [rbx+0x50]
       test     r14d, r14d
       jle      G_M000_IG19
 
G_M000_IG06:
       cmp      dword ptr [r13+0x08], eax
       je       SHORT G_M000_IG14
 
G_M000_IG07:
       mov      ecx, dword ptr [r13+0x08]
       sub      ecx, eax
       cmp      ecx, r14d
       jg       SHORT G_M000_IG11
 
G_M000_IG08:
       mov      r8d, ecx
 
G_M000_IG09:
       mov      ecx, r8d
       mov      dword ptr [rbp-0x40], ecx
       lea      edi, [rcx+rcx]
       movsxd   rdx, edi
       mov      dword ptr [rbp-0x3C], eax
       movsxd   rdi, eax
       lea      rdi, [r12+2*rdi]
       test     rdx, rdx
       jl       G_M000_IG26
       mov      rsi, r15
       call     [System.Buffer:Memmove(byref,byref,ulong)]
       mov      edi, dword ptr [rbp-0x40]
       add      dword ptr [rbx+0x50], edi
       mov      eax, edi
       add      eax, dword ptr [rbp-0x3C]
       mov      esi, eax
       movsxd   rdx, edi
       lea      r15, [r15+2*rdx]
       sub      r14d, edi
       test     r14d, r14d
       mov      eax, esi
       jg       SHORT G_M000_IG06
 
G_M000_IG10:
       jmp      SHORT G_M000_IG19
 
G_M000_IG11:
       mov      r8d, r14d
       jmp      SHORT G_M000_IG09
 
G_M000_IG12:
       mov      edi, dword ptr [rbx+0x54]
       sub      edi, dword ptr [rbx+0x50]
       cmp      edi, r14d
       jl       G_M000_IG05
 
G_M000_IG13:
       jmp      SHORT G_M000_IG15
 
G_M000_IG14:
       mov      rdi, rbx
       xor      esi, esi
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       xor      eax, eax
       jmp      SHORT G_M000_IG07
       align    [0 bytes for IG16]
 
G_M000_IG15:
       xor      eax, eax
       test     r14d, r14d
       jle      SHORT G_M000_IG21
       mov      r13, gword ptr [rbx+0x40]
 
G_M000_IG16:
       mov      rcx, r13
       mov      edx, dword ptr [rbx+0x50]
       lea      edi, [rdx+0x01]
       mov      dword ptr [rbx+0x50], edi
       mov      edi, eax
       movzx    rdi, word  ptr [r15+2*rdi]
       cmp      edx, dword ptr [rcx+0x08]
       jae      SHORT G_M000_IG29
       mov      word  ptr [rcx+2*rdx+0x10], di
       inc      eax
       cmp      eax, r14d
       jl       SHORT G_M000_IG16
 
G_M000_IG17:
       jmp      SHORT G_M000_IG21
 
G_M000_IG18:
       xor      r15, r15
       xor      r14d, r14d
       jmp      G_M000_IG04
 
G_M000_IG19:
       xor      edi, edi
       mov      bword ptr [rbp-0x38], rdi
 
G_M000_IG20:
       mov      bword ptr [rbp-0x30], rdi
 
G_M000_IG21:
       cmp      byte  ptr [rbx+0x58], 0
       jne      SHORT G_M000_IG25
 
G_M000_IG22:
       xor      rax, rax
       mov      bword ptr [rbp-0x30], rax
 
G_M000_IG23:
       mov      bword ptr [rbp-0x38], rax
 
G_M000_IG24:
       add      rsp, 24
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG25:
       mov      rdi, rbx
       mov      esi, 1
       xor      edx, edx
       call     [System.IO.StreamWriter:Flush(bool,bool):this]
       jmp      SHORT G_M000_IG22
 
G_M000_IG26:
       call     CORINFO_HELP_OVERFLOW
 
G_M000_IG27:
       call     [System.IO.StreamWriter:ThrowAsyncIOInProgress()]
       int3     
 
G_M000_IG28:
       mov      rdi, rbx
       call     [System.IO.StreamWriter:<ThrowIfDisposed>g__ThrowObjectDisposedException|77_0():this]
       int3     
 
G_M000_IG29:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 407

; Assembly listing for method Program:run_benchmark(int,int) (Tier1)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1 code
; optimized code
; optimized using Blended PGO
; rbp based frame
; fully interruptible
; with Blended PGO: edge weights are valid, and fgCalledCount is 100

G_M000_IG01:
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rbx
       push     rax
       vzeroupper 
       lea      rbp, [rsp+0x30]
       xor      eax, eax
       mov      qword ptr [rbp-0x30], rax
       mov      ebx, edi
       mov      r15d, esi
 
G_M000_IG02:
       mov      dword ptr [rbp-0x30], ebx
       mov      dword ptr [rbp-0x2C], r15d
       lea      rdx, [rbp-0x30]
       mov      r14, 0xD1FFAB1E
       mov      rdi, r14
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      r13, rax
       mov      dword ptr [rbp-0x30], ebx
       mov      dword ptr [rbp-0x2C], r15d
       lea      rdx, [rbp-0x30]
       mov      rdi, r14
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       mov      r12, rax
       mov      dword ptr [rbp-0x30], ebx
       mov      dword ptr [rbp-0x2C], r15d
       lea      rdx, [rbp-0x30]
       mov      rdi, r14
       mov      esi, 2
       call     CORINFO_HELP_NEW_MDARR
       xor      ecx, ecx
       test     ebx, ebx
       jle      G_M000_IG07
 
G_M000_IG03:
       xor      edx, edx
       test     r15d, r15d
       jle      G_M000_IG06
 
G_M000_IG04:
       mov      edi, ecx
       sub      edi, dword ptr [r13+0x18]
       mov      esi, dword ptr [r13+0x10]
       align    [0 bytes for IG05]
 
G_M000_IG05:
       mov      r8d, edi
       cmp      r8d, esi
       jae      G_M000_IG15
       mov      r9d, dword ptr [r13+0x14]
       imul     r8d, r9d
       mov      r10d, edx
       sub      r10d, dword ptr [r13+0x1C]
       cmp      r10d, r9d
       jae      G_M000_IG15
       add      r10d, r8d
       mov      r9d, r10d
       lea      r8d, [rcx+rdx]
       vxorps   xmm0, xmm0, xmm0
       vcvtsi2sd xmm0, xmm0, r8d
       vmovsd   qword ptr [r13+8*r9+0x20], xmm0
       mov      r8d, ecx
       sub      r8d, dword ptr [r12+0x18]
       cmp      r8d, dword ptr [r12+0x10]
       jae      G_M000_IG15
       mov      r9d, dword ptr [r12+0x14]
       imul     r8d, r9d
       mov      r10d, edx
       sub      r10d, dword ptr [r12+0x1C]
       cmp      r10d, r9d
       jae      G_M000_IG15
       add      r10d, r8d
       mov      r9d, r10d
       vmovsd   qword ptr [r12+8*r9+0x20], xmm0
       inc      edx
       cmp      edx, r15d
       jl       SHORT G_M000_IG05
 
G_M000_IG06:
       inc      ecx
       cmp      ecx, ebx
       jl       G_M000_IG03
 
G_M000_IG07:
       xor      ecx, ecx
       test     ebx, ebx
       jle      G_M000_IG13
 
G_M000_IG08:
       xor      edx, edx
       test     r15d, r15d
       jle      G_M000_IG12
 
G_M000_IG09:
       vxorps   xmm0, xmm0, xmm0
       xor      edi, edi
       mov      r8d, ecx
       sub      r8d, dword ptr [r13+0x18]
       mov      esi, dword ptr [r13+0x10]
       align    [0 bytes for IG10]
 
G_M000_IG10:
       mov      r9d, r8d
       cmp      r9d, esi
       jae      G_M000_IG15
       mov      r10d, dword ptr [r13+0x14]
       imul     r9d, r10d
       mov      r11d, edi
       sub      r11d, dword ptr [r13+0x1C]
       cmp      r11d, r10d
       jae      G_M000_IG15
       add      r9d, r11d
       mov      r11d, r9d
       vmovsd   xmm1, qword ptr [r13+8*r11+0x20]
       mov      r9d, edi
       sub      r9d, dword ptr [r12+0x18]
       cmp      r9d, dword ptr [r12+0x10]
       jae      G_M000_IG15
       mov      r10d, dword ptr [r12+0x14]
       imul     r9d, r10d
       mov      r11d, edx
       sub      r11d, dword ptr [r12+0x1C]
       cmp      r11d, r10d
       jae      G_M000_IG15
       add      r9d, r11d
       vmulsd   xmm1, xmm1, qword ptr [r12+8*r9+0x20]
       vaddsd   xmm0, xmm1, xmm0
       inc      edi
       cmp      edi, ebx
       jl       SHORT G_M000_IG10
 
G_M000_IG11:
       mov      r9d, ecx
       sub      r9d, dword ptr [rax+0x18]
       cmp      r9d, dword ptr [rax+0x10]
       jae      SHORT G_M000_IG15
       mov      edi, dword ptr [rax+0x14]
       imul     r9d, edi
       mov      r11d, edx
       sub      r11d, dword ptr [rax+0x1C]
       cmp      r11d, edi
       jae      SHORT G_M000_IG15
       add      r9d, r11d
       mov      edi, r9d
       vmovsd   qword ptr [rax+8*rdi+0x20], xmm0
       inc      edx
       cmp      edx, r15d
       jl       G_M000_IG09
 
G_M000_IG12:
       inc      ecx
       cmp      ecx, ebx
       jl       G_M000_IG08
 
G_M000_IG13:
       dec      ebx
       mov      r9d, ebx
       sub      r9d, dword ptr [rax+0x18]
       cmp      r9d, dword ptr [rax+0x10]
       jae      SHORT G_M000_IG15
       mov      edi, dword ptr [rax+0x14]
       mov      ecx, r9d
       imul     ecx, edi
       dec      r15d
       mov      r11d, r15d
       sub      r11d, dword ptr [rax+0x1C]
       cmp      r11d, edi
       jae      SHORT G_M000_IG15
       add      ecx, r11d
       vmovsd   xmm0, qword ptr [rax+8*rcx+0x20]
       call     [System.Console:WriteLine(double)]
       nop      
 
G_M000_IG14:
       add      rsp, 8
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
G_M000_IG15:
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
 
; Total bytes of code 579

; Assembly listing for method Program:Main(System.String[]) (Tier1-OSR)
; Emitting BLENDED_CODE for X64 with AVX - Unix
; Tier1-OSR code
; OSR variant for entry point 0x37
; optimized code
; optimized using Dynamic PGO
; rbp based frame
; partially interruptible
; with Dynamic PGO: edge weights are valid, and fgCalledCount is 100.4
; 18 inlinees with PGO data; 12 single block inlinees; 3 inlinees without PGO data

G_M000_IG01:
       mov      rax, qword ptr [rbp]
       push     rax
       sub      rsp, 128
       lea      rbp, [rsp+0x80]
       mov      r12d, dword ptr [rbp+0x7C]
       mov      r15d, dword ptr [rbp+0x78]
       mov      r14d, dword ptr [rbp+0x74]
       mov      r13d, dword ptr [rbp+0x70]
       mov      ebx, dword ptr [rbp+0x6C]
 
G_M000_IG02:
       lea      rdi, [rbp-0x70]
       mov      rsi, r10
       call     CORINFO_HELP_INIT_PINVOKE_FRAME
       mov      qword ptr [rbp-0x30], rax
       mov      rdi, rsp
       mov      qword ptr [rbp-0x50], rdi
       mov      rdi, rbp
       mov      qword ptr [rbp-0x40], rdi
       jmp      SHORT G_M000_IG08
 
G_M000_IG03:
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x60], rax
       lea      rax, G_M000_IG06
       mov      qword ptr [rbp-0x48], rax
       lea      rax, bword ptr [rbp-0x70]
       mov      qword ptr [rbx+0x10], rax
       mov      byte  ptr [rbx+0x0C], 0
 
G_M000_IG04:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG05:
       call     rax ; Program:start_rapl():int
 
G_M000_IG06:
       mov      byte  ptr [rbx+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG07
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG07:
       mov      rax, bword ptr [rbp-0x68]
       mov      qword ptr [rbx+0x10], rax
       xor      eax, eax
       mov      ebx, eax
 
G_M000_IG08:
       cmp      ebx, 0x3E8
       jge      SHORT G_M000_IG10
 
G_M000_IG09:
       mov      edi, r15d
       mov      esi, r14d
       call     [Program:run_benchmark(int,int)]
       inc      ebx
       cmp      ebx, 0x3E8
       jl       SHORT G_M000_IG09
 
G_M000_IG10:
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp-0x60], rax
       lea      rax, G_M000_IG13
       mov      qword ptr [rbp-0x48], rax
       lea      rax, bword ptr [rbp-0x70]
       mov      rbx, qword ptr [rbp-0x30]
       mov      qword ptr [rbx+0x10], rax
       mov      byte  ptr [rbx+0x0C], 0
 
G_M000_IG11:
       mov      rax, 0xD1FFAB1E
 
G_M000_IG12:
       call     rax ; Program:stop_rapl()
 
G_M000_IG13:
       mov      byte  ptr [rbx+0x0C], 1
       cmp      dword ptr [(reloc)], 0
       je       SHORT G_M000_IG14
       call     [CORINFO_HELP_STOP_FOR_GC]
 
G_M000_IG14:
       mov      rax, bword ptr [rbp-0x68]
       mov      qword ptr [rbx+0x10], rax
       inc      r13d
       cmp      r13d, r12d
       jl       G_M000_IG03
 
G_M000_IG15:
       add      rsp, 264
       pop      rbx
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
 
; Total bytes of code 291

